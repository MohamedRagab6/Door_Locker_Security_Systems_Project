
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000029ae  00002a42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800074  00800074  00002a56  2**0
                  ALLOC
  3 .stab         00002fac  00000000  00000000  00002a58  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001518  00000000  00000000  00005a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000071cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008e15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000aab0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ac10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ae9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b66b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 c1 11 	jmp	0x2382	; 0x2382 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ea       	ldi	r30, 0xAE	; 174
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 37       	cpi	r26, 0x78	; 120
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c3 10 	call	0x2186	; 0x2186 <main>
      8a:	0c 94 d5 14 	jmp	0x29aa	; 0x29aa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 65 14 	jmp	0x28ca	; 0x28ca <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 81 14 	jmp	0x2902	; 0x2902 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 65 14 	jmp	0x28ca	; 0x28ca <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 81 14 	jmp	0x2902	; 0x2902 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 65 14 	jmp	0x28ca	; 0x28ca <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 81 14 	jmp	0x2902	; 0x2902 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 65 14 	jmp	0x28ca	; 0x28ca <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 81 14 	jmp	0x2902	; 0x2902 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 65 14 	jmp	0x28ca	; 0x28ca <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 81 14 	jmp	0x2902	; 0x2902 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 69 14 	jmp	0x28d2	; 0x28d2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 85 14 	jmp	0x290a	; 0x290a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <receivePassword>:

/*Description:
 * a function to receive password from HMI_ECU
 */
void receivePassword( uint8 *pass_ptr)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <receivePassword+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <receivePassword+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9c 83       	std	Y+4, r25	; 0x04
     b54:	8b 83       	std	Y+3, r24	; 0x03
	//while(UART_recieveByte() != MC_READY){};
	uint8 receiver;
	for(uint8 i = 0 ; i < SIZE_OF_PASSWORD ; i++)
     b56:	19 82       	std	Y+1, r1	; 0x01
     b58:	10 c0       	rjmp	.+32     	; 0xb7a <receivePassword+0x34>
	{
		receiver = UART_recieveByte();
     b5a:	0e 94 bc 13 	call	0x2778	; 0x2778 <UART_recieveByte>
     b5e:	8a 83       	std	Y+2, r24	; 0x02
		pass_ptr[i] = receiver;
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	28 2f       	mov	r18, r24
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	8b 81       	ldd	r24, Y+3	; 0x03
     b68:	9c 81       	ldd	r25, Y+4	; 0x04
     b6a:	fc 01       	movw	r30, r24
     b6c:	e2 0f       	add	r30, r18
     b6e:	f3 1f       	adc	r31, r19
     b70:	8a 81       	ldd	r24, Y+2	; 0x02
     b72:	80 83       	st	Z, r24
 */
void receivePassword( uint8 *pass_ptr)
{
	//while(UART_recieveByte() != MC_READY){};
	uint8 receiver;
	for(uint8 i = 0 ; i < SIZE_OF_PASSWORD ; i++)
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	8f 5f       	subi	r24, 0xFF	; 255
     b78:	89 83       	std	Y+1, r24	; 0x01
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	85 30       	cpi	r24, 0x05	; 5
     b7e:	68 f3       	brcs	.-38     	; 0xb5a <receivePassword+0x14>
	{
		receiver = UART_recieveByte();
		pass_ptr[i] = receiver;
	}
}
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
     b84:	0f 90       	pop	r0
     b86:	0f 90       	pop	r0
     b88:	cf 91       	pop	r28
     b8a:	df 91       	pop	r29
     b8c:	08 95       	ret

00000b8e <storePassword>:

/*Description:
 * a function to store password in eeprom
 */
void storePassword(uint16 address , uint8 *pass_ptr)
{
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	64 97       	sbiw	r28, 0x14	; 20
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	cd bf       	out	0x3d, r28	; 61
     ba2:	9a 8b       	std	Y+18, r25	; 0x12
     ba4:	89 8b       	std	Y+17, r24	; 0x11
     ba6:	7c 8b       	std	Y+20, r23	; 0x14
     ba8:	6b 8b       	std	Y+19, r22	; 0x13
	uint8 key;
	for(uint8 i = 0 ; i < SIZE_OF_PASSWORD ; i++)
     baa:	1f 86       	std	Y+15, r1	; 0x0f
     bac:	89 c0       	rjmp	.+274    	; 0xcc0 <storePassword+0x132>
	{
		key = *(pass_ptr + i);
     bae:	8f 85       	ldd	r24, Y+15	; 0x0f
     bb0:	28 2f       	mov	r18, r24
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	8b 89       	ldd	r24, Y+19	; 0x13
     bb6:	9c 89       	ldd	r25, Y+20	; 0x14
     bb8:	fc 01       	movw	r30, r24
     bba:	e2 0f       	add	r30, r18
     bbc:	f3 1f       	adc	r31, r19
     bbe:	80 81       	ld	r24, Z
     bc0:	88 8b       	std	Y+16, r24	; 0x10
		EEPROM_writeByte(address + i, key);
     bc2:	8f 85       	ldd	r24, Y+15	; 0x0f
     bc4:	28 2f       	mov	r18, r24
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	89 89       	ldd	r24, Y+17	; 0x11
     bca:	9a 89       	ldd	r25, Y+18	; 0x12
     bcc:	82 0f       	add	r24, r18
     bce:	93 1f       	adc	r25, r19
     bd0:	68 89       	ldd	r22, Y+16	; 0x10
     bd2:	0e 94 28 08 	call	0x1050	; 0x1050 <EEPROM_writeByte>
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	a0 e2       	ldi	r26, 0x20	; 32
     bdc:	b1 e4       	ldi	r27, 0x41	; 65
     bde:	8b 87       	std	Y+11, r24	; 0x0b
     be0:	9c 87       	std	Y+12, r25	; 0x0c
     be2:	ad 87       	std	Y+13, r26	; 0x0d
     be4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     be6:	6b 85       	ldd	r22, Y+11	; 0x0b
     be8:	7c 85       	ldd	r23, Y+12	; 0x0c
     bea:	8d 85       	ldd	r24, Y+13	; 0x0d
     bec:	9e 85       	ldd	r25, Y+14	; 0x0e
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	4a e7       	ldi	r20, 0x7A	; 122
     bf4:	53 e4       	ldi	r21, 0x43	; 67
     bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bfa:	dc 01       	movw	r26, r24
     bfc:	cb 01       	movw	r24, r22
     bfe:	8f 83       	std	Y+7, r24	; 0x07
     c00:	98 87       	std	Y+8, r25	; 0x08
     c02:	a9 87       	std	Y+9, r26	; 0x09
     c04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c06:	6f 81       	ldd	r22, Y+7	; 0x07
     c08:	78 85       	ldd	r23, Y+8	; 0x08
     c0a:	89 85       	ldd	r24, Y+9	; 0x09
     c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	40 e8       	ldi	r20, 0x80	; 128
     c14:	5f e3       	ldi	r21, 0x3F	; 63
     c16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c1a:	88 23       	and	r24, r24
     c1c:	2c f4       	brge	.+10     	; 0xc28 <storePassword+0x9a>
		__ticks = 1;
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	9e 83       	std	Y+6, r25	; 0x06
     c24:	8d 83       	std	Y+5, r24	; 0x05
     c26:	3f c0       	rjmp	.+126    	; 0xca6 <storePassword+0x118>
	else if (__tmp > 65535)
     c28:	6f 81       	ldd	r22, Y+7	; 0x07
     c2a:	78 85       	ldd	r23, Y+8	; 0x08
     c2c:	89 85       	ldd	r24, Y+9	; 0x09
     c2e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	3f ef       	ldi	r19, 0xFF	; 255
     c34:	4f e7       	ldi	r20, 0x7F	; 127
     c36:	57 e4       	ldi	r21, 0x47	; 71
     c38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c3c:	18 16       	cp	r1, r24
     c3e:	4c f5       	brge	.+82     	; 0xc92 <storePassword+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c40:	6b 85       	ldd	r22, Y+11	; 0x0b
     c42:	7c 85       	ldd	r23, Y+12	; 0x0c
     c44:	8d 85       	ldd	r24, Y+13	; 0x0d
     c46:	9e 85       	ldd	r25, Y+14	; 0x0e
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	40 e2       	ldi	r20, 0x20	; 32
     c4e:	51 e4       	ldi	r21, 0x41	; 65
     c50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c54:	dc 01       	movw	r26, r24
     c56:	cb 01       	movw	r24, r22
     c58:	bc 01       	movw	r22, r24
     c5a:	cd 01       	movw	r24, r26
     c5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c60:	dc 01       	movw	r26, r24
     c62:	cb 01       	movw	r24, r22
     c64:	9e 83       	std	Y+6, r25	; 0x06
     c66:	8d 83       	std	Y+5, r24	; 0x05
     c68:	0f c0       	rjmp	.+30     	; 0xc88 <storePassword+0xfa>
     c6a:	89 e1       	ldi	r24, 0x19	; 25
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	9c 83       	std	Y+4, r25	; 0x04
     c70:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c72:	8b 81       	ldd	r24, Y+3	; 0x03
     c74:	9c 81       	ldd	r25, Y+4	; 0x04
     c76:	01 97       	sbiw	r24, 0x01	; 1
     c78:	f1 f7       	brne	.-4      	; 0xc76 <storePassword+0xe8>
     c7a:	9c 83       	std	Y+4, r25	; 0x04
     c7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c7e:	8d 81       	ldd	r24, Y+5	; 0x05
     c80:	9e 81       	ldd	r25, Y+6	; 0x06
     c82:	01 97       	sbiw	r24, 0x01	; 1
     c84:	9e 83       	std	Y+6, r25	; 0x06
     c86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c88:	8d 81       	ldd	r24, Y+5	; 0x05
     c8a:	9e 81       	ldd	r25, Y+6	; 0x06
     c8c:	00 97       	sbiw	r24, 0x00	; 0
     c8e:	69 f7       	brne	.-38     	; 0xc6a <storePassword+0xdc>
     c90:	14 c0       	rjmp	.+40     	; 0xcba <storePassword+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c92:	6f 81       	ldd	r22, Y+7	; 0x07
     c94:	78 85       	ldd	r23, Y+8	; 0x08
     c96:	89 85       	ldd	r24, Y+9	; 0x09
     c98:	9a 85       	ldd	r25, Y+10	; 0x0a
     c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c9e:	dc 01       	movw	r26, r24
     ca0:	cb 01       	movw	r24, r22
     ca2:	9e 83       	std	Y+6, r25	; 0x06
     ca4:	8d 83       	std	Y+5, r24	; 0x05
     ca6:	8d 81       	ldd	r24, Y+5	; 0x05
     ca8:	9e 81       	ldd	r25, Y+6	; 0x06
     caa:	9a 83       	std	Y+2, r25	; 0x02
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	9a 81       	ldd	r25, Y+2	; 0x02
     cb2:	01 97       	sbiw	r24, 0x01	; 1
     cb4:	f1 f7       	brne	.-4      	; 0xcb2 <storePassword+0x124>
     cb6:	9a 83       	std	Y+2, r25	; 0x02
     cb8:	89 83       	std	Y+1, r24	; 0x01
 * a function to store password in eeprom
 */
void storePassword(uint16 address , uint8 *pass_ptr)
{
	uint8 key;
	for(uint8 i = 0 ; i < SIZE_OF_PASSWORD ; i++)
     cba:	8f 85       	ldd	r24, Y+15	; 0x0f
     cbc:	8f 5f       	subi	r24, 0xFF	; 255
     cbe:	8f 87       	std	Y+15, r24	; 0x0f
     cc0:	8f 85       	ldd	r24, Y+15	; 0x0f
     cc2:	85 30       	cpi	r24, 0x05	; 5
     cc4:	08 f4       	brcc	.+2      	; 0xcc8 <storePassword+0x13a>
     cc6:	73 cf       	rjmp	.-282    	; 0xbae <storePassword+0x20>
	{
		key = *(pass_ptr + i);
		EEPROM_writeByte(address + i, key);
		_delay_ms(10);
	}
}
     cc8:	64 96       	adiw	r28, 0x14	; 20
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	f8 94       	cli
     cce:	de bf       	out	0x3e, r29	; 62
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	cd bf       	out	0x3d, r28	; 61
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <getPasswordFromEeprom>:

/*Description:
 * a function to get password from eeprom
 */
void getPasswordFromEeprom(uint16 address , uint8 *pass_ptr)
{
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	64 97       	sbiw	r28, 0x14	; 20
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	de bf       	out	0x3e, r29	; 62
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	cd bf       	out	0x3d, r28	; 61
     cee:	9a 8b       	std	Y+18, r25	; 0x12
     cf0:	89 8b       	std	Y+17, r24	; 0x11
     cf2:	7c 8b       	std	Y+20, r23	; 0x14
     cf4:	6b 8b       	std	Y+19, r22	; 0x13
	uint8 key;
	for(uint8 i = 0 ; i < SIZE_OF_PASSWORD ; i++)
     cf6:	1f 86       	std	Y+15, r1	; 0x0f
     cf8:	8c c0       	rjmp	.+280    	; 0xe12 <getPasswordFromEeprom+0x138>
	{

		EEPROM_readByte(address + i, &key);
     cfa:	8f 85       	ldd	r24, Y+15	; 0x0f
     cfc:	28 2f       	mov	r18, r24
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	89 89       	ldd	r24, Y+17	; 0x11
     d02:	9a 89       	ldd	r25, Y+18	; 0x12
     d04:	82 0f       	add	r24, r18
     d06:	93 1f       	adc	r25, r19
     d08:	9e 01       	movw	r18, r28
     d0a:	20 5f       	subi	r18, 0xF0	; 240
     d0c:	3f 4f       	sbci	r19, 0xFF	; 255
     d0e:	b9 01       	movw	r22, r18
     d10:	0e 94 69 08 	call	0x10d2	; 0x10d2 <EEPROM_readByte>
		pass_ptr[i] = key;
     d14:	8f 85       	ldd	r24, Y+15	; 0x0f
     d16:	28 2f       	mov	r18, r24
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	8b 89       	ldd	r24, Y+19	; 0x13
     d1c:	9c 89       	ldd	r25, Y+20	; 0x14
     d1e:	fc 01       	movw	r30, r24
     d20:	e2 0f       	add	r30, r18
     d22:	f3 1f       	adc	r31, r19
     d24:	88 89       	ldd	r24, Y+16	; 0x10
     d26:	80 83       	st	Z, r24
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	a0 e2       	ldi	r26, 0x20	; 32
     d2e:	b1 e4       	ldi	r27, 0x41	; 65
     d30:	8b 87       	std	Y+11, r24	; 0x0b
     d32:	9c 87       	std	Y+12, r25	; 0x0c
     d34:	ad 87       	std	Y+13, r26	; 0x0d
     d36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d38:	6b 85       	ldd	r22, Y+11	; 0x0b
     d3a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d3e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	4a e7       	ldi	r20, 0x7A	; 122
     d46:	53 e4       	ldi	r21, 0x43	; 67
     d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	8f 83       	std	Y+7, r24	; 0x07
     d52:	98 87       	std	Y+8, r25	; 0x08
     d54:	a9 87       	std	Y+9, r26	; 0x09
     d56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d58:	6f 81       	ldd	r22, Y+7	; 0x07
     d5a:	78 85       	ldd	r23, Y+8	; 0x08
     d5c:	89 85       	ldd	r24, Y+9	; 0x09
     d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	40 e8       	ldi	r20, 0x80	; 128
     d66:	5f e3       	ldi	r21, 0x3F	; 63
     d68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d6c:	88 23       	and	r24, r24
     d6e:	2c f4       	brge	.+10     	; 0xd7a <getPasswordFromEeprom+0xa0>
		__ticks = 1;
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	9e 83       	std	Y+6, r25	; 0x06
     d76:	8d 83       	std	Y+5, r24	; 0x05
     d78:	3f c0       	rjmp	.+126    	; 0xdf8 <getPasswordFromEeprom+0x11e>
	else if (__tmp > 65535)
     d7a:	6f 81       	ldd	r22, Y+7	; 0x07
     d7c:	78 85       	ldd	r23, Y+8	; 0x08
     d7e:	89 85       	ldd	r24, Y+9	; 0x09
     d80:	9a 85       	ldd	r25, Y+10	; 0x0a
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	3f ef       	ldi	r19, 0xFF	; 255
     d86:	4f e7       	ldi	r20, 0x7F	; 127
     d88:	57 e4       	ldi	r21, 0x47	; 71
     d8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d8e:	18 16       	cp	r1, r24
     d90:	4c f5       	brge	.+82     	; 0xde4 <getPasswordFromEeprom+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d92:	6b 85       	ldd	r22, Y+11	; 0x0b
     d94:	7c 85       	ldd	r23, Y+12	; 0x0c
     d96:	8d 85       	ldd	r24, Y+13	; 0x0d
     d98:	9e 85       	ldd	r25, Y+14	; 0x0e
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	40 e2       	ldi	r20, 0x20	; 32
     da0:	51 e4       	ldi	r21, 0x41	; 65
     da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     da6:	dc 01       	movw	r26, r24
     da8:	cb 01       	movw	r24, r22
     daa:	bc 01       	movw	r22, r24
     dac:	cd 01       	movw	r24, r26
     dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     db2:	dc 01       	movw	r26, r24
     db4:	cb 01       	movw	r24, r22
     db6:	9e 83       	std	Y+6, r25	; 0x06
     db8:	8d 83       	std	Y+5, r24	; 0x05
     dba:	0f c0       	rjmp	.+30     	; 0xdda <getPasswordFromEeprom+0x100>
     dbc:	89 e1       	ldi	r24, 0x19	; 25
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	9c 83       	std	Y+4, r25	; 0x04
     dc2:	8b 83       	std	Y+3, r24	; 0x03
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	9c 81       	ldd	r25, Y+4	; 0x04
     dc8:	01 97       	sbiw	r24, 0x01	; 1
     dca:	f1 f7       	brne	.-4      	; 0xdc8 <getPasswordFromEeprom+0xee>
     dcc:	9c 83       	std	Y+4, r25	; 0x04
     dce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dd0:	8d 81       	ldd	r24, Y+5	; 0x05
     dd2:	9e 81       	ldd	r25, Y+6	; 0x06
     dd4:	01 97       	sbiw	r24, 0x01	; 1
     dd6:	9e 83       	std	Y+6, r25	; 0x06
     dd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dda:	8d 81       	ldd	r24, Y+5	; 0x05
     ddc:	9e 81       	ldd	r25, Y+6	; 0x06
     dde:	00 97       	sbiw	r24, 0x00	; 0
     de0:	69 f7       	brne	.-38     	; 0xdbc <getPasswordFromEeprom+0xe2>
     de2:	14 c0       	rjmp	.+40     	; 0xe0c <getPasswordFromEeprom+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     de4:	6f 81       	ldd	r22, Y+7	; 0x07
     de6:	78 85       	ldd	r23, Y+8	; 0x08
     de8:	89 85       	ldd	r24, Y+9	; 0x09
     dea:	9a 85       	ldd	r25, Y+10	; 0x0a
     dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     df0:	dc 01       	movw	r26, r24
     df2:	cb 01       	movw	r24, r22
     df4:	9e 83       	std	Y+6, r25	; 0x06
     df6:	8d 83       	std	Y+5, r24	; 0x05
     df8:	8d 81       	ldd	r24, Y+5	; 0x05
     dfa:	9e 81       	ldd	r25, Y+6	; 0x06
     dfc:	9a 83       	std	Y+2, r25	; 0x02
     dfe:	89 83       	std	Y+1, r24	; 0x01
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	9a 81       	ldd	r25, Y+2	; 0x02
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	f1 f7       	brne	.-4      	; 0xe04 <getPasswordFromEeprom+0x12a>
     e08:	9a 83       	std	Y+2, r25	; 0x02
     e0a:	89 83       	std	Y+1, r24	; 0x01
 * a function to get password from eeprom
 */
void getPasswordFromEeprom(uint16 address , uint8 *pass_ptr)
{
	uint8 key;
	for(uint8 i = 0 ; i < SIZE_OF_PASSWORD ; i++)
     e0c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e0e:	8f 5f       	subi	r24, 0xFF	; 255
     e10:	8f 87       	std	Y+15, r24	; 0x0f
     e12:	8f 85       	ldd	r24, Y+15	; 0x0f
     e14:	85 30       	cpi	r24, 0x05	; 5
     e16:	08 f4       	brcc	.+2      	; 0xe1a <getPasswordFromEeprom+0x140>
     e18:	70 cf       	rjmp	.-288    	; 0xcfa <getPasswordFromEeprom+0x20>

		EEPROM_readByte(address + i, &key);
		pass_ptr[i] = key;
		_delay_ms(10);
	}
}
     e1a:	64 96       	adiw	r28, 0x14	; 20
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	f8 94       	cli
     e20:	de bf       	out	0x3e, r29	; 62
     e22:	0f be       	out	0x3f, r0	; 63
     e24:	cd bf       	out	0x3d, r28	; 61
     e26:	cf 91       	pop	r28
     e28:	df 91       	pop	r29
     e2a:	08 95       	ret

00000e2c <checkPassword>:

/*Description:
 * a function to check password enterned by the user with the password saved in eeprom
 */
uint8 checkPassword(uint8 *first_entered_password , uint8 *second_entered_password)
{
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	00 d0       	rcall	.+0      	; 0xe32 <checkPassword+0x6>
     e32:	00 d0       	rcall	.+0      	; 0xe34 <checkPassword+0x8>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <checkPassword+0xa>
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	9b 83       	std	Y+3, r25	; 0x03
     e3c:	8a 83       	std	Y+2, r24	; 0x02
     e3e:	7d 83       	std	Y+5, r23	; 0x05
     e40:	6c 83       	std	Y+4, r22	; 0x04

	for(uint8 i = 0 ; i  < SIZE_OF_PASSWORD ; i++)
     e42:	19 82       	std	Y+1, r1	; 0x01
     e44:	1a c0       	rjmp	.+52     	; 0xe7a <checkPassword+0x4e>
	{

		if(first_entered_password[i] != second_entered_password[i])
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	9b 81       	ldd	r25, Y+3	; 0x03
     e50:	fc 01       	movw	r30, r24
     e52:	e2 0f       	add	r30, r18
     e54:	f3 1f       	adc	r31, r19
     e56:	40 81       	ld	r20, Z
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	8c 81       	ldd	r24, Y+4	; 0x04
     e60:	9d 81       	ldd	r25, Y+5	; 0x05
     e62:	fc 01       	movw	r30, r24
     e64:	e2 0f       	add	r30, r18
     e66:	f3 1f       	adc	r31, r19
     e68:	80 81       	ld	r24, Z
     e6a:	48 17       	cp	r20, r24
     e6c:	19 f0       	breq	.+6      	; 0xe74 <checkPassword+0x48>

			return PASSWORDS_ARE_NOT_MATCHED ;
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	8e 83       	std	Y+6, r24	; 0x06
     e72:	07 c0       	rjmp	.+14     	; 0xe82 <checkPassword+0x56>
 * a function to check password enterned by the user with the password saved in eeprom
 */
uint8 checkPassword(uint8 *first_entered_password , uint8 *second_entered_password)
{

	for(uint8 i = 0 ; i  < SIZE_OF_PASSWORD ; i++)
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	8f 5f       	subi	r24, 0xFF	; 255
     e78:	89 83       	std	Y+1, r24	; 0x01
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	85 30       	cpi	r24, 0x05	; 5
     e7e:	18 f3       	brcs	.-58     	; 0xe46 <checkPassword+0x1a>
		if(first_entered_password[i] != second_entered_password[i])

			return PASSWORDS_ARE_NOT_MATCHED ;

	}
	return PASSWORDS_ARE_MATCHED ;
     e80:	1e 82       	std	Y+6, r1	; 0x06
     e82:	8e 81       	ldd	r24, Y+6	; 0x06
}
     e84:	26 96       	adiw	r28, 0x06	; 6
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	de bf       	out	0x3e, r29	; 62
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	cd bf       	out	0x3d, r28	; 61
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <LockDoorCallBack>:

/*Description:
 * a call back function to lock door for 15 secs
 */
void LockDoorCallBack (void)
{
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
	g_count++ ;
     e9e:	80 91 74 00 	lds	r24, 0x0074
     ea2:	8f 5f       	subi	r24, 0xFF	; 255
     ea4:	80 93 74 00 	sts	0x0074, r24
	if(g_count == (32 * 5)) {
     ea8:	80 91 74 00 	lds	r24, 0x0074
     eac:	80 3a       	cpi	r24, 0xA0	; 160
     eae:	51 f4       	brne	.+20     	; 0xec4 <LockDoorCallBack+0x2e>

		Timer0_DeInit();
     eb0:	0e 94 89 12 	call	0x2512	; 0x2512 <Timer0_DeInit>
		DcMotor_Rotate(STOP);
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	0e 94 81 11 	call	0x2302	; 0x2302 <DcMotor_Rotate>
		g_count = 0 ;
     eba:	10 92 74 00 	sts	0x0074, r1

		state = 1;
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	80 93 75 00 	sts	0x0075, r24
	}

}
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	08 95       	ret

00000eca <pauseCallBack>:
/*Description:
 * a call back function to hold motor for 3 secs
 */
void pauseCallBack(void)
{
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
	g_count++ ;
     ed2:	80 91 74 00 	lds	r24, 0x0074
     ed6:	8f 5f       	subi	r24, 0xFF	; 255
     ed8:	80 93 74 00 	sts	0x0074, r24

	if(g_count == (32 * 3)) {
     edc:	80 91 74 00 	lds	r24, 0x0074
     ee0:	80 36       	cpi	r24, 0x60	; 96
     ee2:	51 f4       	brne	.+20     	; 0xef8 <pauseCallBack+0x2e>

		Timer0_DeInit();
     ee4:	0e 94 89 12 	call	0x2512	; 0x2512 <Timer0_DeInit>
		g_count = 0 ;
     ee8:	10 92 74 00 	sts	0x0074, r1
		DcMotor_Rotate(A_CW);
     eec:	82 e0       	ldi	r24, 0x02	; 2
     eee:	0e 94 81 11 	call	0x2302	; 0x2302 <DcMotor_Rotate>

		state = 1;
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	80 93 75 00 	sts	0x0075, r24

	}
}
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <unlockDoorCallBack>:
/*Description:
 * a call back function to unlock door for 15 secs
 */
void unlockDoorCallBack(void) {
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
	g_count++ ;
     f06:	80 91 74 00 	lds	r24, 0x0074
     f0a:	8f 5f       	subi	r24, 0xFF	; 255
     f0c:	80 93 74 00 	sts	0x0074, r24

	if(g_count == (32 * 5)) {
     f10:	80 91 74 00 	lds	r24, 0x0074
     f14:	80 3a       	cpi	r24, 0xA0	; 160
     f16:	51 f4       	brne	.+20     	; 0xf2c <unlockDoorCallBack+0x2e>

		DcMotor_Rotate(STOP);
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	0e 94 81 11 	call	0x2302	; 0x2302 <DcMotor_Rotate>
		g_count = 0 ;
     f1e:	10 92 74 00 	sts	0x0074, r1
		Timer0_DeInit();
     f22:	0e 94 89 12 	call	0x2512	; 0x2512 <Timer0_DeInit>

		state = 1;
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	80 93 75 00 	sts	0x0075, r24

	}

}
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <buzzerForBurgularsCallBack>:
/*Description:
 * a call back function for buzzerForBurgulars that is responsible for giving a buzzer alarm when a burgular tries to open door
 */
void buzzerForBurgularsCallBack(void)
{
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62

	g_count++ ;
     f3a:	80 91 74 00 	lds	r24, 0x0074
     f3e:	8f 5f       	subi	r24, 0xFF	; 255
     f40:	80 93 74 00 	sts	0x0074, r24
	if(g_count == 32*3)
     f44:	80 91 74 00 	lds	r24, 0x0074
     f48:	80 36       	cpi	r24, 0x60	; 96
     f4a:	39 f4       	brne	.+14     	; 0xf5a <buzzerForBurgularsCallBack+0x28>
	{
		Timer0_DeInit();
     f4c:	0e 94 89 12 	call	0x2512	; 0x2512 <Timer0_DeInit>
		g_count = 0 ;
     f50:	10 92 74 00 	sts	0x0074, r1

		state = 1 ;
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	80 93 75 00 	sts	0x0075, r24

	}

}
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <doorControl>:
/*Description:
 * a function that is responsible for controling door completely if the suer choose to open the door and entered the password
 */
void doorControl(void)
{
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62

	DcMotor_Rotate(C_W);
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	0e 94 81 11 	call	0x2302	; 0x2302 <DcMotor_Rotate>

	Timer0_setCallBack(unlockDoorCallBack);
     f6e:	8f e7       	ldi	r24, 0x7F	; 127
     f70:	97 e0       	ldi	r25, 0x07	; 7
     f72:	0e 94 77 12 	call	0x24ee	; 0x24ee <Timer0_setCallBack>
	Timer0_init(&timer_config);
     f76:	88 e6       	ldi	r24, 0x68	; 104
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	0e 94 27 12 	call	0x244e	; 0x244e <Timer0_init>
	while(state == 0) ;
     f7e:	80 91 75 00 	lds	r24, 0x0075
     f82:	88 23       	and	r24, r24
     f84:	e1 f3       	breq	.-8      	; 0xf7e <doorControl+0x1e>

	state = 0 ;
     f86:	10 92 75 00 	sts	0x0075, r1
	Timer0_setCallBack(pauseCallBack);
     f8a:	85 e6       	ldi	r24, 0x65	; 101
     f8c:	97 e0       	ldi	r25, 0x07	; 7
     f8e:	0e 94 77 12 	call	0x24ee	; 0x24ee <Timer0_setCallBack>
	Timer0_init(&timer_config);
     f92:	88 e6       	ldi	r24, 0x68	; 104
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	0e 94 27 12 	call	0x244e	; 0x244e <Timer0_init>
	while(state == 0) ;
     f9a:	80 91 75 00 	lds	r24, 0x0075
     f9e:	88 23       	and	r24, r24
     fa0:	e1 f3       	breq	.-8      	; 0xf9a <doorControl+0x3a>

	state = 0 ;
     fa2:	10 92 75 00 	sts	0x0075, r1
	Timer0_setCallBack(LockDoorCallBack);
     fa6:	8b e4       	ldi	r24, 0x4B	; 75
     fa8:	97 e0       	ldi	r25, 0x07	; 7
     faa:	0e 94 77 12 	call	0x24ee	; 0x24ee <Timer0_setCallBack>
	Timer0_init(&timer_config);
     fae:	88 e6       	ldi	r24, 0x68	; 104
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	0e 94 27 12 	call	0x244e	; 0x244e <Timer0_init>
	while(state == 0) ;
     fb6:	80 91 75 00 	lds	r24, 0x0075
     fba:	88 23       	and	r24, r24
     fbc:	e1 f3       	breq	.-8      	; 0xfb6 <doorControl+0x56>

	state = 0;
     fbe:	10 92 75 00 	sts	0x0075, r1
}
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	08 95       	ret

00000fc8 <buzzerForBurgulars>:
/*Description:
 * a function that is responsible making  a buzzer alarm when a burgular tries to enter the house
 */
void buzzerForBurgulars(void)
{
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62

	Buzzer_On();
     fd0:	0e 94 10 08 	call	0x1020	; 0x1020 <Buzzer_On>

	Timer0_setCallBack(buzzerForBurgularsCallBack);
     fd4:	89 e9       	ldi	r24, 0x99	; 153
     fd6:	97 e0       	ldi	r25, 0x07	; 7
     fd8:	0e 94 77 12 	call	0x24ee	; 0x24ee <Timer0_setCallBack>
	Timer0_init(&timer_config);
     fdc:	88 e6       	ldi	r24, 0x68	; 104
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 27 12 	call	0x244e	; 0x244e <Timer0_init>
	while(state == 0);
     fe4:	80 91 75 00 	lds	r24, 0x0075
     fe8:	88 23       	and	r24, r24
     fea:	e1 f3       	breq	.-8      	; 0xfe4 <buzzerForBurgulars+0x1c>

	Buzzer_Off();
     fec:	0e 94 1c 08 	call	0x1038	; 0x1038 <Buzzer_Off>
	LCD_clearScreen();
     ff0:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_clearScreen>
	state = 0 ;
     ff4:	10 92 75 00 	sts	0x0075, r1
}
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <Buzzer_Init>:

/* Description:
 * a function to setup buzzer and setup directions of buzzer pins
 */
void Buzzer_Init(void)
{
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	65 e0       	ldi	r22, 0x05	; 5
    100a:	41 e0       	ldi	r20, 0x01	; 1
    100c:	0e 94 c9 08 	call	0x1192	; 0x1192 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	65 e0       	ldi	r22, 0x05	; 5
    1014:	40 e0       	ldi	r20, 0x00	; 0
    1016:	0e 94 b4 09 	call	0x1368	; 0x1368 <GPIO_writePin>
}
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	08 95       	ret

00001020 <Buzzer_On>:
 * a function to turn the buzzer on
 */


void Buzzer_On(void)
{
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	65 e0       	ldi	r22, 0x05	; 5
    102c:	41 e0       	ldi	r20, 0x01	; 1
    102e:	0e 94 b4 09 	call	0x1368	; 0x1368 <GPIO_writePin>
}
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	08 95       	ret

00001038 <Buzzer_Off>:
  */



void Buzzer_Off(void)
{
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	65 e0       	ldi	r22, 0x05	; 5
    1044:	40 e0       	ldi	r20, 0x00	; 0
    1046:	0e 94 b4 09 	call	0x1368	; 0x1368 <GPIO_writePin>
}
    104a:	cf 91       	pop	r28
    104c:	df 91       	pop	r29
    104e:	08 95       	ret

00001050 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1050:	df 93       	push	r29
    1052:	cf 93       	push	r28
    1054:	00 d0       	rcall	.+0      	; 0x1056 <EEPROM_writeByte+0x6>
    1056:	00 d0       	rcall	.+0      	; 0x1058 <EEPROM_writeByte+0x8>
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	9a 83       	std	Y+2, r25	; 0x02
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1062:	0e 94 b2 12 	call	0x2564	; 0x2564 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1066:	0e 94 0a 13 	call	0x2614	; 0x2614 <TWI_getStatus>
    106a:	88 30       	cpi	r24, 0x08	; 8
    106c:	11 f0       	breq	.+4      	; 0x1072 <EEPROM_writeByte+0x22>
        return ERROR;
    106e:	1c 82       	std	Y+4, r1	; 0x04
    1070:	28 c0       	rjmp	.+80     	; 0x10c2 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	9a 81       	ldd	r25, Y+2	; 0x02
    1076:	80 70       	andi	r24, 0x00	; 0
    1078:	97 70       	andi	r25, 0x07	; 7
    107a:	88 0f       	add	r24, r24
    107c:	89 2f       	mov	r24, r25
    107e:	88 1f       	adc	r24, r24
    1080:	99 0b       	sbc	r25, r25
    1082:	91 95       	neg	r25
    1084:	80 6a       	ori	r24, 0xA0	; 160
    1086:	0e 94 cd 12 	call	0x259a	; 0x259a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    108a:	0e 94 0a 13 	call	0x2614	; 0x2614 <TWI_getStatus>
    108e:	88 31       	cpi	r24, 0x18	; 24
    1090:	11 f0       	breq	.+4      	; 0x1096 <EEPROM_writeByte+0x46>
        return ERROR; 
    1092:	1c 82       	std	Y+4, r1	; 0x04
    1094:	16 c0       	rjmp	.+44     	; 0x10c2 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	0e 94 cd 12 	call	0x259a	; 0x259a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    109c:	0e 94 0a 13 	call	0x2614	; 0x2614 <TWI_getStatus>
    10a0:	88 32       	cpi	r24, 0x28	; 40
    10a2:	11 f0       	breq	.+4      	; 0x10a8 <EEPROM_writeByte+0x58>
        return ERROR;
    10a4:	1c 82       	std	Y+4, r1	; 0x04
    10a6:	0d c0       	rjmp	.+26     	; 0x10c2 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	0e 94 cd 12 	call	0x259a	; 0x259a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    10ae:	0e 94 0a 13 	call	0x2614	; 0x2614 <TWI_getStatus>
    10b2:	88 32       	cpi	r24, 0x28	; 40
    10b4:	11 f0       	breq	.+4      	; 0x10ba <EEPROM_writeByte+0x6a>
        return ERROR;
    10b6:	1c 82       	std	Y+4, r1	; 0x04
    10b8:	04 c0       	rjmp	.+8      	; 0x10c2 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    10ba:	0e 94 c2 12 	call	0x2584	; 0x2584 <TWI_stop>
	
    return SUCCESS;
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	8c 83       	std	Y+4, r24	; 0x04
    10c2:	8c 81       	ldd	r24, Y+4	; 0x04
}
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	00 d0       	rcall	.+0      	; 0x10d8 <EEPROM_readByte+0x6>
    10d8:	00 d0       	rcall	.+0      	; 0x10da <EEPROM_readByte+0x8>
    10da:	0f 92       	push	r0
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	9a 83       	std	Y+2, r25	; 0x02
    10e2:	89 83       	std	Y+1, r24	; 0x01
    10e4:	7c 83       	std	Y+4, r23	; 0x04
    10e6:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    10e8:	0e 94 b2 12 	call	0x2564	; 0x2564 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    10ec:	0e 94 0a 13 	call	0x2614	; 0x2614 <TWI_getStatus>
    10f0:	88 30       	cpi	r24, 0x08	; 8
    10f2:	11 f0       	breq	.+4      	; 0x10f8 <EEPROM_readByte+0x26>
        return ERROR;
    10f4:	1d 82       	std	Y+5, r1	; 0x05
    10f6:	44 c0       	rjmp	.+136    	; 0x1180 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	9a 81       	ldd	r25, Y+2	; 0x02
    10fc:	80 70       	andi	r24, 0x00	; 0
    10fe:	97 70       	andi	r25, 0x07	; 7
    1100:	88 0f       	add	r24, r24
    1102:	89 2f       	mov	r24, r25
    1104:	88 1f       	adc	r24, r24
    1106:	99 0b       	sbc	r25, r25
    1108:	91 95       	neg	r25
    110a:	80 6a       	ori	r24, 0xA0	; 160
    110c:	0e 94 cd 12 	call	0x259a	; 0x259a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1110:	0e 94 0a 13 	call	0x2614	; 0x2614 <TWI_getStatus>
    1114:	88 31       	cpi	r24, 0x18	; 24
    1116:	11 f0       	breq	.+4      	; 0x111c <EEPROM_readByte+0x4a>
        return ERROR;
    1118:	1d 82       	std	Y+5, r1	; 0x05
    111a:	32 c0       	rjmp	.+100    	; 0x1180 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	0e 94 cd 12 	call	0x259a	; 0x259a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1122:	0e 94 0a 13 	call	0x2614	; 0x2614 <TWI_getStatus>
    1126:	88 32       	cpi	r24, 0x28	; 40
    1128:	11 f0       	breq	.+4      	; 0x112e <EEPROM_readByte+0x5c>
        return ERROR;
    112a:	1d 82       	std	Y+5, r1	; 0x05
    112c:	29 c0       	rjmp	.+82     	; 0x1180 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    112e:	0e 94 b2 12 	call	0x2564	; 0x2564 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1132:	0e 94 0a 13 	call	0x2614	; 0x2614 <TWI_getStatus>
    1136:	80 31       	cpi	r24, 0x10	; 16
    1138:	11 f0       	breq	.+4      	; 0x113e <EEPROM_readByte+0x6c>
        return ERROR;
    113a:	1d 82       	std	Y+5, r1	; 0x05
    113c:	21 c0       	rjmp	.+66     	; 0x1180 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	9a 81       	ldd	r25, Y+2	; 0x02
    1142:	80 70       	andi	r24, 0x00	; 0
    1144:	97 70       	andi	r25, 0x07	; 7
    1146:	88 0f       	add	r24, r24
    1148:	89 2f       	mov	r24, r25
    114a:	88 1f       	adc	r24, r24
    114c:	99 0b       	sbc	r25, r25
    114e:	91 95       	neg	r25
    1150:	81 6a       	ori	r24, 0xA1	; 161
    1152:	0e 94 cd 12 	call	0x259a	; 0x259a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1156:	0e 94 0a 13 	call	0x2614	; 0x2614 <TWI_getStatus>
    115a:	80 34       	cpi	r24, 0x40	; 64
    115c:	11 f0       	breq	.+4      	; 0x1162 <EEPROM_readByte+0x90>
        return ERROR;
    115e:	1d 82       	std	Y+5, r1	; 0x05
    1160:	0f c0       	rjmp	.+30     	; 0x1180 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1162:	0e 94 f7 12 	call	0x25ee	; 0x25ee <TWI_readByteWithNACK>
    1166:	eb 81       	ldd	r30, Y+3	; 0x03
    1168:	fc 81       	ldd	r31, Y+4	; 0x04
    116a:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    116c:	0e 94 0a 13 	call	0x2614	; 0x2614 <TWI_getStatus>
    1170:	88 35       	cpi	r24, 0x58	; 88
    1172:	11 f0       	breq	.+4      	; 0x1178 <EEPROM_readByte+0xa6>
        return ERROR;
    1174:	1d 82       	std	Y+5, r1	; 0x05
    1176:	04 c0       	rjmp	.+8      	; 0x1180 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1178:	0e 94 c2 12 	call	0x2584	; 0x2584 <TWI_stop>

    return SUCCESS;
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	8d 83       	std	Y+5, r24	; 0x05
    1180:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	00 d0       	rcall	.+0      	; 0x1198 <GPIO_setupPinDirection+0x6>
    1198:	00 d0       	rcall	.+0      	; 0x119a <GPIO_setupPinDirection+0x8>
    119a:	0f 92       	push	r0
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	89 83       	std	Y+1, r24	; 0x01
    11a2:	6a 83       	std	Y+2, r22	; 0x02
    11a4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	88 30       	cpi	r24, 0x08	; 8
    11aa:	08 f0       	brcs	.+2      	; 0x11ae <GPIO_setupPinDirection+0x1c>
    11ac:	d5 c0       	rjmp	.+426    	; 0x1358 <GPIO_setupPinDirection+0x1c6>
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	84 30       	cpi	r24, 0x04	; 4
    11b2:	08 f0       	brcs	.+2      	; 0x11b6 <GPIO_setupPinDirection+0x24>
    11b4:	d1 c0       	rjmp	.+418    	; 0x1358 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	3d 83       	std	Y+5, r19	; 0x05
    11be:	2c 83       	std	Y+4, r18	; 0x04
    11c0:	8c 81       	ldd	r24, Y+4	; 0x04
    11c2:	9d 81       	ldd	r25, Y+5	; 0x05
    11c4:	81 30       	cpi	r24, 0x01	; 1
    11c6:	91 05       	cpc	r25, r1
    11c8:	09 f4       	brne	.+2      	; 0x11cc <GPIO_setupPinDirection+0x3a>
    11ca:	43 c0       	rjmp	.+134    	; 0x1252 <GPIO_setupPinDirection+0xc0>
    11cc:	2c 81       	ldd	r18, Y+4	; 0x04
    11ce:	3d 81       	ldd	r19, Y+5	; 0x05
    11d0:	22 30       	cpi	r18, 0x02	; 2
    11d2:	31 05       	cpc	r19, r1
    11d4:	2c f4       	brge	.+10     	; 0x11e0 <GPIO_setupPinDirection+0x4e>
    11d6:	8c 81       	ldd	r24, Y+4	; 0x04
    11d8:	9d 81       	ldd	r25, Y+5	; 0x05
    11da:	00 97       	sbiw	r24, 0x00	; 0
    11dc:	71 f0       	breq	.+28     	; 0x11fa <GPIO_setupPinDirection+0x68>
    11de:	bc c0       	rjmp	.+376    	; 0x1358 <GPIO_setupPinDirection+0x1c6>
    11e0:	2c 81       	ldd	r18, Y+4	; 0x04
    11e2:	3d 81       	ldd	r19, Y+5	; 0x05
    11e4:	22 30       	cpi	r18, 0x02	; 2
    11e6:	31 05       	cpc	r19, r1
    11e8:	09 f4       	brne	.+2      	; 0x11ec <GPIO_setupPinDirection+0x5a>
    11ea:	5f c0       	rjmp	.+190    	; 0x12aa <GPIO_setupPinDirection+0x118>
    11ec:	8c 81       	ldd	r24, Y+4	; 0x04
    11ee:	9d 81       	ldd	r25, Y+5	; 0x05
    11f0:	83 30       	cpi	r24, 0x03	; 3
    11f2:	91 05       	cpc	r25, r1
    11f4:	09 f4       	brne	.+2      	; 0x11f8 <GPIO_setupPinDirection+0x66>
    11f6:	85 c0       	rjmp	.+266    	; 0x1302 <GPIO_setupPinDirection+0x170>
    11f8:	af c0       	rjmp	.+350    	; 0x1358 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	a1 f4       	brne	.+40     	; 0x1228 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1200:	aa e3       	ldi	r26, 0x3A	; 58
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	ea e3       	ldi	r30, 0x3A	; 58
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	48 2f       	mov	r20, r24
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	02 2e       	mov	r0, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <GPIO_setupPinDirection+0x8c>
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	0a 94       	dec	r0
    1220:	e2 f7       	brpl	.-8      	; 0x121a <GPIO_setupPinDirection+0x88>
    1222:	84 2b       	or	r24, r20
    1224:	8c 93       	st	X, r24
    1226:	98 c0       	rjmp	.+304    	; 0x1358 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1228:	aa e3       	ldi	r26, 0x3A	; 58
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	ea e3       	ldi	r30, 0x3A	; 58
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	48 2f       	mov	r20, r24
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 2e       	mov	r0, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <GPIO_setupPinDirection+0xb4>
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	0a 94       	dec	r0
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <GPIO_setupPinDirection+0xb0>
    124a:	80 95       	com	r24
    124c:	84 23       	and	r24, r20
    124e:	8c 93       	st	X, r24
    1250:	83 c0       	rjmp	.+262    	; 0x1358 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	81 30       	cpi	r24, 0x01	; 1
    1256:	a1 f4       	brne	.+40     	; 0x1280 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1258:	a7 e3       	ldi	r26, 0x37	; 55
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e7 e3       	ldi	r30, 0x37	; 55
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	48 2f       	mov	r20, r24
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 2e       	mov	r0, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <GPIO_setupPinDirection+0xe4>
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	0a 94       	dec	r0
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <GPIO_setupPinDirection+0xe0>
    127a:	84 2b       	or	r24, r20
    127c:	8c 93       	st	X, r24
    127e:	6c c0       	rjmp	.+216    	; 0x1358 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1280:	a7 e3       	ldi	r26, 0x37	; 55
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e7 e3       	ldi	r30, 0x37	; 55
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	48 2f       	mov	r20, r24
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	02 2e       	mov	r0, r18
    1298:	02 c0       	rjmp	.+4      	; 0x129e <GPIO_setupPinDirection+0x10c>
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	0a 94       	dec	r0
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <GPIO_setupPinDirection+0x108>
    12a2:	80 95       	com	r24
    12a4:	84 23       	and	r24, r20
    12a6:	8c 93       	st	X, r24
    12a8:	57 c0       	rjmp	.+174    	; 0x1358 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	81 30       	cpi	r24, 0x01	; 1
    12ae:	a1 f4       	brne	.+40     	; 0x12d8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    12b0:	a4 e3       	ldi	r26, 0x34	; 52
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e4 e3       	ldi	r30, 0x34	; 52
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	48 2f       	mov	r20, r24
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 2e       	mov	r0, r18
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <GPIO_setupPinDirection+0x13c>
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	0a 94       	dec	r0
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <GPIO_setupPinDirection+0x138>
    12d2:	84 2b       	or	r24, r20
    12d4:	8c 93       	st	X, r24
    12d6:	40 c0       	rjmp	.+128    	; 0x1358 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    12d8:	a4 e3       	ldi	r26, 0x34	; 52
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e4 e3       	ldi	r30, 0x34	; 52
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	48 2f       	mov	r20, r24
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	02 2e       	mov	r0, r18
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <GPIO_setupPinDirection+0x164>
    12f2:	88 0f       	add	r24, r24
    12f4:	99 1f       	adc	r25, r25
    12f6:	0a 94       	dec	r0
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <GPIO_setupPinDirection+0x160>
    12fa:	80 95       	com	r24
    12fc:	84 23       	and	r24, r20
    12fe:	8c 93       	st	X, r24
    1300:	2b c0       	rjmp	.+86     	; 0x1358 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	81 30       	cpi	r24, 0x01	; 1
    1306:	a1 f4       	brne	.+40     	; 0x1330 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1308:	a1 e3       	ldi	r26, 0x31	; 49
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	e1 e3       	ldi	r30, 0x31	; 49
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	48 2f       	mov	r20, r24
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	02 2e       	mov	r0, r18
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <GPIO_setupPinDirection+0x194>
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	0a 94       	dec	r0
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <GPIO_setupPinDirection+0x190>
    132a:	84 2b       	or	r24, r20
    132c:	8c 93       	st	X, r24
    132e:	14 c0       	rjmp	.+40     	; 0x1358 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1330:	a1 e3       	ldi	r26, 0x31	; 49
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e1 e3       	ldi	r30, 0x31	; 49
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	48 2f       	mov	r20, r24
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	02 2e       	mov	r0, r18
    1348:	02 c0       	rjmp	.+4      	; 0x134e <GPIO_setupPinDirection+0x1bc>
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	0a 94       	dec	r0
    1350:	e2 f7       	brpl	.-8      	; 0x134a <GPIO_setupPinDirection+0x1b8>
    1352:	80 95       	com	r24
    1354:	84 23       	and	r24, r20
    1356:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	cf 91       	pop	r28
    1364:	df 91       	pop	r29
    1366:	08 95       	ret

00001368 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1368:	df 93       	push	r29
    136a:	cf 93       	push	r28
    136c:	00 d0       	rcall	.+0      	; 0x136e <GPIO_writePin+0x6>
    136e:	00 d0       	rcall	.+0      	; 0x1370 <GPIO_writePin+0x8>
    1370:	0f 92       	push	r0
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	89 83       	std	Y+1, r24	; 0x01
    1378:	6a 83       	std	Y+2, r22	; 0x02
    137a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	88 30       	cpi	r24, 0x08	; 8
    1380:	08 f0       	brcs	.+2      	; 0x1384 <GPIO_writePin+0x1c>
    1382:	d5 c0       	rjmp	.+426    	; 0x152e <GPIO_writePin+0x1c6>
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	84 30       	cpi	r24, 0x04	; 4
    1388:	08 f0       	brcs	.+2      	; 0x138c <GPIO_writePin+0x24>
    138a:	d1 c0       	rjmp	.+418    	; 0x152e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	3d 83       	std	Y+5, r19	; 0x05
    1394:	2c 83       	std	Y+4, r18	; 0x04
    1396:	8c 81       	ldd	r24, Y+4	; 0x04
    1398:	9d 81       	ldd	r25, Y+5	; 0x05
    139a:	81 30       	cpi	r24, 0x01	; 1
    139c:	91 05       	cpc	r25, r1
    139e:	09 f4       	brne	.+2      	; 0x13a2 <GPIO_writePin+0x3a>
    13a0:	43 c0       	rjmp	.+134    	; 0x1428 <GPIO_writePin+0xc0>
    13a2:	2c 81       	ldd	r18, Y+4	; 0x04
    13a4:	3d 81       	ldd	r19, Y+5	; 0x05
    13a6:	22 30       	cpi	r18, 0x02	; 2
    13a8:	31 05       	cpc	r19, r1
    13aa:	2c f4       	brge	.+10     	; 0x13b6 <GPIO_writePin+0x4e>
    13ac:	8c 81       	ldd	r24, Y+4	; 0x04
    13ae:	9d 81       	ldd	r25, Y+5	; 0x05
    13b0:	00 97       	sbiw	r24, 0x00	; 0
    13b2:	71 f0       	breq	.+28     	; 0x13d0 <GPIO_writePin+0x68>
    13b4:	bc c0       	rjmp	.+376    	; 0x152e <GPIO_writePin+0x1c6>
    13b6:	2c 81       	ldd	r18, Y+4	; 0x04
    13b8:	3d 81       	ldd	r19, Y+5	; 0x05
    13ba:	22 30       	cpi	r18, 0x02	; 2
    13bc:	31 05       	cpc	r19, r1
    13be:	09 f4       	brne	.+2      	; 0x13c2 <GPIO_writePin+0x5a>
    13c0:	5f c0       	rjmp	.+190    	; 0x1480 <GPIO_writePin+0x118>
    13c2:	8c 81       	ldd	r24, Y+4	; 0x04
    13c4:	9d 81       	ldd	r25, Y+5	; 0x05
    13c6:	83 30       	cpi	r24, 0x03	; 3
    13c8:	91 05       	cpc	r25, r1
    13ca:	09 f4       	brne	.+2      	; 0x13ce <GPIO_writePin+0x66>
    13cc:	85 c0       	rjmp	.+266    	; 0x14d8 <GPIO_writePin+0x170>
    13ce:	af c0       	rjmp	.+350    	; 0x152e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	a1 f4       	brne	.+40     	; 0x13fe <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    13d6:	ab e3       	ldi	r26, 0x3B	; 59
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	eb e3       	ldi	r30, 0x3B	; 59
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	48 2f       	mov	r20, r24
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	02 2e       	mov	r0, r18
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <GPIO_writePin+0x8c>
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	0a 94       	dec	r0
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <GPIO_writePin+0x88>
    13f8:	84 2b       	or	r24, r20
    13fa:	8c 93       	st	X, r24
    13fc:	98 c0       	rjmp	.+304    	; 0x152e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    13fe:	ab e3       	ldi	r26, 0x3B	; 59
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	eb e3       	ldi	r30, 0x3B	; 59
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	48 2f       	mov	r20, r24
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	02 2e       	mov	r0, r18
    1416:	02 c0       	rjmp	.+4      	; 0x141c <GPIO_writePin+0xb4>
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	0a 94       	dec	r0
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <GPIO_writePin+0xb0>
    1420:	80 95       	com	r24
    1422:	84 23       	and	r24, r20
    1424:	8c 93       	st	X, r24
    1426:	83 c0       	rjmp	.+262    	; 0x152e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	81 30       	cpi	r24, 0x01	; 1
    142c:	a1 f4       	brne	.+40     	; 0x1456 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    142e:	a8 e3       	ldi	r26, 0x38	; 56
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e8 e3       	ldi	r30, 0x38	; 56
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	48 2f       	mov	r20, r24
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	02 2e       	mov	r0, r18
    1446:	02 c0       	rjmp	.+4      	; 0x144c <GPIO_writePin+0xe4>
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	0a 94       	dec	r0
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <GPIO_writePin+0xe0>
    1450:	84 2b       	or	r24, r20
    1452:	8c 93       	st	X, r24
    1454:	6c c0       	rjmp	.+216    	; 0x152e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1456:	a8 e3       	ldi	r26, 0x38	; 56
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	e8 e3       	ldi	r30, 0x38	; 56
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	48 2f       	mov	r20, r24
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	02 2e       	mov	r0, r18
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <GPIO_writePin+0x10c>
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	0a 94       	dec	r0
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <GPIO_writePin+0x108>
    1478:	80 95       	com	r24
    147a:	84 23       	and	r24, r20
    147c:	8c 93       	st	X, r24
    147e:	57 c0       	rjmp	.+174    	; 0x152e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	81 30       	cpi	r24, 0x01	; 1
    1484:	a1 f4       	brne	.+40     	; 0x14ae <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1486:	a5 e3       	ldi	r26, 0x35	; 53
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e5 e3       	ldi	r30, 0x35	; 53
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	48 2f       	mov	r20, r24
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	02 2e       	mov	r0, r18
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <GPIO_writePin+0x13c>
    14a0:	88 0f       	add	r24, r24
    14a2:	99 1f       	adc	r25, r25
    14a4:	0a 94       	dec	r0
    14a6:	e2 f7       	brpl	.-8      	; 0x14a0 <GPIO_writePin+0x138>
    14a8:	84 2b       	or	r24, r20
    14aa:	8c 93       	st	X, r24
    14ac:	40 c0       	rjmp	.+128    	; 0x152e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    14ae:	a5 e3       	ldi	r26, 0x35	; 53
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e5 e3       	ldi	r30, 0x35	; 53
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	48 2f       	mov	r20, r24
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	02 2e       	mov	r0, r18
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <GPIO_writePin+0x164>
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	0a 94       	dec	r0
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <GPIO_writePin+0x160>
    14d0:	80 95       	com	r24
    14d2:	84 23       	and	r24, r20
    14d4:	8c 93       	st	X, r24
    14d6:	2b c0       	rjmp	.+86     	; 0x152e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	81 30       	cpi	r24, 0x01	; 1
    14dc:	a1 f4       	brne	.+40     	; 0x1506 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    14de:	a2 e3       	ldi	r26, 0x32	; 50
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e2 e3       	ldi	r30, 0x32	; 50
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	48 2f       	mov	r20, r24
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	02 2e       	mov	r0, r18
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <GPIO_writePin+0x194>
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	0a 94       	dec	r0
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <GPIO_writePin+0x190>
    1500:	84 2b       	or	r24, r20
    1502:	8c 93       	st	X, r24
    1504:	14 c0       	rjmp	.+40     	; 0x152e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1506:	a2 e3       	ldi	r26, 0x32	; 50
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	e2 e3       	ldi	r30, 0x32	; 50
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	48 2f       	mov	r20, r24
    1512:	8a 81       	ldd	r24, Y+2	; 0x02
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	02 2e       	mov	r0, r18
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <GPIO_writePin+0x1bc>
    1520:	88 0f       	add	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	0a 94       	dec	r0
    1526:	e2 f7       	brpl	.-8      	; 0x1520 <GPIO_writePin+0x1b8>
    1528:	80 95       	com	r24
    152a:	84 23       	and	r24, r20
    152c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	08 95       	ret

0000153e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	00 d0       	rcall	.+0      	; 0x1544 <GPIO_readPin+0x6>
    1544:	00 d0       	rcall	.+0      	; 0x1546 <GPIO_readPin+0x8>
    1546:	0f 92       	push	r0
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	8a 83       	std	Y+2, r24	; 0x02
    154e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1550:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	88 30       	cpi	r24, 0x08	; 8
    1556:	08 f0       	brcs	.+2      	; 0x155a <GPIO_readPin+0x1c>
    1558:	84 c0       	rjmp	.+264    	; 0x1662 <GPIO_readPin+0x124>
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	84 30       	cpi	r24, 0x04	; 4
    155e:	08 f0       	brcs	.+2      	; 0x1562 <GPIO_readPin+0x24>
    1560:	80 c0       	rjmp	.+256    	; 0x1662 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	3d 83       	std	Y+5, r19	; 0x05
    156a:	2c 83       	std	Y+4, r18	; 0x04
    156c:	4c 81       	ldd	r20, Y+4	; 0x04
    156e:	5d 81       	ldd	r21, Y+5	; 0x05
    1570:	41 30       	cpi	r20, 0x01	; 1
    1572:	51 05       	cpc	r21, r1
    1574:	79 f1       	breq	.+94     	; 0x15d4 <GPIO_readPin+0x96>
    1576:	8c 81       	ldd	r24, Y+4	; 0x04
    1578:	9d 81       	ldd	r25, Y+5	; 0x05
    157a:	82 30       	cpi	r24, 0x02	; 2
    157c:	91 05       	cpc	r25, r1
    157e:	34 f4       	brge	.+12     	; 0x158c <GPIO_readPin+0x4e>
    1580:	2c 81       	ldd	r18, Y+4	; 0x04
    1582:	3d 81       	ldd	r19, Y+5	; 0x05
    1584:	21 15       	cp	r18, r1
    1586:	31 05       	cpc	r19, r1
    1588:	69 f0       	breq	.+26     	; 0x15a4 <GPIO_readPin+0x66>
    158a:	6b c0       	rjmp	.+214    	; 0x1662 <GPIO_readPin+0x124>
    158c:	4c 81       	ldd	r20, Y+4	; 0x04
    158e:	5d 81       	ldd	r21, Y+5	; 0x05
    1590:	42 30       	cpi	r20, 0x02	; 2
    1592:	51 05       	cpc	r21, r1
    1594:	b9 f1       	breq	.+110    	; 0x1604 <GPIO_readPin+0xc6>
    1596:	8c 81       	ldd	r24, Y+4	; 0x04
    1598:	9d 81       	ldd	r25, Y+5	; 0x05
    159a:	83 30       	cpi	r24, 0x03	; 3
    159c:	91 05       	cpc	r25, r1
    159e:	09 f4       	brne	.+2      	; 0x15a2 <GPIO_readPin+0x64>
    15a0:	49 c0       	rjmp	.+146    	; 0x1634 <GPIO_readPin+0xf6>
    15a2:	5f c0       	rjmp	.+190    	; 0x1662 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    15a4:	e9 e3       	ldi	r30, 0x39	; 57
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	28 2f       	mov	r18, r24
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	88 2f       	mov	r24, r24
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	a9 01       	movw	r20, r18
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <GPIO_readPin+0x7e>
    15b8:	55 95       	asr	r21
    15ba:	47 95       	ror	r20
    15bc:	8a 95       	dec	r24
    15be:	e2 f7       	brpl	.-8      	; 0x15b8 <GPIO_readPin+0x7a>
    15c0:	ca 01       	movw	r24, r20
    15c2:	81 70       	andi	r24, 0x01	; 1
    15c4:	90 70       	andi	r25, 0x00	; 0
    15c6:	88 23       	and	r24, r24
    15c8:	19 f0       	breq	.+6      	; 0x15d0 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	89 83       	std	Y+1, r24	; 0x01
    15ce:	49 c0       	rjmp	.+146    	; 0x1662 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15d0:	19 82       	std	Y+1, r1	; 0x01
    15d2:	47 c0       	rjmp	.+142    	; 0x1662 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    15d4:	e6 e3       	ldi	r30, 0x36	; 54
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	88 2f       	mov	r24, r24
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	a9 01       	movw	r20, r18
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <GPIO_readPin+0xae>
    15e8:	55 95       	asr	r21
    15ea:	47 95       	ror	r20
    15ec:	8a 95       	dec	r24
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <GPIO_readPin+0xaa>
    15f0:	ca 01       	movw	r24, r20
    15f2:	81 70       	andi	r24, 0x01	; 1
    15f4:	90 70       	andi	r25, 0x00	; 0
    15f6:	88 23       	and	r24, r24
    15f8:	19 f0       	breq	.+6      	; 0x1600 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	89 83       	std	Y+1, r24	; 0x01
    15fe:	31 c0       	rjmp	.+98     	; 0x1662 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1600:	19 82       	std	Y+1, r1	; 0x01
    1602:	2f c0       	rjmp	.+94     	; 0x1662 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1604:	e3 e3       	ldi	r30, 0x33	; 51
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	88 2f       	mov	r24, r24
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	a9 01       	movw	r20, r18
    1616:	02 c0       	rjmp	.+4      	; 0x161c <GPIO_readPin+0xde>
    1618:	55 95       	asr	r21
    161a:	47 95       	ror	r20
    161c:	8a 95       	dec	r24
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <GPIO_readPin+0xda>
    1620:	ca 01       	movw	r24, r20
    1622:	81 70       	andi	r24, 0x01	; 1
    1624:	90 70       	andi	r25, 0x00	; 0
    1626:	88 23       	and	r24, r24
    1628:	19 f0       	breq	.+6      	; 0x1630 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	89 83       	std	Y+1, r24	; 0x01
    162e:	19 c0       	rjmp	.+50     	; 0x1662 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1630:	19 82       	std	Y+1, r1	; 0x01
    1632:	17 c0       	rjmp	.+46     	; 0x1662 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1634:	e0 e3       	ldi	r30, 0x30	; 48
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	88 2f       	mov	r24, r24
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	a9 01       	movw	r20, r18
    1646:	02 c0       	rjmp	.+4      	; 0x164c <GPIO_readPin+0x10e>
    1648:	55 95       	asr	r21
    164a:	47 95       	ror	r20
    164c:	8a 95       	dec	r24
    164e:	e2 f7       	brpl	.-8      	; 0x1648 <GPIO_readPin+0x10a>
    1650:	ca 01       	movw	r24, r20
    1652:	81 70       	andi	r24, 0x01	; 1
    1654:	90 70       	andi	r25, 0x00	; 0
    1656:	88 23       	and	r24, r24
    1658:	19 f0       	breq	.+6      	; 0x1660 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	89 83       	std	Y+1, r24	; 0x01
    165e:	01 c0       	rjmp	.+2      	; 0x1662 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1660:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1662:	89 81       	ldd	r24, Y+1	; 0x01
}
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	00 d0       	rcall	.+0      	; 0x167a <GPIO_setupPortDirection+0x6>
    167a:	00 d0       	rcall	.+0      	; 0x167c <GPIO_setupPortDirection+0x8>
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
    1680:	89 83       	std	Y+1, r24	; 0x01
    1682:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	84 30       	cpi	r24, 0x04	; 4
    1688:	90 f5       	brcc	.+100    	; 0x16ee <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	3c 83       	std	Y+4, r19	; 0x04
    1692:	2b 83       	std	Y+3, r18	; 0x03
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	9c 81       	ldd	r25, Y+4	; 0x04
    1698:	81 30       	cpi	r24, 0x01	; 1
    169a:	91 05       	cpc	r25, r1
    169c:	d1 f0       	breq	.+52     	; 0x16d2 <GPIO_setupPortDirection+0x5e>
    169e:	2b 81       	ldd	r18, Y+3	; 0x03
    16a0:	3c 81       	ldd	r19, Y+4	; 0x04
    16a2:	22 30       	cpi	r18, 0x02	; 2
    16a4:	31 05       	cpc	r19, r1
    16a6:	2c f4       	brge	.+10     	; 0x16b2 <GPIO_setupPortDirection+0x3e>
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	9c 81       	ldd	r25, Y+4	; 0x04
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	61 f0       	breq	.+24     	; 0x16c8 <GPIO_setupPortDirection+0x54>
    16b0:	1e c0       	rjmp	.+60     	; 0x16ee <GPIO_setupPortDirection+0x7a>
    16b2:	2b 81       	ldd	r18, Y+3	; 0x03
    16b4:	3c 81       	ldd	r19, Y+4	; 0x04
    16b6:	22 30       	cpi	r18, 0x02	; 2
    16b8:	31 05       	cpc	r19, r1
    16ba:	81 f0       	breq	.+32     	; 0x16dc <GPIO_setupPortDirection+0x68>
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	9c 81       	ldd	r25, Y+4	; 0x04
    16c0:	83 30       	cpi	r24, 0x03	; 3
    16c2:	91 05       	cpc	r25, r1
    16c4:	81 f0       	breq	.+32     	; 0x16e6 <GPIO_setupPortDirection+0x72>
    16c6:	13 c0       	rjmp	.+38     	; 0x16ee <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    16c8:	ea e3       	ldi	r30, 0x3A	; 58
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	80 83       	st	Z, r24
    16d0:	0e c0       	rjmp	.+28     	; 0x16ee <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    16d2:	e7 e3       	ldi	r30, 0x37	; 55
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	80 83       	st	Z, r24
    16da:	09 c0       	rjmp	.+18     	; 0x16ee <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    16dc:	e4 e3       	ldi	r30, 0x34	; 52
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	80 83       	st	Z, r24
    16e4:	04 c0       	rjmp	.+8      	; 0x16ee <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    16e6:	e1 e3       	ldi	r30, 0x31	; 49
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	80 83       	st	Z, r24
			break;
		}
	}
}
    16ee:	0f 90       	pop	r0
    16f0:	0f 90       	pop	r0
    16f2:	0f 90       	pop	r0
    16f4:	0f 90       	pop	r0
    16f6:	cf 91       	pop	r28
    16f8:	df 91       	pop	r29
    16fa:	08 95       	ret

000016fc <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    16fc:	df 93       	push	r29
    16fe:	cf 93       	push	r28
    1700:	00 d0       	rcall	.+0      	; 0x1702 <GPIO_writePort+0x6>
    1702:	00 d0       	rcall	.+0      	; 0x1704 <GPIO_writePort+0x8>
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	89 83       	std	Y+1, r24	; 0x01
    170a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	84 30       	cpi	r24, 0x04	; 4
    1710:	90 f5       	brcc	.+100    	; 0x1776 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	3c 83       	std	Y+4, r19	; 0x04
    171a:	2b 83       	std	Y+3, r18	; 0x03
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	9c 81       	ldd	r25, Y+4	; 0x04
    1720:	81 30       	cpi	r24, 0x01	; 1
    1722:	91 05       	cpc	r25, r1
    1724:	d1 f0       	breq	.+52     	; 0x175a <GPIO_writePort+0x5e>
    1726:	2b 81       	ldd	r18, Y+3	; 0x03
    1728:	3c 81       	ldd	r19, Y+4	; 0x04
    172a:	22 30       	cpi	r18, 0x02	; 2
    172c:	31 05       	cpc	r19, r1
    172e:	2c f4       	brge	.+10     	; 0x173a <GPIO_writePort+0x3e>
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	9c 81       	ldd	r25, Y+4	; 0x04
    1734:	00 97       	sbiw	r24, 0x00	; 0
    1736:	61 f0       	breq	.+24     	; 0x1750 <GPIO_writePort+0x54>
    1738:	1e c0       	rjmp	.+60     	; 0x1776 <GPIO_writePort+0x7a>
    173a:	2b 81       	ldd	r18, Y+3	; 0x03
    173c:	3c 81       	ldd	r19, Y+4	; 0x04
    173e:	22 30       	cpi	r18, 0x02	; 2
    1740:	31 05       	cpc	r19, r1
    1742:	81 f0       	breq	.+32     	; 0x1764 <GPIO_writePort+0x68>
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	9c 81       	ldd	r25, Y+4	; 0x04
    1748:	83 30       	cpi	r24, 0x03	; 3
    174a:	91 05       	cpc	r25, r1
    174c:	81 f0       	breq	.+32     	; 0x176e <GPIO_writePort+0x72>
    174e:	13 c0       	rjmp	.+38     	; 0x1776 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1750:	eb e3       	ldi	r30, 0x3B	; 59
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	80 83       	st	Z, r24
    1758:	0e c0       	rjmp	.+28     	; 0x1776 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    175a:	e8 e3       	ldi	r30, 0x38	; 56
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	80 83       	st	Z, r24
    1762:	09 c0       	rjmp	.+18     	; 0x1776 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1764:	e5 e3       	ldi	r30, 0x35	; 53
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	80 83       	st	Z, r24
    176c:	04 c0       	rjmp	.+8      	; 0x1776 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    176e:	e2 e3       	ldi	r30, 0x32	; 50
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	80 83       	st	Z, r24
			break;
		}
	}
}
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	cf 91       	pop	r28
    1780:	df 91       	pop	r29
    1782:	08 95       	ret

00001784 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1784:	df 93       	push	r29
    1786:	cf 93       	push	r28
    1788:	00 d0       	rcall	.+0      	; 0x178a <GPIO_readPort+0x6>
    178a:	00 d0       	rcall	.+0      	; 0x178c <GPIO_readPort+0x8>
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1792:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	84 30       	cpi	r24, 0x04	; 4
    1798:	90 f5       	brcc	.+100    	; 0x17fe <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	28 2f       	mov	r18, r24
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	3c 83       	std	Y+4, r19	; 0x04
    17a2:	2b 83       	std	Y+3, r18	; 0x03
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	9c 81       	ldd	r25, Y+4	; 0x04
    17a8:	81 30       	cpi	r24, 0x01	; 1
    17aa:	91 05       	cpc	r25, r1
    17ac:	d1 f0       	breq	.+52     	; 0x17e2 <GPIO_readPort+0x5e>
    17ae:	2b 81       	ldd	r18, Y+3	; 0x03
    17b0:	3c 81       	ldd	r19, Y+4	; 0x04
    17b2:	22 30       	cpi	r18, 0x02	; 2
    17b4:	31 05       	cpc	r19, r1
    17b6:	2c f4       	brge	.+10     	; 0x17c2 <GPIO_readPort+0x3e>
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	9c 81       	ldd	r25, Y+4	; 0x04
    17bc:	00 97       	sbiw	r24, 0x00	; 0
    17be:	61 f0       	breq	.+24     	; 0x17d8 <GPIO_readPort+0x54>
    17c0:	1e c0       	rjmp	.+60     	; 0x17fe <GPIO_readPort+0x7a>
    17c2:	2b 81       	ldd	r18, Y+3	; 0x03
    17c4:	3c 81       	ldd	r19, Y+4	; 0x04
    17c6:	22 30       	cpi	r18, 0x02	; 2
    17c8:	31 05       	cpc	r19, r1
    17ca:	81 f0       	breq	.+32     	; 0x17ec <GPIO_readPort+0x68>
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	9c 81       	ldd	r25, Y+4	; 0x04
    17d0:	83 30       	cpi	r24, 0x03	; 3
    17d2:	91 05       	cpc	r25, r1
    17d4:	81 f0       	breq	.+32     	; 0x17f6 <GPIO_readPort+0x72>
    17d6:	13 c0       	rjmp	.+38     	; 0x17fe <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    17d8:	e9 e3       	ldi	r30, 0x39	; 57
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	89 83       	std	Y+1, r24	; 0x01
    17e0:	0e c0       	rjmp	.+28     	; 0x17fe <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    17e2:	e6 e3       	ldi	r30, 0x36	; 54
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	89 83       	std	Y+1, r24	; 0x01
    17ea:	09 c0       	rjmp	.+18     	; 0x17fe <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    17ec:	e3 e3       	ldi	r30, 0x33	; 51
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	89 83       	std	Y+1, r24	; 0x01
    17f4:	04 c0       	rjmp	.+8      	; 0x17fe <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    17f6:	e0 e3       	ldi	r30, 0x30	; 48
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	08 95       	ret

0000180e <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	60 e0       	ldi	r22, 0x00	; 0
    181a:	41 e0       	ldi	r20, 0x01	; 1
    181c:	0e 94 c9 08 	call	0x1192	; 0x1192 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	61 e0       	ldi	r22, 0x01	; 1
    1824:	41 e0       	ldi	r20, 0x01	; 1
    1826:	0e 94 c9 08 	call	0x1192	; 0x1192 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	62 e0       	ldi	r22, 0x02	; 2
    182e:	41 e0       	ldi	r20, 0x01	; 1
    1830:	0e 94 c9 08 	call	0x1192	; 0x1192 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	6f ef       	ldi	r22, 0xFF	; 255
    1838:	0e 94 3a 0b 	call	0x1674	; 0x1674 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    183c:	88 e3       	ldi	r24, 0x38	; 56
    183e:	0e 94 2a 0c 	call	0x1854	; 0x1854 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1842:	8c e0       	ldi	r24, 0x0C	; 12
    1844:	0e 94 2a 0c 	call	0x1854	; 0x1854 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	0e 94 2a 0c 	call	0x1854	; 0x1854 <LCD_sendCommand>
}
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	08 95       	ret

00001854 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
    185c:	e9 97       	sbiw	r28, 0x39	; 57
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	f8 94       	cli
    1862:	de bf       	out	0x3e, r29	; 62
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	cd bf       	out	0x3d, r28	; 61
    1868:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	60 e0       	ldi	r22, 0x00	; 0
    186e:	40 e0       	ldi	r20, 0x00	; 0
    1870:	0e 94 b4 09 	call	0x1368	; 0x1368 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	61 e0       	ldi	r22, 0x01	; 1
    1878:	40 e0       	ldi	r20, 0x00	; 0
    187a:	0e 94 b4 09 	call	0x1368	; 0x1368 <GPIO_writePin>
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	a0 e8       	ldi	r26, 0x80	; 128
    1884:	bf e3       	ldi	r27, 0x3F	; 63
    1886:	8d ab       	std	Y+53, r24	; 0x35
    1888:	9e ab       	std	Y+54, r25	; 0x36
    188a:	af ab       	std	Y+55, r26	; 0x37
    188c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    188e:	6d a9       	ldd	r22, Y+53	; 0x35
    1890:	7e a9       	ldd	r23, Y+54	; 0x36
    1892:	8f a9       	ldd	r24, Y+55	; 0x37
    1894:	98 ad       	ldd	r25, Y+56	; 0x38
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	4a e7       	ldi	r20, 0x7A	; 122
    189c:	53 e4       	ldi	r21, 0x43	; 67
    189e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	89 ab       	std	Y+49, r24	; 0x31
    18a8:	9a ab       	std	Y+50, r25	; 0x32
    18aa:	ab ab       	std	Y+51, r26	; 0x33
    18ac:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18ae:	69 a9       	ldd	r22, Y+49	; 0x31
    18b0:	7a a9       	ldd	r23, Y+50	; 0x32
    18b2:	8b a9       	ldd	r24, Y+51	; 0x33
    18b4:	9c a9       	ldd	r25, Y+52	; 0x34
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	40 e8       	ldi	r20, 0x80	; 128
    18bc:	5f e3       	ldi	r21, 0x3F	; 63
    18be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18c2:	88 23       	and	r24, r24
    18c4:	2c f4       	brge	.+10     	; 0x18d0 <LCD_sendCommand+0x7c>
		__ticks = 1;
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	98 ab       	std	Y+48, r25	; 0x30
    18cc:	8f a7       	std	Y+47, r24	; 0x2f
    18ce:	3f c0       	rjmp	.+126    	; 0x194e <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    18d0:	69 a9       	ldd	r22, Y+49	; 0x31
    18d2:	7a a9       	ldd	r23, Y+50	; 0x32
    18d4:	8b a9       	ldd	r24, Y+51	; 0x33
    18d6:	9c a9       	ldd	r25, Y+52	; 0x34
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	3f ef       	ldi	r19, 0xFF	; 255
    18dc:	4f e7       	ldi	r20, 0x7F	; 127
    18de:	57 e4       	ldi	r21, 0x47	; 71
    18e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18e4:	18 16       	cp	r1, r24
    18e6:	4c f5       	brge	.+82     	; 0x193a <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e8:	6d a9       	ldd	r22, Y+53	; 0x35
    18ea:	7e a9       	ldd	r23, Y+54	; 0x36
    18ec:	8f a9       	ldd	r24, Y+55	; 0x37
    18ee:	98 ad       	ldd	r25, Y+56	; 0x38
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	40 e2       	ldi	r20, 0x20	; 32
    18f6:	51 e4       	ldi	r21, 0x41	; 65
    18f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	bc 01       	movw	r22, r24
    1902:	cd 01       	movw	r24, r26
    1904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	98 ab       	std	Y+48, r25	; 0x30
    190e:	8f a7       	std	Y+47, r24	; 0x2f
    1910:	0f c0       	rjmp	.+30     	; 0x1930 <LCD_sendCommand+0xdc>
    1912:	89 e1       	ldi	r24, 0x19	; 25
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	9e a7       	std	Y+46, r25	; 0x2e
    1918:	8d a7       	std	Y+45, r24	; 0x2d
    191a:	8d a5       	ldd	r24, Y+45	; 0x2d
    191c:	9e a5       	ldd	r25, Y+46	; 0x2e
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	f1 f7       	brne	.-4      	; 0x191e <LCD_sendCommand+0xca>
    1922:	9e a7       	std	Y+46, r25	; 0x2e
    1924:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1926:	8f a5       	ldd	r24, Y+47	; 0x2f
    1928:	98 a9       	ldd	r25, Y+48	; 0x30
    192a:	01 97       	sbiw	r24, 0x01	; 1
    192c:	98 ab       	std	Y+48, r25	; 0x30
    192e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1930:	8f a5       	ldd	r24, Y+47	; 0x2f
    1932:	98 a9       	ldd	r25, Y+48	; 0x30
    1934:	00 97       	sbiw	r24, 0x00	; 0
    1936:	69 f7       	brne	.-38     	; 0x1912 <LCD_sendCommand+0xbe>
    1938:	14 c0       	rjmp	.+40     	; 0x1962 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193a:	69 a9       	ldd	r22, Y+49	; 0x31
    193c:	7a a9       	ldd	r23, Y+50	; 0x32
    193e:	8b a9       	ldd	r24, Y+51	; 0x33
    1940:	9c a9       	ldd	r25, Y+52	; 0x34
    1942:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	98 ab       	std	Y+48, r25	; 0x30
    194c:	8f a7       	std	Y+47, r24	; 0x2f
    194e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1950:	98 a9       	ldd	r25, Y+48	; 0x30
    1952:	9c a7       	std	Y+44, r25	; 0x2c
    1954:	8b a7       	std	Y+43, r24	; 0x2b
    1956:	8b a5       	ldd	r24, Y+43	; 0x2b
    1958:	9c a5       	ldd	r25, Y+44	; 0x2c
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	f1 f7       	brne	.-4      	; 0x195a <LCD_sendCommand+0x106>
    195e:	9c a7       	std	Y+44, r25	; 0x2c
    1960:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	62 e0       	ldi	r22, 0x02	; 2
    1966:	41 e0       	ldi	r20, 0x01	; 1
    1968:	0e 94 b4 09 	call	0x1368	; 0x1368 <GPIO_writePin>
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	a0 e8       	ldi	r26, 0x80	; 128
    1972:	bf e3       	ldi	r27, 0x3F	; 63
    1974:	8f a3       	std	Y+39, r24	; 0x27
    1976:	98 a7       	std	Y+40, r25	; 0x28
    1978:	a9 a7       	std	Y+41, r26	; 0x29
    197a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    197c:	6f a1       	ldd	r22, Y+39	; 0x27
    197e:	78 a5       	ldd	r23, Y+40	; 0x28
    1980:	89 a5       	ldd	r24, Y+41	; 0x29
    1982:	9a a5       	ldd	r25, Y+42	; 0x2a
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	4a e7       	ldi	r20, 0x7A	; 122
    198a:	53 e4       	ldi	r21, 0x43	; 67
    198c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	8b a3       	std	Y+35, r24	; 0x23
    1996:	9c a3       	std	Y+36, r25	; 0x24
    1998:	ad a3       	std	Y+37, r26	; 0x25
    199a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    199c:	6b a1       	ldd	r22, Y+35	; 0x23
    199e:	7c a1       	ldd	r23, Y+36	; 0x24
    19a0:	8d a1       	ldd	r24, Y+37	; 0x25
    19a2:	9e a1       	ldd	r25, Y+38	; 0x26
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	40 e8       	ldi	r20, 0x80	; 128
    19aa:	5f e3       	ldi	r21, 0x3F	; 63
    19ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19b0:	88 23       	and	r24, r24
    19b2:	2c f4       	brge	.+10     	; 0x19be <LCD_sendCommand+0x16a>
		__ticks = 1;
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	9a a3       	std	Y+34, r25	; 0x22
    19ba:	89 a3       	std	Y+33, r24	; 0x21
    19bc:	3f c0       	rjmp	.+126    	; 0x1a3c <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    19be:	6b a1       	ldd	r22, Y+35	; 0x23
    19c0:	7c a1       	ldd	r23, Y+36	; 0x24
    19c2:	8d a1       	ldd	r24, Y+37	; 0x25
    19c4:	9e a1       	ldd	r25, Y+38	; 0x26
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	3f ef       	ldi	r19, 0xFF	; 255
    19ca:	4f e7       	ldi	r20, 0x7F	; 127
    19cc:	57 e4       	ldi	r21, 0x47	; 71
    19ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19d2:	18 16       	cp	r1, r24
    19d4:	4c f5       	brge	.+82     	; 0x1a28 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d6:	6f a1       	ldd	r22, Y+39	; 0x27
    19d8:	78 a5       	ldd	r23, Y+40	; 0x28
    19da:	89 a5       	ldd	r24, Y+41	; 0x29
    19dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	40 e2       	ldi	r20, 0x20	; 32
    19e4:	51 e4       	ldi	r21, 0x41	; 65
    19e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	bc 01       	movw	r22, r24
    19f0:	cd 01       	movw	r24, r26
    19f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	9a a3       	std	Y+34, r25	; 0x22
    19fc:	89 a3       	std	Y+33, r24	; 0x21
    19fe:	0f c0       	rjmp	.+30     	; 0x1a1e <LCD_sendCommand+0x1ca>
    1a00:	89 e1       	ldi	r24, 0x19	; 25
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	98 a3       	std	Y+32, r25	; 0x20
    1a06:	8f 8f       	std	Y+31, r24	; 0x1f
    1a08:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a0a:	98 a1       	ldd	r25, Y+32	; 0x20
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
    1a0e:	f1 f7       	brne	.-4      	; 0x1a0c <LCD_sendCommand+0x1b8>
    1a10:	98 a3       	std	Y+32, r25	; 0x20
    1a12:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a14:	89 a1       	ldd	r24, Y+33	; 0x21
    1a16:	9a a1       	ldd	r25, Y+34	; 0x22
    1a18:	01 97       	sbiw	r24, 0x01	; 1
    1a1a:	9a a3       	std	Y+34, r25	; 0x22
    1a1c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a1e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a20:	9a a1       	ldd	r25, Y+34	; 0x22
    1a22:	00 97       	sbiw	r24, 0x00	; 0
    1a24:	69 f7       	brne	.-38     	; 0x1a00 <LCD_sendCommand+0x1ac>
    1a26:	14 c0       	rjmp	.+40     	; 0x1a50 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a28:	6b a1       	ldd	r22, Y+35	; 0x23
    1a2a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a2c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a2e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	9a a3       	std	Y+34, r25	; 0x22
    1a3a:	89 a3       	std	Y+33, r24	; 0x21
    1a3c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a3e:	9a a1       	ldd	r25, Y+34	; 0x22
    1a40:	9e 8f       	std	Y+30, r25	; 0x1e
    1a42:	8d 8f       	std	Y+29, r24	; 0x1d
    1a44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a46:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	f1 f7       	brne	.-4      	; 0x1a48 <LCD_sendCommand+0x1f4>
    1a4c:	9e 8f       	std	Y+30, r25	; 0x1e
    1a4e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	69 ad       	ldd	r22, Y+57	; 0x39
    1a54:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <GPIO_writePort>
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	a0 e8       	ldi	r26, 0x80	; 128
    1a5e:	bf e3       	ldi	r27, 0x3F	; 63
    1a60:	89 8f       	std	Y+25, r24	; 0x19
    1a62:	9a 8f       	std	Y+26, r25	; 0x1a
    1a64:	ab 8f       	std	Y+27, r26	; 0x1b
    1a66:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a68:	69 8d       	ldd	r22, Y+25	; 0x19
    1a6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	4a e7       	ldi	r20, 0x7A	; 122
    1a76:	53 e4       	ldi	r21, 0x43	; 67
    1a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	8d 8b       	std	Y+21, r24	; 0x15
    1a82:	9e 8b       	std	Y+22, r25	; 0x16
    1a84:	af 8b       	std	Y+23, r26	; 0x17
    1a86:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a88:	6d 89       	ldd	r22, Y+21	; 0x15
    1a8a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a8c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a8e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	40 e8       	ldi	r20, 0x80	; 128
    1a96:	5f e3       	ldi	r21, 0x3F	; 63
    1a98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a9c:	88 23       	and	r24, r24
    1a9e:	2c f4       	brge	.+10     	; 0x1aaa <LCD_sendCommand+0x256>
		__ticks = 1;
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	9c 8b       	std	Y+20, r25	; 0x14
    1aa6:	8b 8b       	std	Y+19, r24	; 0x13
    1aa8:	3f c0       	rjmp	.+126    	; 0x1b28 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1aaa:	6d 89       	ldd	r22, Y+21	; 0x15
    1aac:	7e 89       	ldd	r23, Y+22	; 0x16
    1aae:	8f 89       	ldd	r24, Y+23	; 0x17
    1ab0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	3f ef       	ldi	r19, 0xFF	; 255
    1ab6:	4f e7       	ldi	r20, 0x7F	; 127
    1ab8:	57 e4       	ldi	r21, 0x47	; 71
    1aba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1abe:	18 16       	cp	r1, r24
    1ac0:	4c f5       	brge	.+82     	; 0x1b14 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ac4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ac6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ac8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	40 e2       	ldi	r20, 0x20	; 32
    1ad0:	51 e4       	ldi	r21, 0x41	; 65
    1ad2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	bc 01       	movw	r22, r24
    1adc:	cd 01       	movw	r24, r26
    1ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	9c 8b       	std	Y+20, r25	; 0x14
    1ae8:	8b 8b       	std	Y+19, r24	; 0x13
    1aea:	0f c0       	rjmp	.+30     	; 0x1b0a <LCD_sendCommand+0x2b6>
    1aec:	89 e1       	ldi	r24, 0x19	; 25
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	9a 8b       	std	Y+18, r25	; 0x12
    1af2:	89 8b       	std	Y+17, r24	; 0x11
    1af4:	89 89       	ldd	r24, Y+17	; 0x11
    1af6:	9a 89       	ldd	r25, Y+18	; 0x12
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	f1 f7       	brne	.-4      	; 0x1af8 <LCD_sendCommand+0x2a4>
    1afc:	9a 8b       	std	Y+18, r25	; 0x12
    1afe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b00:	8b 89       	ldd	r24, Y+19	; 0x13
    1b02:	9c 89       	ldd	r25, Y+20	; 0x14
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	9c 8b       	std	Y+20, r25	; 0x14
    1b08:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b0e:	00 97       	sbiw	r24, 0x00	; 0
    1b10:	69 f7       	brne	.-38     	; 0x1aec <LCD_sendCommand+0x298>
    1b12:	14 c0       	rjmp	.+40     	; 0x1b3c <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b14:	6d 89       	ldd	r22, Y+21	; 0x15
    1b16:	7e 89       	ldd	r23, Y+22	; 0x16
    1b18:	8f 89       	ldd	r24, Y+23	; 0x17
    1b1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	9c 8b       	std	Y+20, r25	; 0x14
    1b26:	8b 8b       	std	Y+19, r24	; 0x13
    1b28:	8b 89       	ldd	r24, Y+19	; 0x13
    1b2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b2c:	98 8b       	std	Y+16, r25	; 0x10
    1b2e:	8f 87       	std	Y+15, r24	; 0x0f
    1b30:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b32:	98 89       	ldd	r25, Y+16	; 0x10
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	f1 f7       	brne	.-4      	; 0x1b34 <LCD_sendCommand+0x2e0>
    1b38:	98 8b       	std	Y+16, r25	; 0x10
    1b3a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	62 e0       	ldi	r22, 0x02	; 2
    1b40:	40 e0       	ldi	r20, 0x00	; 0
    1b42:	0e 94 b4 09 	call	0x1368	; 0x1368 <GPIO_writePin>
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	a0 e8       	ldi	r26, 0x80	; 128
    1b4c:	bf e3       	ldi	r27, 0x3F	; 63
    1b4e:	8b 87       	std	Y+11, r24	; 0x0b
    1b50:	9c 87       	std	Y+12, r25	; 0x0c
    1b52:	ad 87       	std	Y+13, r26	; 0x0d
    1b54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	4a e7       	ldi	r20, 0x7A	; 122
    1b64:	53 e4       	ldi	r21, 0x43	; 67
    1b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	8f 83       	std	Y+7, r24	; 0x07
    1b70:	98 87       	std	Y+8, r25	; 0x08
    1b72:	a9 87       	std	Y+9, r26	; 0x09
    1b74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b76:	6f 81       	ldd	r22, Y+7	; 0x07
    1b78:	78 85       	ldd	r23, Y+8	; 0x08
    1b7a:	89 85       	ldd	r24, Y+9	; 0x09
    1b7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	40 e8       	ldi	r20, 0x80	; 128
    1b84:	5f e3       	ldi	r21, 0x3F	; 63
    1b86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b8a:	88 23       	and	r24, r24
    1b8c:	2c f4       	brge	.+10     	; 0x1b98 <LCD_sendCommand+0x344>
		__ticks = 1;
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	9e 83       	std	Y+6, r25	; 0x06
    1b94:	8d 83       	std	Y+5, r24	; 0x05
    1b96:	3f c0       	rjmp	.+126    	; 0x1c16 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1b98:	6f 81       	ldd	r22, Y+7	; 0x07
    1b9a:	78 85       	ldd	r23, Y+8	; 0x08
    1b9c:	89 85       	ldd	r24, Y+9	; 0x09
    1b9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	3f ef       	ldi	r19, 0xFF	; 255
    1ba4:	4f e7       	ldi	r20, 0x7F	; 127
    1ba6:	57 e4       	ldi	r21, 0x47	; 71
    1ba8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bac:	18 16       	cp	r1, r24
    1bae:	4c f5       	brge	.+82     	; 0x1c02 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	40 e2       	ldi	r20, 0x20	; 32
    1bbe:	51 e4       	ldi	r21, 0x41	; 65
    1bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	bc 01       	movw	r22, r24
    1bca:	cd 01       	movw	r24, r26
    1bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	9e 83       	std	Y+6, r25	; 0x06
    1bd6:	8d 83       	std	Y+5, r24	; 0x05
    1bd8:	0f c0       	rjmp	.+30     	; 0x1bf8 <LCD_sendCommand+0x3a4>
    1bda:	89 e1       	ldi	r24, 0x19	; 25
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	9c 83       	std	Y+4, r25	; 0x04
    1be0:	8b 83       	std	Y+3, r24	; 0x03
    1be2:	8b 81       	ldd	r24, Y+3	; 0x03
    1be4:	9c 81       	ldd	r25, Y+4	; 0x04
    1be6:	01 97       	sbiw	r24, 0x01	; 1
    1be8:	f1 f7       	brne	.-4      	; 0x1be6 <LCD_sendCommand+0x392>
    1bea:	9c 83       	std	Y+4, r25	; 0x04
    1bec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bee:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf2:	01 97       	sbiw	r24, 0x01	; 1
    1bf4:	9e 83       	std	Y+6, r25	; 0x06
    1bf6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfc:	00 97       	sbiw	r24, 0x00	; 0
    1bfe:	69 f7       	brne	.-38     	; 0x1bda <LCD_sendCommand+0x386>
    1c00:	14 c0       	rjmp	.+40     	; 0x1c2a <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c02:	6f 81       	ldd	r22, Y+7	; 0x07
    1c04:	78 85       	ldd	r23, Y+8	; 0x08
    1c06:	89 85       	ldd	r24, Y+9	; 0x09
    1c08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	9e 83       	std	Y+6, r25	; 0x06
    1c14:	8d 83       	std	Y+5, r24	; 0x05
    1c16:	8d 81       	ldd	r24, Y+5	; 0x05
    1c18:	9e 81       	ldd	r25, Y+6	; 0x06
    1c1a:	9a 83       	std	Y+2, r25	; 0x02
    1c1c:	89 83       	std	Y+1, r24	; 0x01
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
    1c20:	9a 81       	ldd	r25, Y+2	; 0x02
    1c22:	01 97       	sbiw	r24, 0x01	; 1
    1c24:	f1 f7       	brne	.-4      	; 0x1c22 <LCD_sendCommand+0x3ce>
    1c26:	9a 83       	std	Y+2, r25	; 0x02
    1c28:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1c2a:	e9 96       	adiw	r28, 0x39	; 57
    1c2c:	0f b6       	in	r0, 0x3f	; 63
    1c2e:	f8 94       	cli
    1c30:	de bf       	out	0x3e, r29	; 62
    1c32:	0f be       	out	0x3f, r0	; 63
    1c34:	cd bf       	out	0x3d, r28	; 61
    1c36:	cf 91       	pop	r28
    1c38:	df 91       	pop	r29
    1c3a:	08 95       	ret

00001c3c <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1c3c:	df 93       	push	r29
    1c3e:	cf 93       	push	r28
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
    1c44:	e9 97       	sbiw	r28, 0x39	; 57
    1c46:	0f b6       	in	r0, 0x3f	; 63
    1c48:	f8 94       	cli
    1c4a:	de bf       	out	0x3e, r29	; 62
    1c4c:	0f be       	out	0x3f, r0	; 63
    1c4e:	cd bf       	out	0x3d, r28	; 61
    1c50:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	60 e0       	ldi	r22, 0x00	; 0
    1c56:	41 e0       	ldi	r20, 0x01	; 1
    1c58:	0e 94 b4 09 	call	0x1368	; 0x1368 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	61 e0       	ldi	r22, 0x01	; 1
    1c60:	40 e0       	ldi	r20, 0x00	; 0
    1c62:	0e 94 b4 09 	call	0x1368	; 0x1368 <GPIO_writePin>
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	a0 e8       	ldi	r26, 0x80	; 128
    1c6c:	bf e3       	ldi	r27, 0x3F	; 63
    1c6e:	8d ab       	std	Y+53, r24	; 0x35
    1c70:	9e ab       	std	Y+54, r25	; 0x36
    1c72:	af ab       	std	Y+55, r26	; 0x37
    1c74:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c76:	6d a9       	ldd	r22, Y+53	; 0x35
    1c78:	7e a9       	ldd	r23, Y+54	; 0x36
    1c7a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c7c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	4a e7       	ldi	r20, 0x7A	; 122
    1c84:	53 e4       	ldi	r21, 0x43	; 67
    1c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	89 ab       	std	Y+49, r24	; 0x31
    1c90:	9a ab       	std	Y+50, r25	; 0x32
    1c92:	ab ab       	std	Y+51, r26	; 0x33
    1c94:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c96:	69 a9       	ldd	r22, Y+49	; 0x31
    1c98:	7a a9       	ldd	r23, Y+50	; 0x32
    1c9a:	8b a9       	ldd	r24, Y+51	; 0x33
    1c9c:	9c a9       	ldd	r25, Y+52	; 0x34
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	40 e8       	ldi	r20, 0x80	; 128
    1ca4:	5f e3       	ldi	r21, 0x3F	; 63
    1ca6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1caa:	88 23       	and	r24, r24
    1cac:	2c f4       	brge	.+10     	; 0x1cb8 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	98 ab       	std	Y+48, r25	; 0x30
    1cb4:	8f a7       	std	Y+47, r24	; 0x2f
    1cb6:	3f c0       	rjmp	.+126    	; 0x1d36 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1cb8:	69 a9       	ldd	r22, Y+49	; 0x31
    1cba:	7a a9       	ldd	r23, Y+50	; 0x32
    1cbc:	8b a9       	ldd	r24, Y+51	; 0x33
    1cbe:	9c a9       	ldd	r25, Y+52	; 0x34
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	3f ef       	ldi	r19, 0xFF	; 255
    1cc4:	4f e7       	ldi	r20, 0x7F	; 127
    1cc6:	57 e4       	ldi	r21, 0x47	; 71
    1cc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ccc:	18 16       	cp	r1, r24
    1cce:	4c f5       	brge	.+82     	; 0x1d22 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd0:	6d a9       	ldd	r22, Y+53	; 0x35
    1cd2:	7e a9       	ldd	r23, Y+54	; 0x36
    1cd4:	8f a9       	ldd	r24, Y+55	; 0x37
    1cd6:	98 ad       	ldd	r25, Y+56	; 0x38
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	40 e2       	ldi	r20, 0x20	; 32
    1cde:	51 e4       	ldi	r21, 0x41	; 65
    1ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	bc 01       	movw	r22, r24
    1cea:	cd 01       	movw	r24, r26
    1cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	98 ab       	std	Y+48, r25	; 0x30
    1cf6:	8f a7       	std	Y+47, r24	; 0x2f
    1cf8:	0f c0       	rjmp	.+30     	; 0x1d18 <LCD_displayCharacter+0xdc>
    1cfa:	89 e1       	ldi	r24, 0x19	; 25
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	9e a7       	std	Y+46, r25	; 0x2e
    1d00:	8d a7       	std	Y+45, r24	; 0x2d
    1d02:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d04:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <LCD_displayCharacter+0xca>
    1d0a:	9e a7       	std	Y+46, r25	; 0x2e
    1d0c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d10:	98 a9       	ldd	r25, Y+48	; 0x30
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	98 ab       	std	Y+48, r25	; 0x30
    1d16:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d1c:	00 97       	sbiw	r24, 0x00	; 0
    1d1e:	69 f7       	brne	.-38     	; 0x1cfa <LCD_displayCharacter+0xbe>
    1d20:	14 c0       	rjmp	.+40     	; 0x1d4a <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d22:	69 a9       	ldd	r22, Y+49	; 0x31
    1d24:	7a a9       	ldd	r23, Y+50	; 0x32
    1d26:	8b a9       	ldd	r24, Y+51	; 0x33
    1d28:	9c a9       	ldd	r25, Y+52	; 0x34
    1d2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	98 ab       	std	Y+48, r25	; 0x30
    1d34:	8f a7       	std	Y+47, r24	; 0x2f
    1d36:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d38:	98 a9       	ldd	r25, Y+48	; 0x30
    1d3a:	9c a7       	std	Y+44, r25	; 0x2c
    1d3c:	8b a7       	std	Y+43, r24	; 0x2b
    1d3e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d40:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	f1 f7       	brne	.-4      	; 0x1d42 <LCD_displayCharacter+0x106>
    1d46:	9c a7       	std	Y+44, r25	; 0x2c
    1d48:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	62 e0       	ldi	r22, 0x02	; 2
    1d4e:	41 e0       	ldi	r20, 0x01	; 1
    1d50:	0e 94 b4 09 	call	0x1368	; 0x1368 <GPIO_writePin>
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	a0 e8       	ldi	r26, 0x80	; 128
    1d5a:	bf e3       	ldi	r27, 0x3F	; 63
    1d5c:	8f a3       	std	Y+39, r24	; 0x27
    1d5e:	98 a7       	std	Y+40, r25	; 0x28
    1d60:	a9 a7       	std	Y+41, r26	; 0x29
    1d62:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d64:	6f a1       	ldd	r22, Y+39	; 0x27
    1d66:	78 a5       	ldd	r23, Y+40	; 0x28
    1d68:	89 a5       	ldd	r24, Y+41	; 0x29
    1d6a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	4a e7       	ldi	r20, 0x7A	; 122
    1d72:	53 e4       	ldi	r21, 0x43	; 67
    1d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	8b a3       	std	Y+35, r24	; 0x23
    1d7e:	9c a3       	std	Y+36, r25	; 0x24
    1d80:	ad a3       	std	Y+37, r26	; 0x25
    1d82:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d84:	6b a1       	ldd	r22, Y+35	; 0x23
    1d86:	7c a1       	ldd	r23, Y+36	; 0x24
    1d88:	8d a1       	ldd	r24, Y+37	; 0x25
    1d8a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	40 e8       	ldi	r20, 0x80	; 128
    1d92:	5f e3       	ldi	r21, 0x3F	; 63
    1d94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d98:	88 23       	and	r24, r24
    1d9a:	2c f4       	brge	.+10     	; 0x1da6 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	9a a3       	std	Y+34, r25	; 0x22
    1da2:	89 a3       	std	Y+33, r24	; 0x21
    1da4:	3f c0       	rjmp	.+126    	; 0x1e24 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1da6:	6b a1       	ldd	r22, Y+35	; 0x23
    1da8:	7c a1       	ldd	r23, Y+36	; 0x24
    1daa:	8d a1       	ldd	r24, Y+37	; 0x25
    1dac:	9e a1       	ldd	r25, Y+38	; 0x26
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	3f ef       	ldi	r19, 0xFF	; 255
    1db2:	4f e7       	ldi	r20, 0x7F	; 127
    1db4:	57 e4       	ldi	r21, 0x47	; 71
    1db6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dba:	18 16       	cp	r1, r24
    1dbc:	4c f5       	brge	.+82     	; 0x1e10 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dbe:	6f a1       	ldd	r22, Y+39	; 0x27
    1dc0:	78 a5       	ldd	r23, Y+40	; 0x28
    1dc2:	89 a5       	ldd	r24, Y+41	; 0x29
    1dc4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e2       	ldi	r20, 0x20	; 32
    1dcc:	51 e4       	ldi	r21, 0x41	; 65
    1dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	bc 01       	movw	r22, r24
    1dd8:	cd 01       	movw	r24, r26
    1dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	9a a3       	std	Y+34, r25	; 0x22
    1de4:	89 a3       	std	Y+33, r24	; 0x21
    1de6:	0f c0       	rjmp	.+30     	; 0x1e06 <LCD_displayCharacter+0x1ca>
    1de8:	89 e1       	ldi	r24, 0x19	; 25
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	98 a3       	std	Y+32, r25	; 0x20
    1dee:	8f 8f       	std	Y+31, r24	; 0x1f
    1df0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1df2:	98 a1       	ldd	r25, Y+32	; 0x20
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	f1 f7       	brne	.-4      	; 0x1df4 <LCD_displayCharacter+0x1b8>
    1df8:	98 a3       	std	Y+32, r25	; 0x20
    1dfa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfc:	89 a1       	ldd	r24, Y+33	; 0x21
    1dfe:	9a a1       	ldd	r25, Y+34	; 0x22
    1e00:	01 97       	sbiw	r24, 0x01	; 1
    1e02:	9a a3       	std	Y+34, r25	; 0x22
    1e04:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e06:	89 a1       	ldd	r24, Y+33	; 0x21
    1e08:	9a a1       	ldd	r25, Y+34	; 0x22
    1e0a:	00 97       	sbiw	r24, 0x00	; 0
    1e0c:	69 f7       	brne	.-38     	; 0x1de8 <LCD_displayCharacter+0x1ac>
    1e0e:	14 c0       	rjmp	.+40     	; 0x1e38 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e10:	6b a1       	ldd	r22, Y+35	; 0x23
    1e12:	7c a1       	ldd	r23, Y+36	; 0x24
    1e14:	8d a1       	ldd	r24, Y+37	; 0x25
    1e16:	9e a1       	ldd	r25, Y+38	; 0x26
    1e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	9a a3       	std	Y+34, r25	; 0x22
    1e22:	89 a3       	std	Y+33, r24	; 0x21
    1e24:	89 a1       	ldd	r24, Y+33	; 0x21
    1e26:	9a a1       	ldd	r25, Y+34	; 0x22
    1e28:	9e 8f       	std	Y+30, r25	; 0x1e
    1e2a:	8d 8f       	std	Y+29, r24	; 0x1d
    1e2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e2e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	f1 f7       	brne	.-4      	; 0x1e30 <LCD_displayCharacter+0x1f4>
    1e34:	9e 8f       	std	Y+30, r25	; 0x1e
    1e36:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	69 ad       	ldd	r22, Y+57	; 0x39
    1e3c:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <GPIO_writePort>
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	a0 e8       	ldi	r26, 0x80	; 128
    1e46:	bf e3       	ldi	r27, 0x3F	; 63
    1e48:	89 8f       	std	Y+25, r24	; 0x19
    1e4a:	9a 8f       	std	Y+26, r25	; 0x1a
    1e4c:	ab 8f       	std	Y+27, r26	; 0x1b
    1e4e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e50:	69 8d       	ldd	r22, Y+25	; 0x19
    1e52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	4a e7       	ldi	r20, 0x7A	; 122
    1e5e:	53 e4       	ldi	r21, 0x43	; 67
    1e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	8d 8b       	std	Y+21, r24	; 0x15
    1e6a:	9e 8b       	std	Y+22, r25	; 0x16
    1e6c:	af 8b       	std	Y+23, r26	; 0x17
    1e6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e70:	6d 89       	ldd	r22, Y+21	; 0x15
    1e72:	7e 89       	ldd	r23, Y+22	; 0x16
    1e74:	8f 89       	ldd	r24, Y+23	; 0x17
    1e76:	98 8d       	ldd	r25, Y+24	; 0x18
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	40 e8       	ldi	r20, 0x80	; 128
    1e7e:	5f e3       	ldi	r21, 0x3F	; 63
    1e80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e84:	88 23       	and	r24, r24
    1e86:	2c f4       	brge	.+10     	; 0x1e92 <LCD_displayCharacter+0x256>
		__ticks = 1;
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	9c 8b       	std	Y+20, r25	; 0x14
    1e8e:	8b 8b       	std	Y+19, r24	; 0x13
    1e90:	3f c0       	rjmp	.+126    	; 0x1f10 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    1e92:	6d 89       	ldd	r22, Y+21	; 0x15
    1e94:	7e 89       	ldd	r23, Y+22	; 0x16
    1e96:	8f 89       	ldd	r24, Y+23	; 0x17
    1e98:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	3f ef       	ldi	r19, 0xFF	; 255
    1e9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ea0:	57 e4       	ldi	r21, 0x47	; 71
    1ea2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ea6:	18 16       	cp	r1, r24
    1ea8:	4c f5       	brge	.+82     	; 0x1efc <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eaa:	69 8d       	ldd	r22, Y+25	; 0x19
    1eac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e2       	ldi	r20, 0x20	; 32
    1eb8:	51 e4       	ldi	r21, 0x41	; 65
    1eba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	bc 01       	movw	r22, r24
    1ec4:	cd 01       	movw	r24, r26
    1ec6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	9c 8b       	std	Y+20, r25	; 0x14
    1ed0:	8b 8b       	std	Y+19, r24	; 0x13
    1ed2:	0f c0       	rjmp	.+30     	; 0x1ef2 <LCD_displayCharacter+0x2b6>
    1ed4:	89 e1       	ldi	r24, 0x19	; 25
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	9a 8b       	std	Y+18, r25	; 0x12
    1eda:	89 8b       	std	Y+17, r24	; 0x11
    1edc:	89 89       	ldd	r24, Y+17	; 0x11
    1ede:	9a 89       	ldd	r25, Y+18	; 0x12
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	f1 f7       	brne	.-4      	; 0x1ee0 <LCD_displayCharacter+0x2a4>
    1ee4:	9a 8b       	std	Y+18, r25	; 0x12
    1ee6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee8:	8b 89       	ldd	r24, Y+19	; 0x13
    1eea:	9c 89       	ldd	r25, Y+20	; 0x14
    1eec:	01 97       	sbiw	r24, 0x01	; 1
    1eee:	9c 8b       	std	Y+20, r25	; 0x14
    1ef0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef6:	00 97       	sbiw	r24, 0x00	; 0
    1ef8:	69 f7       	brne	.-38     	; 0x1ed4 <LCD_displayCharacter+0x298>
    1efa:	14 c0       	rjmp	.+40     	; 0x1f24 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1efc:	6d 89       	ldd	r22, Y+21	; 0x15
    1efe:	7e 89       	ldd	r23, Y+22	; 0x16
    1f00:	8f 89       	ldd	r24, Y+23	; 0x17
    1f02:	98 8d       	ldd	r25, Y+24	; 0x18
    1f04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	9c 8b       	std	Y+20, r25	; 0x14
    1f0e:	8b 8b       	std	Y+19, r24	; 0x13
    1f10:	8b 89       	ldd	r24, Y+19	; 0x13
    1f12:	9c 89       	ldd	r25, Y+20	; 0x14
    1f14:	98 8b       	std	Y+16, r25	; 0x10
    1f16:	8f 87       	std	Y+15, r24	; 0x0f
    1f18:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f1a:	98 89       	ldd	r25, Y+16	; 0x10
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	f1 f7       	brne	.-4      	; 0x1f1c <LCD_displayCharacter+0x2e0>
    1f20:	98 8b       	std	Y+16, r25	; 0x10
    1f22:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	62 e0       	ldi	r22, 0x02	; 2
    1f28:	40 e0       	ldi	r20, 0x00	; 0
    1f2a:	0e 94 b4 09 	call	0x1368	; 0x1368 <GPIO_writePin>
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	a0 e8       	ldi	r26, 0x80	; 128
    1f34:	bf e3       	ldi	r27, 0x3F	; 63
    1f36:	8b 87       	std	Y+11, r24	; 0x0b
    1f38:	9c 87       	std	Y+12, r25	; 0x0c
    1f3a:	ad 87       	std	Y+13, r26	; 0x0d
    1f3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f40:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f42:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f44:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	4a e7       	ldi	r20, 0x7A	; 122
    1f4c:	53 e4       	ldi	r21, 0x43	; 67
    1f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	8f 83       	std	Y+7, r24	; 0x07
    1f58:	98 87       	std	Y+8, r25	; 0x08
    1f5a:	a9 87       	std	Y+9, r26	; 0x09
    1f5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f60:	78 85       	ldd	r23, Y+8	; 0x08
    1f62:	89 85       	ldd	r24, Y+9	; 0x09
    1f64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	40 e8       	ldi	r20, 0x80	; 128
    1f6c:	5f e3       	ldi	r21, 0x3F	; 63
    1f6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f72:	88 23       	and	r24, r24
    1f74:	2c f4       	brge	.+10     	; 0x1f80 <LCD_displayCharacter+0x344>
		__ticks = 1;
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	9e 83       	std	Y+6, r25	; 0x06
    1f7c:	8d 83       	std	Y+5, r24	; 0x05
    1f7e:	3f c0       	rjmp	.+126    	; 0x1ffe <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    1f80:	6f 81       	ldd	r22, Y+7	; 0x07
    1f82:	78 85       	ldd	r23, Y+8	; 0x08
    1f84:	89 85       	ldd	r24, Y+9	; 0x09
    1f86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	3f ef       	ldi	r19, 0xFF	; 255
    1f8c:	4f e7       	ldi	r20, 0x7F	; 127
    1f8e:	57 e4       	ldi	r21, 0x47	; 71
    1f90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f94:	18 16       	cp	r1, r24
    1f96:	4c f5       	brge	.+82     	; 0x1fea <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f98:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 e2       	ldi	r20, 0x20	; 32
    1fa6:	51 e4       	ldi	r21, 0x41	; 65
    1fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	bc 01       	movw	r22, r24
    1fb2:	cd 01       	movw	r24, r26
    1fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	9e 83       	std	Y+6, r25	; 0x06
    1fbe:	8d 83       	std	Y+5, r24	; 0x05
    1fc0:	0f c0       	rjmp	.+30     	; 0x1fe0 <LCD_displayCharacter+0x3a4>
    1fc2:	89 e1       	ldi	r24, 0x19	; 25
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	9c 83       	std	Y+4, r25	; 0x04
    1fc8:	8b 83       	std	Y+3, r24	; 0x03
    1fca:	8b 81       	ldd	r24, Y+3	; 0x03
    1fcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	f1 f7       	brne	.-4      	; 0x1fce <LCD_displayCharacter+0x392>
    1fd2:	9c 83       	std	Y+4, r25	; 0x04
    1fd4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	9e 83       	std	Y+6, r25	; 0x06
    1fde:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	69 f7       	brne	.-38     	; 0x1fc2 <LCD_displayCharacter+0x386>
    1fe8:	14 c0       	rjmp	.+40     	; 0x2012 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fea:	6f 81       	ldd	r22, Y+7	; 0x07
    1fec:	78 85       	ldd	r23, Y+8	; 0x08
    1fee:	89 85       	ldd	r24, Y+9	; 0x09
    1ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	9e 83       	std	Y+6, r25	; 0x06
    1ffc:	8d 83       	std	Y+5, r24	; 0x05
    1ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    2000:	9e 81       	ldd	r25, Y+6	; 0x06
    2002:	9a 83       	std	Y+2, r25	; 0x02
    2004:	89 83       	std	Y+1, r24	; 0x01
    2006:	89 81       	ldd	r24, Y+1	; 0x01
    2008:	9a 81       	ldd	r25, Y+2	; 0x02
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	f1 f7       	brne	.-4      	; 0x200a <LCD_displayCharacter+0x3ce>
    200e:	9a 83       	std	Y+2, r25	; 0x02
    2010:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2012:	e9 96       	adiw	r28, 0x39	; 57
    2014:	0f b6       	in	r0, 0x3f	; 63
    2016:	f8 94       	cli
    2018:	de bf       	out	0x3e, r29	; 62
    201a:	0f be       	out	0x3f, r0	; 63
    201c:	cd bf       	out	0x3d, r28	; 61
    201e:	cf 91       	pop	r28
    2020:	df 91       	pop	r29
    2022:	08 95       	ret

00002024 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2024:	df 93       	push	r29
    2026:	cf 93       	push	r28
    2028:	00 d0       	rcall	.+0      	; 0x202a <LCD_displayString+0x6>
    202a:	0f 92       	push	r0
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
    2030:	9b 83       	std	Y+3, r25	; 0x03
    2032:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2034:	19 82       	std	Y+1, r1	; 0x01
    2036:	0e c0       	rjmp	.+28     	; 0x2054 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	28 2f       	mov	r18, r24
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	8a 81       	ldd	r24, Y+2	; 0x02
    2040:	9b 81       	ldd	r25, Y+3	; 0x03
    2042:	fc 01       	movw	r30, r24
    2044:	e2 0f       	add	r30, r18
    2046:	f3 1f       	adc	r31, r19
    2048:	80 81       	ld	r24, Z
    204a:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <LCD_displayCharacter>
		i++;
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	8f 5f       	subi	r24, 0xFF	; 255
    2052:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	28 2f       	mov	r18, r24
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	9b 81       	ldd	r25, Y+3	; 0x03
    205e:	fc 01       	movw	r30, r24
    2060:	e2 0f       	add	r30, r18
    2062:	f3 1f       	adc	r31, r19
    2064:	80 81       	ld	r24, Z
    2066:	88 23       	and	r24, r24
    2068:	39 f7       	brne	.-50     	; 0x2038 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	cf 91       	pop	r28
    2072:	df 91       	pop	r29
    2074:	08 95       	ret

00002076 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2076:	df 93       	push	r29
    2078:	cf 93       	push	r28
    207a:	00 d0       	rcall	.+0      	; 0x207c <LCD_moveCursor+0x6>
    207c:	00 d0       	rcall	.+0      	; 0x207e <LCD_moveCursor+0x8>
    207e:	0f 92       	push	r0
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
    2084:	8a 83       	std	Y+2, r24	; 0x02
    2086:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2088:	8a 81       	ldd	r24, Y+2	; 0x02
    208a:	28 2f       	mov	r18, r24
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	3d 83       	std	Y+5, r19	; 0x05
    2090:	2c 83       	std	Y+4, r18	; 0x04
    2092:	8c 81       	ldd	r24, Y+4	; 0x04
    2094:	9d 81       	ldd	r25, Y+5	; 0x05
    2096:	81 30       	cpi	r24, 0x01	; 1
    2098:	91 05       	cpc	r25, r1
    209a:	c1 f0       	breq	.+48     	; 0x20cc <LCD_moveCursor+0x56>
    209c:	2c 81       	ldd	r18, Y+4	; 0x04
    209e:	3d 81       	ldd	r19, Y+5	; 0x05
    20a0:	22 30       	cpi	r18, 0x02	; 2
    20a2:	31 05       	cpc	r19, r1
    20a4:	2c f4       	brge	.+10     	; 0x20b0 <LCD_moveCursor+0x3a>
    20a6:	8c 81       	ldd	r24, Y+4	; 0x04
    20a8:	9d 81       	ldd	r25, Y+5	; 0x05
    20aa:	00 97       	sbiw	r24, 0x00	; 0
    20ac:	61 f0       	breq	.+24     	; 0x20c6 <LCD_moveCursor+0x50>
    20ae:	19 c0       	rjmp	.+50     	; 0x20e2 <LCD_moveCursor+0x6c>
    20b0:	2c 81       	ldd	r18, Y+4	; 0x04
    20b2:	3d 81       	ldd	r19, Y+5	; 0x05
    20b4:	22 30       	cpi	r18, 0x02	; 2
    20b6:	31 05       	cpc	r19, r1
    20b8:	69 f0       	breq	.+26     	; 0x20d4 <LCD_moveCursor+0x5e>
    20ba:	8c 81       	ldd	r24, Y+4	; 0x04
    20bc:	9d 81       	ldd	r25, Y+5	; 0x05
    20be:	83 30       	cpi	r24, 0x03	; 3
    20c0:	91 05       	cpc	r25, r1
    20c2:	61 f0       	breq	.+24     	; 0x20dc <LCD_moveCursor+0x66>
    20c4:	0e c0       	rjmp	.+28     	; 0x20e2 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    20c6:	8b 81       	ldd	r24, Y+3	; 0x03
    20c8:	89 83       	std	Y+1, r24	; 0x01
    20ca:	0b c0       	rjmp	.+22     	; 0x20e2 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	80 5c       	subi	r24, 0xC0	; 192
    20d0:	89 83       	std	Y+1, r24	; 0x01
    20d2:	07 c0       	rjmp	.+14     	; 0x20e2 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    20d4:	8b 81       	ldd	r24, Y+3	; 0x03
    20d6:	80 5f       	subi	r24, 0xF0	; 240
    20d8:	89 83       	std	Y+1, r24	; 0x01
    20da:	03 c0       	rjmp	.+6      	; 0x20e2 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	80 5b       	subi	r24, 0xB0	; 176
    20e0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	80 68       	ori	r24, 0x80	; 128
    20e6:	0e 94 2a 0c 	call	0x1854	; 0x1854 <LCD_sendCommand>
}
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	08 95       	ret

000020fa <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    20fa:	df 93       	push	r29
    20fc:	cf 93       	push	r28
    20fe:	00 d0       	rcall	.+0      	; 0x2100 <LCD_displayStringRowColumn+0x6>
    2100:	00 d0       	rcall	.+0      	; 0x2102 <LCD_displayStringRowColumn+0x8>
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
    2106:	89 83       	std	Y+1, r24	; 0x01
    2108:	6a 83       	std	Y+2, r22	; 0x02
    210a:	5c 83       	std	Y+4, r21	; 0x04
    210c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	6a 81       	ldd	r22, Y+2	; 0x02
    2112:	0e 94 3b 10 	call	0x2076	; 0x2076 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	9c 81       	ldd	r25, Y+4	; 0x04
    211a:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_displayString>
}
    211e:	0f 90       	pop	r0
    2120:	0f 90       	pop	r0
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	cf 91       	pop	r28
    2128:	df 91       	pop	r29
    212a:	08 95       	ret

0000212c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    212c:	df 93       	push	r29
    212e:	cf 93       	push	r28
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
    2134:	62 97       	sbiw	r28, 0x12	; 18
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	de bf       	out	0x3e, r29	; 62
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	cd bf       	out	0x3d, r28	; 61
    2140:	9a 8b       	std	Y+18, r25	; 0x12
    2142:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2144:	89 89       	ldd	r24, Y+17	; 0x11
    2146:	9a 89       	ldd	r25, Y+18	; 0x12
    2148:	9e 01       	movw	r18, r28
    214a:	2f 5f       	subi	r18, 0xFF	; 255
    214c:	3f 4f       	sbci	r19, 0xFF	; 255
    214e:	b9 01       	movw	r22, r18
    2150:	4a e0       	ldi	r20, 0x0A	; 10
    2152:	50 e0       	ldi	r21, 0x00	; 0
    2154:	0e 94 90 14 	call	0x2920	; 0x2920 <itoa>
   LCD_displayString(buff); /* Display the string */
    2158:	ce 01       	movw	r24, r28
    215a:	01 96       	adiw	r24, 0x01	; 1
    215c:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_displayString>
}
    2160:	62 96       	adiw	r28, 0x12	; 18
    2162:	0f b6       	in	r0, 0x3f	; 63
    2164:	f8 94       	cli
    2166:	de bf       	out	0x3e, r29	; 62
    2168:	0f be       	out	0x3f, r0	; 63
    216a:	cd bf       	out	0x3d, r28	; 61
    216c:	cf 91       	pop	r28
    216e:	df 91       	pop	r29
    2170:	08 95       	ret

00002172 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2172:	df 93       	push	r29
    2174:	cf 93       	push	r28
    2176:	cd b7       	in	r28, 0x3d	; 61
    2178:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	0e 94 2a 0c 	call	0x1854	; 0x1854 <LCD_sendCommand>
}
    2180:	cf 91       	pop	r28
    2182:	df 91       	pop	r29
    2184:	08 95       	ret

00002186 <main>:
#include "timer.h"
#include "motor.h"
#include <util/delay.h>
#include "buzzer.h"
int main(void)
{
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
    218e:	a6 97       	sbiw	r28, 0x26	; 38
    2190:	0f b6       	in	r0, 0x3f	; 63
    2192:	f8 94       	cli
    2194:	de bf       	out	0x3e, r29	; 62
    2196:	0f be       	out	0x3f, r0	; 63
    2198:	cd bf       	out	0x3d, r28	; 61
	uint8 second_repeated_password[5];
	uint8 password_in_eeprom[5];
	uint8 main_options_password[5];
	uint8 result_for_new_password;
	uint8 result_for_saved_password;
	uint8 counter = 0 ;
    219a:	1a 82       	std	Y+2, r1	; 0x02
	uint8 state;
	/*configurations for timer, uart and i2c*/
	Uart_ConfigType config_type = {9600,MODE_8_BIT,DISABLED,STOP_BIT_1};
    219c:	ce 01       	movw	r24, r28
    219e:	49 96       	adiw	r24, 0x19	; 25
    21a0:	9b a3       	std	Y+35, r25	; 0x23
    21a2:	8a a3       	std	Y+34, r24	; 0x22
    21a4:	ec e6       	ldi	r30, 0x6C	; 108
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	fd a3       	std	Y+37, r31	; 0x25
    21aa:	ec a3       	std	Y+36, r30	; 0x24
    21ac:	f7 e0       	ldi	r31, 0x07	; 7
    21ae:	fe a3       	std	Y+38, r31	; 0x26
    21b0:	ec a1       	ldd	r30, Y+36	; 0x24
    21b2:	fd a1       	ldd	r31, Y+37	; 0x25
    21b4:	00 80       	ld	r0, Z
    21b6:	8c a1       	ldd	r24, Y+36	; 0x24
    21b8:	9d a1       	ldd	r25, Y+37	; 0x25
    21ba:	01 96       	adiw	r24, 0x01	; 1
    21bc:	9d a3       	std	Y+37, r25	; 0x25
    21be:	8c a3       	std	Y+36, r24	; 0x24
    21c0:	ea a1       	ldd	r30, Y+34	; 0x22
    21c2:	fb a1       	ldd	r31, Y+35	; 0x23
    21c4:	00 82       	st	Z, r0
    21c6:	8a a1       	ldd	r24, Y+34	; 0x22
    21c8:	9b a1       	ldd	r25, Y+35	; 0x23
    21ca:	01 96       	adiw	r24, 0x01	; 1
    21cc:	9b a3       	std	Y+35, r25	; 0x23
    21ce:	8a a3       	std	Y+34, r24	; 0x22
    21d0:	9e a1       	ldd	r25, Y+38	; 0x26
    21d2:	91 50       	subi	r25, 0x01	; 1
    21d4:	9e a3       	std	Y+38, r25	; 0x26
    21d6:	ee a1       	ldd	r30, Y+38	; 0x26
    21d8:	ee 23       	and	r30, r30
    21da:	51 f7       	brne	.-44     	; 0x21b0 <main+0x2a>
	TWI_ConfigType config = {FAST_MODE,0b00000100};
    21dc:	82 e0       	ldi	r24, 0x02	; 2
    21de:	88 a3       	std	Y+32, r24	; 0x20
    21e0:	84 e0       	ldi	r24, 0x04	; 4
    21e2:	89 a3       	std	Y+33, r24	; 0x21

	/*initialization for motor,uart,buzzer and i2c*/
	DcMotor_Init();
    21e4:	0e 94 66 11 	call	0x22cc	; 0x22cc <DcMotor_Init>
	UART_init(&config_type);
    21e8:	ce 01       	movw	r24, r28
    21ea:	49 96       	adiw	r24, 0x19	; 25
    21ec:	0e 94 19 13 	call	0x2632	; 0x2632 <UART_init>
	TWI_init(&config);
    21f0:	ce 01       	movw	r24, r28
    21f2:	80 96       	adiw	r24, 0x20	; 32
    21f4:	0e 94 93 12 	call	0x2526	; 0x2526 <TWI_init>
	Buzzer_Init();
    21f8:	0e 94 ff 07 	call	0xffe	; 0xffe <Buzzer_Init>
		 * 2. if the passwords are NOT matched  the control ECU will tell HMI ECU so that the HMI ECU takes
		 *  input again from user
		 *  */
		while(1)
		{
			receivePassword(first_entered_password);
    21fc:	ce 01       	movw	r24, r28
    21fe:	05 96       	adiw	r24, 0x05	; 5
    2200:	0e 94 a3 05 	call	0xb46	; 0xb46 <receivePassword>
			receivePassword(second_repeated_password);
    2204:	ce 01       	movw	r24, r28
    2206:	0a 96       	adiw	r24, 0x0a	; 10
    2208:	0e 94 a3 05 	call	0xb46	; 0xb46 <receivePassword>
			result_for_new_password = checkPassword(first_entered_password,second_repeated_password);
    220c:	ce 01       	movw	r24, r28
    220e:	05 96       	adiw	r24, 0x05	; 5
    2210:	9e 01       	movw	r18, r28
    2212:	26 5f       	subi	r18, 0xF6	; 246
    2214:	3f 4f       	sbci	r19, 0xFF	; 255
    2216:	b9 01       	movw	r22, r18
    2218:	0e 94 16 07 	call	0xe2c	; 0xe2c <checkPassword>
    221c:	8c 83       	std	Y+4, r24	; 0x04
			if (result_for_new_password == PASSWORDS_ARE_MATCHED)
    221e:	8c 81       	ldd	r24, Y+4	; 0x04
    2220:	88 23       	and	r24, r24
    2222:	a1 f4       	brne	.+40     	; 0x224c <main+0xc6>
			{
				 UART_sendByte(PASSWORDS_ARE_MATCHED);
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	0e 94 a5 13 	call	0x274a	; 0x274a <UART_sendByte>
				 storePassword(0x0311 ,first_entered_password);
    222a:	9e 01       	movw	r18, r28
    222c:	2b 5f       	subi	r18, 0xFB	; 251
    222e:	3f 4f       	sbci	r19, 0xFF	; 255
    2230:	81 e1       	ldi	r24, 0x11	; 17
    2232:	93 e0       	ldi	r25, 0x03	; 3
    2234:	b9 01       	movw	r22, r18
    2236:	0e 94 c7 05 	call	0xb8e	; 0xb8e <storePassword>
				 getPasswordFromEeprom(0x0311 , password_in_eeprom);
    223a:	9e 01       	movw	r18, r28
    223c:	21 5f       	subi	r18, 0xF1	; 241
    223e:	3f 4f       	sbci	r19, 0xFF	; 255
    2240:	81 e1       	ldi	r24, 0x11	; 17
    2242:	93 e0       	ldi	r25, 0x03	; 3
    2244:	b9 01       	movw	r22, r18
    2246:	0e 94 6d 06 	call	0xcda	; 0xcda <getPasswordFromEeprom>
    224a:	07 c0       	rjmp	.+14     	; 0x225a <main+0xd4>
				 break;
			}
			else if (result_for_new_password == PASSWORDS_ARE_NOT_MATCHED)
    224c:	8c 81       	ldd	r24, Y+4	; 0x04
    224e:	81 30       	cpi	r24, 0x01	; 1
    2250:	a9 f6       	brne	.-86     	; 0x21fc <main+0x76>
			{
				UART_sendByte(PASSWORDS_ARE_NOT_MATCHED);
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	0e 94 a5 13 	call	0x274a	; 0x274a <UART_sendByte>
    2258:	d1 cf       	rjmp	.-94     	; 0x21fc <main+0x76>
		 * three times a buzzer alarm will be initiated.
		 */
		while(1)
		{

			receivePassword(main_options_password);
    225a:	ce 01       	movw	r24, r28
    225c:	44 96       	adiw	r24, 0x14	; 20
    225e:	0e 94 a3 05 	call	0xb46	; 0xb46 <receivePassword>
			result_for_saved_password = checkPassword(main_options_password,password_in_eeprom);
    2262:	ce 01       	movw	r24, r28
    2264:	44 96       	adiw	r24, 0x14	; 20
    2266:	9e 01       	movw	r18, r28
    2268:	21 5f       	subi	r18, 0xF1	; 241
    226a:	3f 4f       	sbci	r19, 0xFF	; 255
    226c:	b9 01       	movw	r22, r18
    226e:	0e 94 16 07 	call	0xe2c	; 0xe2c <checkPassword>
    2272:	8b 83       	std	Y+3, r24	; 0x03
			if (result_for_saved_password == PASSWORDS_ARE_MATCHED)
    2274:	8b 81       	ldd	r24, Y+3	; 0x03
    2276:	88 23       	and	r24, r24
    2278:	a9 f4       	brne	.+42     	; 0x22a4 <main+0x11e>
			{
				UART_sendByte(PASSWORDS_ARE_MATCHED);
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	0e 94 a5 13 	call	0x274a	; 0x274a <UART_sendByte>
				state = UART_recieveByte();
    2280:	0e 94 bc 13 	call	0x2778	; 0x2778 <UART_recieveByte>
    2284:	89 83       	std	Y+1, r24	; 0x01
				if (state == '+')
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	8b 32       	cpi	r24, 0x2B	; 43
    228a:	39 f4       	brne	.+14     	; 0x229a <main+0x114>
				{
				/*door opening*/
				while(UART_recieveByte() != DOOR_UNLOCKING){};
    228c:	0e 94 bc 13 	call	0x2778	; 0x2778 <UART_recieveByte>
    2290:	80 33       	cpi	r24, 0x30	; 48
    2292:	e1 f7       	brne	.-8      	; 0x228c <main+0x106>
				doorControl();
    2294:	0e 94 b0 07 	call	0xf60	; 0xf60 <doorControl>
    2298:	e0 cf       	rjmp	.-64     	; 0x225a <main+0xd4>
				}
				else if(state == '-')
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	8d 32       	cpi	r24, 0x2D	; 45
    229e:	09 f4       	brne	.+2      	; 0x22a2 <main+0x11c>
    22a0:	ad cf       	rjmp	.-166    	; 0x21fc <main+0x76>
    22a2:	db cf       	rjmp	.-74     	; 0x225a <main+0xd4>
				{
					break;
				}
			}
			else if (result_for_saved_password == PASSWORDS_ARE_NOT_MATCHED)
    22a4:	8b 81       	ldd	r24, Y+3	; 0x03
    22a6:	81 30       	cpi	r24, 0x01	; 1
    22a8:	c1 f6       	brne	.-80     	; 0x225a <main+0xd4>
			{
				UART_sendByte(PASSWORDS_ARE_NOT_MATCHED);
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	0e 94 a5 13 	call	0x274a	; 0x274a <UART_sendByte>
				counter++;
    22b0:	8a 81       	ldd	r24, Y+2	; 0x02
    22b2:	8f 5f       	subi	r24, 0xFF	; 255
    22b4:	8a 83       	std	Y+2, r24	; 0x02
				if (counter == 3)
    22b6:	8a 81       	ldd	r24, Y+2	; 0x02
    22b8:	83 30       	cpi	r24, 0x03	; 3
    22ba:	79 f6       	brne	.-98     	; 0x225a <main+0xd4>
				{
					/*buzzer alaaaaaaarm*/
					while(UART_recieveByte() != BURGULAR){};
    22bc:	0e 94 bc 13 	call	0x2778	; 0x2778 <UART_recieveByte>
    22c0:	80 34       	cpi	r24, 0x40	; 64
    22c2:	e1 f7       	brne	.-8      	; 0x22bc <main+0x136>
					buzzerForBurgulars();
    22c4:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <buzzerForBurgulars>
					counter = 0;
    22c8:	1a 82       	std	Y+2, r1	; 0x02
    22ca:	c7 cf       	rjmp	.-114    	; 0x225a <main+0xd4>

000022cc <DcMotor_Init>:
 */

#include "motor.h"
#include "gpio.h"
void DcMotor_Init(void)
{
    22cc:	df 93       	push	r29
    22ce:	cf 93       	push	r28
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction Motor pins as output pins */
	GPIO_setupPinDirection(MOTOR_PINS_PORT_ID, IN1 , PIN_OUTPUT);
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	63 e0       	ldi	r22, 0x03	; 3
    22d8:	41 e0       	ldi	r20, 0x01	; 1
    22da:	0e 94 c9 08 	call	0x1192	; 0x1192 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PINS_PORT_ID, IN2 , PIN_OUTPUT);
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	64 e0       	ldi	r22, 0x04	; 4
    22e2:	41 e0       	ldi	r20, 0x01	; 1
    22e4:	0e 94 c9 08 	call	0x1192	; 0x1192 <GPIO_setupPinDirection>
	/* Stop at the DC-Motor at the beginning through the GPIO driver*/
	GPIO_writePin(MOTOR_PINS_PORT_ID, IN1, LOGIC_LOW);
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	63 e0       	ldi	r22, 0x03	; 3
    22ec:	40 e0       	ldi	r20, 0x00	; 0
    22ee:	0e 94 b4 09 	call	0x1368	; 0x1368 <GPIO_writePin>
	GPIO_writePin(MOTOR_PINS_PORT_ID, IN2, LOGIC_LOW);
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	64 e0       	ldi	r22, 0x04	; 4
    22f6:	40 e0       	ldi	r20, 0x00	; 0
    22f8:	0e 94 b4 09 	call	0x1368	; 0x1368 <GPIO_writePin>

}
    22fc:	cf 91       	pop	r28
    22fe:	df 91       	pop	r29
    2300:	08 95       	ret

00002302 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state)
{
    2302:	df 93       	push	r29
    2304:	cf 93       	push	r28
    2306:	00 d0       	rcall	.+0      	; 0x2308 <DcMotor_Rotate+0x6>
    2308:	0f 92       	push	r0
    230a:	cd b7       	in	r28, 0x3d	; 61
    230c:	de b7       	in	r29, 0x3e	; 62
    230e:	89 83       	std	Y+1, r24	; 0x01

	/* rotate the DC Motor CW/ or A-CW or stop the motor based on the state input state value. */
	switch(state)
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	28 2f       	mov	r18, r24
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	3b 83       	std	Y+3, r19	; 0x03
    2318:	2a 83       	std	Y+2, r18	; 0x02
    231a:	8a 81       	ldd	r24, Y+2	; 0x02
    231c:	9b 81       	ldd	r25, Y+3	; 0x03
    231e:	81 30       	cpi	r24, 0x01	; 1
    2320:	91 05       	cpc	r25, r1
    2322:	a1 f0       	breq	.+40     	; 0x234c <DcMotor_Rotate+0x4a>
    2324:	2a 81       	ldd	r18, Y+2	; 0x02
    2326:	3b 81       	ldd	r19, Y+3	; 0x03
    2328:	22 30       	cpi	r18, 0x02	; 2
    232a:	31 05       	cpc	r19, r1
    232c:	d1 f0       	breq	.+52     	; 0x2362 <DcMotor_Rotate+0x60>
    232e:	8a 81       	ldd	r24, Y+2	; 0x02
    2330:	9b 81       	ldd	r25, Y+3	; 0x03
    2332:	00 97       	sbiw	r24, 0x00	; 0
    2334:	01 f5       	brne	.+64     	; 0x2376 <DcMotor_Rotate+0x74>
	{
	case 0:
		GPIO_writePin(MOTOR_PINS_PORT_ID, IN1, LOGIC_LOW);
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	63 e0       	ldi	r22, 0x03	; 3
    233a:	40 e0       	ldi	r20, 0x00	; 0
    233c:	0e 94 b4 09 	call	0x1368	; 0x1368 <GPIO_writePin>
		GPIO_writePin(MOTOR_PINS_PORT_ID, IN2, LOGIC_LOW);
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	64 e0       	ldi	r22, 0x04	; 4
    2344:	40 e0       	ldi	r20, 0x00	; 0
    2346:	0e 94 b4 09 	call	0x1368	; 0x1368 <GPIO_writePin>
    234a:	15 c0       	rjmp	.+42     	; 0x2376 <DcMotor_Rotate+0x74>
		break;
	case 1:
		GPIO_writePin(MOTOR_PINS_PORT_ID, IN1, LOGIC_HIGH);
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	63 e0       	ldi	r22, 0x03	; 3
    2350:	41 e0       	ldi	r20, 0x01	; 1
    2352:	0e 94 b4 09 	call	0x1368	; 0x1368 <GPIO_writePin>
		GPIO_writePin(MOTOR_PINS_PORT_ID, IN2, LOGIC_LOW);
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	64 e0       	ldi	r22, 0x04	; 4
    235a:	40 e0       	ldi	r20, 0x00	; 0
    235c:	0e 94 b4 09 	call	0x1368	; 0x1368 <GPIO_writePin>
    2360:	0a c0       	rjmp	.+20     	; 0x2376 <DcMotor_Rotate+0x74>
		break;
	case 2:
		GPIO_writePin(MOTOR_PINS_PORT_ID, IN1, LOGIC_LOW);
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	63 e0       	ldi	r22, 0x03	; 3
    2366:	40 e0       	ldi	r20, 0x00	; 0
    2368:	0e 94 b4 09 	call	0x1368	; 0x1368 <GPIO_writePin>
		GPIO_writePin(MOTOR_PINS_PORT_ID, IN2, LOGIC_HIGH);
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	64 e0       	ldi	r22, 0x04	; 4
    2370:	41 e0       	ldi	r20, 0x01	; 1
    2372:	0e 94 b4 09 	call	0x1368	; 0x1368 <GPIO_writePin>
		break;
	}
}
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	08 95       	ret

00002382 <__vector_9>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_OVF_vect)
{
    2382:	1f 92       	push	r1
    2384:	0f 92       	push	r0
    2386:	0f b6       	in	r0, 0x3f	; 63
    2388:	0f 92       	push	r0
    238a:	11 24       	eor	r1, r1
    238c:	2f 93       	push	r18
    238e:	3f 93       	push	r19
    2390:	4f 93       	push	r20
    2392:	5f 93       	push	r21
    2394:	6f 93       	push	r22
    2396:	7f 93       	push	r23
    2398:	8f 93       	push	r24
    239a:	9f 93       	push	r25
    239c:	af 93       	push	r26
    239e:	bf 93       	push	r27
    23a0:	ef 93       	push	r30
    23a2:	ff 93       	push	r31
    23a4:	df 93       	push	r29
    23a6:	cf 93       	push	r28
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    23ac:	80 91 76 00 	lds	r24, 0x0076
    23b0:	90 91 77 00 	lds	r25, 0x0077
    23b4:	00 97       	sbiw	r24, 0x00	; 0
    23b6:	29 f0       	breq	.+10     	; 0x23c2 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the timer finished counting using either overflow mode or compare mode */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    23b8:	e0 91 76 00 	lds	r30, 0x0076
    23bc:	f0 91 77 00 	lds	r31, 0x0077
    23c0:	09 95       	icall
	}
}
    23c2:	cf 91       	pop	r28
    23c4:	df 91       	pop	r29
    23c6:	ff 91       	pop	r31
    23c8:	ef 91       	pop	r30
    23ca:	bf 91       	pop	r27
    23cc:	af 91       	pop	r26
    23ce:	9f 91       	pop	r25
    23d0:	8f 91       	pop	r24
    23d2:	7f 91       	pop	r23
    23d4:	6f 91       	pop	r22
    23d6:	5f 91       	pop	r21
    23d8:	4f 91       	pop	r20
    23da:	3f 91       	pop	r19
    23dc:	2f 91       	pop	r18
    23de:	0f 90       	pop	r0
    23e0:	0f be       	out	0x3f, r0	; 63
    23e2:	0f 90       	pop	r0
    23e4:	1f 90       	pop	r1
    23e6:	18 95       	reti

000023e8 <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    23e8:	1f 92       	push	r1
    23ea:	0f 92       	push	r0
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	0f 92       	push	r0
    23f0:	11 24       	eor	r1, r1
    23f2:	2f 93       	push	r18
    23f4:	3f 93       	push	r19
    23f6:	4f 93       	push	r20
    23f8:	5f 93       	push	r21
    23fa:	6f 93       	push	r22
    23fc:	7f 93       	push	r23
    23fe:	8f 93       	push	r24
    2400:	9f 93       	push	r25
    2402:	af 93       	push	r26
    2404:	bf 93       	push	r27
    2406:	ef 93       	push	r30
    2408:	ff 93       	push	r31
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2412:	80 91 76 00 	lds	r24, 0x0076
    2416:	90 91 77 00 	lds	r25, 0x0077
    241a:	00 97       	sbiw	r24, 0x00	; 0
    241c:	29 f0       	breq	.+10     	; 0x2428 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the timer finished counting using either overflow mode or compare mode */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    241e:	e0 91 76 00 	lds	r30, 0x0076
    2422:	f0 91 77 00 	lds	r31, 0x0077
    2426:	09 95       	icall
	}
}
    2428:	cf 91       	pop	r28
    242a:	df 91       	pop	r29
    242c:	ff 91       	pop	r31
    242e:	ef 91       	pop	r30
    2430:	bf 91       	pop	r27
    2432:	af 91       	pop	r26
    2434:	9f 91       	pop	r25
    2436:	8f 91       	pop	r24
    2438:	7f 91       	pop	r23
    243a:	6f 91       	pop	r22
    243c:	5f 91       	pop	r21
    243e:	4f 91       	pop	r20
    2440:	3f 91       	pop	r19
    2442:	2f 91       	pop	r18
    2444:	0f 90       	pop	r0
    2446:	0f be       	out	0x3f, r0	; 63
    2448:	0f 90       	pop	r0
    244a:	1f 90       	pop	r1
    244c:	18 95       	reti

0000244e <Timer0_init>:
 * 	6. set compare value if compare mode was selected
 * 	7. enable compare mode interrupt if compare mode was selected
 * 	8. enable global interrupt
 */
void Timer0_init(TIMER_ConfigType * Config_Ptr)
{
    244e:	df 93       	push	r29
    2450:	cf 93       	push	r28
    2452:	00 d0       	rcall	.+0      	; 0x2454 <Timer0_init+0x6>
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
    2458:	9a 83       	std	Y+2, r25	; 0x02
    245a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Config_Ptr->initial_value; // Set Timer0 initial value
    245c:	a2 e5       	ldi	r26, 0x52	; 82
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	e9 81       	ldd	r30, Y+1	; 0x01
    2462:	fa 81       	ldd	r31, Y+2	; 0x02
    2464:	82 81       	ldd	r24, Z+2	; 0x02
    2466:	8c 93       	st	X, r24

	TCCR0 = (1<<FOC0);   // Non PWM mode FOC0=1
    2468:	e3 e5       	ldi	r30, 0x53	; 83
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 e8       	ldi	r24, 0x80	; 128
    246e:	80 83       	st	Z, r24

	TCCR0 |= Config_Ptr->mode; // configure mode either overflow mode or compare mode
    2470:	a3 e5       	ldi	r26, 0x53	; 83
    2472:	b0 e0       	ldi	r27, 0x00	; 0
    2474:	e3 e5       	ldi	r30, 0x53	; 83
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	90 81       	ld	r25, Z
    247a:	e9 81       	ldd	r30, Y+1	; 0x01
    247c:	fa 81       	ldd	r31, Y+2	; 0x02
    247e:	80 81       	ld	r24, Z
    2480:	89 2b       	or	r24, r25
    2482:	8c 93       	st	X, r24

	TCCR0 |= Config_Ptr->prescaler; // configuration of prescaler
    2484:	a3 e5       	ldi	r26, 0x53	; 83
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	e3 e5       	ldi	r30, 0x53	; 83
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	90 81       	ld	r25, Z
    248e:	e9 81       	ldd	r30, Y+1	; 0x01
    2490:	fa 81       	ldd	r31, Y+2	; 0x02
    2492:	81 81       	ldd	r24, Z+1	; 0x01
    2494:	89 2b       	or	r24, r25
    2496:	8c 93       	st	X, r24

	if(Config_Ptr->mode == OVF_MODE)
    2498:	e9 81       	ldd	r30, Y+1	; 0x01
    249a:	fa 81       	ldd	r31, Y+2	; 0x02
    249c:	80 81       	ld	r24, Z
    249e:	88 23       	and	r24, r24
    24a0:	41 f4       	brne	.+16     	; 0x24b2 <Timer0_init+0x64>
	{
		TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
    24a2:	a9 e5       	ldi	r26, 0x59	; 89
    24a4:	b0 e0       	ldi	r27, 0x00	; 0
    24a6:	e9 e5       	ldi	r30, 0x59	; 89
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	80 81       	ld	r24, Z
    24ac:	81 60       	ori	r24, 0x01	; 1
    24ae:	8c 93       	st	X, r24
    24b0:	12 c0       	rjmp	.+36     	; 0x24d6 <Timer0_init+0x88>
	}
	else if (Config_Ptr->mode == COMP_MODE)
    24b2:	e9 81       	ldd	r30, Y+1	; 0x01
    24b4:	fa 81       	ldd	r31, Y+2	; 0x02
    24b6:	80 81       	ld	r24, Z
    24b8:	88 30       	cpi	r24, 0x08	; 8
    24ba:	69 f4       	brne	.+26     	; 0x24d6 <Timer0_init+0x88>
	{
		OCR0 = Config_Ptr->compare_value; // configuration of compare value if comapre mode was selected
    24bc:	ac e5       	ldi	r26, 0x5C	; 92
    24be:	b0 e0       	ldi	r27, 0x00	; 0
    24c0:	e9 81       	ldd	r30, Y+1	; 0x01
    24c2:	fa 81       	ldd	r31, Y+2	; 0x02
    24c4:	83 81       	ldd	r24, Z+3	; 0x03
    24c6:	8c 93       	st	X, r24
		TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
    24c8:	a9 e5       	ldi	r26, 0x59	; 89
    24ca:	b0 e0       	ldi	r27, 0x00	; 0
    24cc:	e9 e5       	ldi	r30, 0x59	; 89
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	80 81       	ld	r24, Z
    24d2:	82 60       	ori	r24, 0x02	; 2
    24d4:	8c 93       	st	X, r24
	}

	SREG |= (1<<7); //enable global interrupt
    24d6:	af e5       	ldi	r26, 0x5F	; 95
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	ef e5       	ldi	r30, 0x5F	; 95
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	80 68       	ori	r24, 0x80	; 128
    24e2:	8c 93       	st	X, r24
}
    24e4:	0f 90       	pop	r0
    24e6:	0f 90       	pop	r0
    24e8:	cf 91       	pop	r28
    24ea:	df 91       	pop	r29
    24ec:	08 95       	ret

000024ee <Timer0_setCallBack>:
/*
 * Description: Function to set the Call Back function address.
*/

void Timer0_setCallBack(void(*a_ptr)(void))
{
    24ee:	df 93       	push	r29
    24f0:	cf 93       	push	r28
    24f2:	00 d0       	rcall	.+0      	; 0x24f4 <Timer0_setCallBack+0x6>
    24f4:	cd b7       	in	r28, 0x3d	; 61
    24f6:	de b7       	in	r29, 0x3e	; 62
    24f8:	9a 83       	std	Y+2, r25	; 0x02
    24fa:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2500:	90 93 77 00 	sts	0x0077, r25
    2504:	80 93 76 00 	sts	0x0076, r24
}
    2508:	0f 90       	pop	r0
    250a:	0f 90       	pop	r0
    250c:	cf 91       	pop	r28
    250e:	df 91       	pop	r29
    2510:	08 95       	ret

00002512 <Timer0_DeInit>:
/*
 * Description: Function to disable the Timer0
 */

void Timer0_DeInit(void)
{
    2512:	df 93       	push	r29
    2514:	cf 93       	push	r28
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    251a:	e3 e5       	ldi	r30, 0x53	; 83
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	10 82       	st	Z, r1

}
    2520:	cf 91       	pop	r28
    2522:	df 91       	pop	r29
    2524:	08 95       	ret

00002526 <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    2526:	df 93       	push	r29
    2528:	cf 93       	push	r28
    252a:	00 d0       	rcall	.+0      	; 0x252c <TWI_init+0x6>
    252c:	cd b7       	in	r28, 0x3d	; 61
    252e:	de b7       	in	r29, 0x3e	; 62
    2530:	9a 83       	std	Y+2, r25	; 0x02
    2532:	89 83       	std	Y+1, r24	; 0x01
    /* configuration of bit rate with either normal mode 100 kb/s or fast mode 400 kb/s */
    TWBR = Config_Ptr->bit_rate;
    2534:	a0 e2       	ldi	r26, 0x20	; 32
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	e9 81       	ldd	r30, Y+1	; 0x01
    253a:	fa 81       	ldd	r31, Y+2	; 0x02
    253c:	80 81       	ld	r24, Z
    253e:	8c 93       	st	X, r24
	TWSR = 0x00;
    2540:	e1 e2       	ldi	r30, 0x21	; 33
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->slave_address; //
    2546:	a2 e2       	ldi	r26, 0x22	; 34
    2548:	b0 e0       	ldi	r27, 0x00	; 0
    254a:	e9 81       	ldd	r30, Y+1	; 0x01
    254c:	fa 81       	ldd	r31, Y+2	; 0x02
    254e:	81 81       	ldd	r24, Z+1	; 0x01
    2550:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    2552:	e6 e5       	ldi	r30, 0x56	; 86
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	84 e0       	ldi	r24, 0x04	; 4
    2558:	80 83       	st	Z, r24
}
    255a:	0f 90       	pop	r0
    255c:	0f 90       	pop	r0
    255e:	cf 91       	pop	r28
    2560:	df 91       	pop	r29
    2562:	08 95       	ret

00002564 <TWI_start>:

void TWI_start(void)
{
    2564:	df 93       	push	r29
    2566:	cf 93       	push	r28
    2568:	cd b7       	in	r28, 0x3d	; 61
    256a:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    256c:	e6 e5       	ldi	r30, 0x56	; 86
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	84 ea       	ldi	r24, 0xA4	; 164
    2572:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2574:	e6 e5       	ldi	r30, 0x56	; 86
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	80 81       	ld	r24, Z
    257a:	88 23       	and	r24, r24
    257c:	dc f7       	brge	.-10     	; 0x2574 <TWI_start+0x10>
}
    257e:	cf 91       	pop	r28
    2580:	df 91       	pop	r29
    2582:	08 95       	ret

00002584 <TWI_stop>:

void TWI_stop(void)
{
    2584:	df 93       	push	r29
    2586:	cf 93       	push	r28
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    258c:	e6 e5       	ldi	r30, 0x56	; 86
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	84 e9       	ldi	r24, 0x94	; 148
    2592:	80 83       	st	Z, r24
}
    2594:	cf 91       	pop	r28
    2596:	df 91       	pop	r29
    2598:	08 95       	ret

0000259a <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    259a:	df 93       	push	r29
    259c:	cf 93       	push	r28
    259e:	0f 92       	push	r0
    25a0:	cd b7       	in	r28, 0x3d	; 61
    25a2:	de b7       	in	r29, 0x3e	; 62
    25a4:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    25a6:	e3 e2       	ldi	r30, 0x23	; 35
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	89 81       	ldd	r24, Y+1	; 0x01
    25ac:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    25ae:	e6 e5       	ldi	r30, 0x56	; 86
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	84 e8       	ldi	r24, 0x84	; 132
    25b4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    25b6:	e6 e5       	ldi	r30, 0x56	; 86
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	88 23       	and	r24, r24
    25be:	dc f7       	brge	.-10     	; 0x25b6 <TWI_writeByte+0x1c>
}
    25c0:	0f 90       	pop	r0
    25c2:	cf 91       	pop	r28
    25c4:	df 91       	pop	r29
    25c6:	08 95       	ret

000025c8 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    25c8:	df 93       	push	r29
    25ca:	cf 93       	push	r28
    25cc:	cd b7       	in	r28, 0x3d	; 61
    25ce:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    25d0:	e6 e5       	ldi	r30, 0x56	; 86
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	84 ec       	ldi	r24, 0xC4	; 196
    25d6:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    25d8:	e6 e5       	ldi	r30, 0x56	; 86
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	80 81       	ld	r24, Z
    25de:	88 23       	and	r24, r24
    25e0:	dc f7       	brge	.-10     	; 0x25d8 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    25e2:	e3 e2       	ldi	r30, 0x23	; 35
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	80 81       	ld	r24, Z
}
    25e8:	cf 91       	pop	r28
    25ea:	df 91       	pop	r29
    25ec:	08 95       	ret

000025ee <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    25ee:	df 93       	push	r29
    25f0:	cf 93       	push	r28
    25f2:	cd b7       	in	r28, 0x3d	; 61
    25f4:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    25f6:	e6 e5       	ldi	r30, 0x56	; 86
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	84 e8       	ldi	r24, 0x84	; 132
    25fc:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    25fe:	e6 e5       	ldi	r30, 0x56	; 86
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	80 81       	ld	r24, Z
    2604:	88 23       	and	r24, r24
    2606:	dc f7       	brge	.-10     	; 0x25fe <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2608:	e3 e2       	ldi	r30, 0x23	; 35
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	80 81       	ld	r24, Z
}
    260e:	cf 91       	pop	r28
    2610:	df 91       	pop	r29
    2612:	08 95       	ret

00002614 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2614:	df 93       	push	r29
    2616:	cf 93       	push	r28
    2618:	0f 92       	push	r0
    261a:	cd b7       	in	r28, 0x3d	; 61
    261c:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    261e:	e1 e2       	ldi	r30, 0x21	; 33
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	88 7f       	andi	r24, 0xF8	; 248
    2626:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2628:	89 81       	ldd	r24, Y+1	; 0x01
}
    262a:	0f 90       	pop	r0
    262c:	cf 91       	pop	r28
    262e:	df 91       	pop	r29
    2630:	08 95       	ret

00002632 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const Uart_ConfigType * Config_Ptr)
{
    2632:	df 93       	push	r29
    2634:	cf 93       	push	r28
    2636:	00 d0       	rcall	.+0      	; 0x2638 <UART_init+0x6>
    2638:	00 d0       	rcall	.+0      	; 0x263a <UART_init+0x8>
    263a:	cd b7       	in	r28, 0x3d	; 61
    263c:	de b7       	in	r29, 0x3e	; 62
    263e:	9c 83       	std	Y+4, r25	; 0x04
    2640:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2642:	1a 82       	std	Y+2, r1	; 0x02
    2644:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2646:	eb e2       	ldi	r30, 0x2B	; 43
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	82 e0       	ldi	r24, 0x02	; 2
    264c:	80 83       	st	Z, r24

	/*enable transmitter and receiver*/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    264e:	ea e2       	ldi	r30, 0x2A	; 42
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	88 e1       	ldi	r24, 0x18	; 24
    2654:	80 83       	st	Z, r24

	/*configure data bits by inserting 2 bits into UCSRC (UCSZ1:0) and inserting 1 bit into UCSRB (UCSZ2) from the databit configuration*/
	UCSRB|= (Config_Ptr->data_bit & 0x04);
    2656:	aa e2       	ldi	r26, 0x2A	; 42
    2658:	b0 e0       	ldi	r27, 0x00	; 0
    265a:	ea e2       	ldi	r30, 0x2A	; 42
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	80 81       	ld	r24, Z
    2660:	98 2f       	mov	r25, r24
    2662:	eb 81       	ldd	r30, Y+3	; 0x03
    2664:	fc 81       	ldd	r31, Y+4	; 0x04
    2666:	84 81       	ldd	r24, Z+4	; 0x04
    2668:	84 70       	andi	r24, 0x04	; 4
    266a:	89 2b       	or	r24, r25
    266c:	8c 93       	st	X, r24

	UCSRC = (1<<URSEL);      /* URSEL   = 1 The URSEL must be one when writing the UCSRC*/
    266e:	e0 e4       	ldi	r30, 0x40	; 64
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	80 e8       	ldi	r24, 0x80	; 128
    2674:	80 83       	st	Z, r24

	UCSRC |= ((Config_Ptr->data_bit & 0x03) << 1);
    2676:	a0 e4       	ldi	r26, 0x40	; 64
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	e0 e4       	ldi	r30, 0x40	; 64
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	80 81       	ld	r24, Z
    2680:	28 2f       	mov	r18, r24
    2682:	eb 81       	ldd	r30, Y+3	; 0x03
    2684:	fc 81       	ldd	r31, Y+4	; 0x04
    2686:	84 81       	ldd	r24, Z+4	; 0x04
    2688:	88 2f       	mov	r24, r24
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	83 70       	andi	r24, 0x03	; 3
    268e:	90 70       	andi	r25, 0x00	; 0
    2690:	88 0f       	add	r24, r24
    2692:	99 1f       	adc	r25, r25
    2694:	82 2b       	or	r24, r18
    2696:	8c 93       	st	X, r24

	/*configure partiy mode*/
	UCSRC |= (Config_Ptr->parity << 4);
    2698:	a0 e4       	ldi	r26, 0x40	; 64
    269a:	b0 e0       	ldi	r27, 0x00	; 0
    269c:	e0 e4       	ldi	r30, 0x40	; 64
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	80 81       	ld	r24, Z
    26a2:	28 2f       	mov	r18, r24
    26a4:	eb 81       	ldd	r30, Y+3	; 0x03
    26a6:	fc 81       	ldd	r31, Y+4	; 0x04
    26a8:	85 81       	ldd	r24, Z+5	; 0x05
    26aa:	88 2f       	mov	r24, r24
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	82 95       	swap	r24
    26b0:	92 95       	swap	r25
    26b2:	90 7f       	andi	r25, 0xF0	; 240
    26b4:	98 27       	eor	r25, r24
    26b6:	80 7f       	andi	r24, 0xF0	; 240
    26b8:	98 27       	eor	r25, r24
    26ba:	82 2b       	or	r24, r18
    26bc:	8c 93       	st	X, r24

	/*configure stop bit*/
	UCSRC |= (Config_Ptr->stop_bit << 3);
    26be:	a0 e4       	ldi	r26, 0x40	; 64
    26c0:	b0 e0       	ldi	r27, 0x00	; 0
    26c2:	e0 e4       	ldi	r30, 0x40	; 64
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	80 81       	ld	r24, Z
    26c8:	28 2f       	mov	r18, r24
    26ca:	eb 81       	ldd	r30, Y+3	; 0x03
    26cc:	fc 81       	ldd	r31, Y+4	; 0x04
    26ce:	86 81       	ldd	r24, Z+6	; 0x06
    26d0:	88 2f       	mov	r24, r24
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	88 0f       	add	r24, r24
    26d6:	99 1f       	adc	r25, r25
    26d8:	88 0f       	add	r24, r24
    26da:	99 1f       	adc	r25, r25
    26dc:	88 0f       	add	r24, r24
    26de:	99 1f       	adc	r25, r25
    26e0:	82 2b       	or	r24, r18
    26e2:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    26e4:	eb 81       	ldd	r30, Y+3	; 0x03
    26e6:	fc 81       	ldd	r31, Y+4	; 0x04
    26e8:	80 81       	ld	r24, Z
    26ea:	91 81       	ldd	r25, Z+1	; 0x01
    26ec:	a2 81       	ldd	r26, Z+2	; 0x02
    26ee:	b3 81       	ldd	r27, Z+3	; 0x03
    26f0:	88 0f       	add	r24, r24
    26f2:	99 1f       	adc	r25, r25
    26f4:	aa 1f       	adc	r26, r26
    26f6:	bb 1f       	adc	r27, r27
    26f8:	88 0f       	add	r24, r24
    26fa:	99 1f       	adc	r25, r25
    26fc:	aa 1f       	adc	r26, r26
    26fe:	bb 1f       	adc	r27, r27
    2700:	88 0f       	add	r24, r24
    2702:	99 1f       	adc	r25, r25
    2704:	aa 1f       	adc	r26, r26
    2706:	bb 1f       	adc	r27, r27
    2708:	9c 01       	movw	r18, r24
    270a:	ad 01       	movw	r20, r26
    270c:	80 e4       	ldi	r24, 0x40	; 64
    270e:	92 e4       	ldi	r25, 0x42	; 66
    2710:	af e0       	ldi	r26, 0x0F	; 15
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	bc 01       	movw	r22, r24
    2716:	cd 01       	movw	r24, r26
    2718:	0e 94 37 14 	call	0x286e	; 0x286e <__udivmodsi4>
    271c:	da 01       	movw	r26, r20
    271e:	c9 01       	movw	r24, r18
    2720:	01 97       	sbiw	r24, 0x01	; 1
    2722:	9a 83       	std	Y+2, r25	; 0x02
    2724:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2726:	e0 e4       	ldi	r30, 0x40	; 64
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	9a 81       	ldd	r25, Y+2	; 0x02
    272e:	89 2f       	mov	r24, r25
    2730:	99 27       	eor	r25, r25
    2732:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2734:	e9 e2       	ldi	r30, 0x29	; 41
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	89 81       	ldd	r24, Y+1	; 0x01
    273a:	80 83       	st	Z, r24
}
    273c:	0f 90       	pop	r0
    273e:	0f 90       	pop	r0
    2740:	0f 90       	pop	r0
    2742:	0f 90       	pop	r0
    2744:	cf 91       	pop	r28
    2746:	df 91       	pop	r29
    2748:	08 95       	ret

0000274a <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    274a:	df 93       	push	r29
    274c:	cf 93       	push	r28
    274e:	0f 92       	push	r0
    2750:	cd b7       	in	r28, 0x3d	; 61
    2752:	de b7       	in	r29, 0x3e	; 62
    2754:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2756:	eb e2       	ldi	r30, 0x2B	; 43
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	88 2f       	mov	r24, r24
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	80 72       	andi	r24, 0x20	; 32
    2762:	90 70       	andi	r25, 0x00	; 0
    2764:	00 97       	sbiw	r24, 0x00	; 0
    2766:	b9 f3       	breq	.-18     	; 0x2756 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2768:	ec e2       	ldi	r30, 0x2C	; 44
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	89 81       	ldd	r24, Y+1	; 0x01
    276e:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2770:	0f 90       	pop	r0
    2772:	cf 91       	pop	r28
    2774:	df 91       	pop	r29
    2776:	08 95       	ret

00002778 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2778:	df 93       	push	r29
    277a:	cf 93       	push	r28
    277c:	cd b7       	in	r28, 0x3d	; 61
    277e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2780:	eb e2       	ldi	r30, 0x2B	; 43
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	80 81       	ld	r24, Z
    2786:	88 23       	and	r24, r24
    2788:	dc f7       	brge	.-10     	; 0x2780 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    278a:	ec e2       	ldi	r30, 0x2C	; 44
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	80 81       	ld	r24, Z
}
    2790:	cf 91       	pop	r28
    2792:	df 91       	pop	r29
    2794:	08 95       	ret

00002796 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2796:	df 93       	push	r29
    2798:	cf 93       	push	r28
    279a:	00 d0       	rcall	.+0      	; 0x279c <UART_sendString+0x6>
    279c:	0f 92       	push	r0
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62
    27a2:	9b 83       	std	Y+3, r25	; 0x03
    27a4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    27a6:	19 82       	std	Y+1, r1	; 0x01
    27a8:	0e c0       	rjmp	.+28     	; 0x27c6 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    27aa:	89 81       	ldd	r24, Y+1	; 0x01
    27ac:	28 2f       	mov	r18, r24
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	8a 81       	ldd	r24, Y+2	; 0x02
    27b2:	9b 81       	ldd	r25, Y+3	; 0x03
    27b4:	fc 01       	movw	r30, r24
    27b6:	e2 0f       	add	r30, r18
    27b8:	f3 1f       	adc	r31, r19
    27ba:	80 81       	ld	r24, Z
    27bc:	0e 94 a5 13 	call	0x274a	; 0x274a <UART_sendByte>
		i++;
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
    27c2:	8f 5f       	subi	r24, 0xFF	; 255
    27c4:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    27c6:	89 81       	ldd	r24, Y+1	; 0x01
    27c8:	28 2f       	mov	r18, r24
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	8a 81       	ldd	r24, Y+2	; 0x02
    27ce:	9b 81       	ldd	r25, Y+3	; 0x03
    27d0:	fc 01       	movw	r30, r24
    27d2:	e2 0f       	add	r30, r18
    27d4:	f3 1f       	adc	r31, r19
    27d6:	80 81       	ld	r24, Z
    27d8:	88 23       	and	r24, r24
    27da:	39 f7       	brne	.-50     	; 0x27aa <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    27dc:	0f 90       	pop	r0
    27de:	0f 90       	pop	r0
    27e0:	0f 90       	pop	r0
    27e2:	cf 91       	pop	r28
    27e4:	df 91       	pop	r29
    27e6:	08 95       	ret

000027e8 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    27e8:	0f 93       	push	r16
    27ea:	1f 93       	push	r17
    27ec:	df 93       	push	r29
    27ee:	cf 93       	push	r28
    27f0:	00 d0       	rcall	.+0      	; 0x27f2 <UART_receiveString+0xa>
    27f2:	0f 92       	push	r0
    27f4:	cd b7       	in	r28, 0x3d	; 61
    27f6:	de b7       	in	r29, 0x3e	; 62
    27f8:	9b 83       	std	Y+3, r25	; 0x03
    27fa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    27fc:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
    2800:	28 2f       	mov	r18, r24
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	8a 81       	ldd	r24, Y+2	; 0x02
    2806:	9b 81       	ldd	r25, Y+3	; 0x03
    2808:	8c 01       	movw	r16, r24
    280a:	02 0f       	add	r16, r18
    280c:	13 1f       	adc	r17, r19
    280e:	0e 94 bc 13 	call	0x2778	; 0x2778 <UART_recieveByte>
    2812:	f8 01       	movw	r30, r16
    2814:	80 83       	st	Z, r24
    2816:	0f c0       	rjmp	.+30     	; 0x2836 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2818:	89 81       	ldd	r24, Y+1	; 0x01
    281a:	8f 5f       	subi	r24, 0xFF	; 255
    281c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    281e:	89 81       	ldd	r24, Y+1	; 0x01
    2820:	28 2f       	mov	r18, r24
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	8a 81       	ldd	r24, Y+2	; 0x02
    2826:	9b 81       	ldd	r25, Y+3	; 0x03
    2828:	8c 01       	movw	r16, r24
    282a:	02 0f       	add	r16, r18
    282c:	13 1f       	adc	r17, r19
    282e:	0e 94 bc 13 	call	0x2778	; 0x2778 <UART_recieveByte>
    2832:	f8 01       	movw	r30, r16
    2834:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2836:	89 81       	ldd	r24, Y+1	; 0x01
    2838:	28 2f       	mov	r18, r24
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	8a 81       	ldd	r24, Y+2	; 0x02
    283e:	9b 81       	ldd	r25, Y+3	; 0x03
    2840:	fc 01       	movw	r30, r24
    2842:	e2 0f       	add	r30, r18
    2844:	f3 1f       	adc	r31, r19
    2846:	80 81       	ld	r24, Z
    2848:	83 32       	cpi	r24, 0x23	; 35
    284a:	31 f7       	brne	.-52     	; 0x2818 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    284c:	89 81       	ldd	r24, Y+1	; 0x01
    284e:	28 2f       	mov	r18, r24
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	8a 81       	ldd	r24, Y+2	; 0x02
    2854:	9b 81       	ldd	r25, Y+3	; 0x03
    2856:	fc 01       	movw	r30, r24
    2858:	e2 0f       	add	r30, r18
    285a:	f3 1f       	adc	r31, r19
    285c:	10 82       	st	Z, r1
}
    285e:	0f 90       	pop	r0
    2860:	0f 90       	pop	r0
    2862:	0f 90       	pop	r0
    2864:	cf 91       	pop	r28
    2866:	df 91       	pop	r29
    2868:	1f 91       	pop	r17
    286a:	0f 91       	pop	r16
    286c:	08 95       	ret

0000286e <__udivmodsi4>:
    286e:	a1 e2       	ldi	r26, 0x21	; 33
    2870:	1a 2e       	mov	r1, r26
    2872:	aa 1b       	sub	r26, r26
    2874:	bb 1b       	sub	r27, r27
    2876:	fd 01       	movw	r30, r26
    2878:	0d c0       	rjmp	.+26     	; 0x2894 <__udivmodsi4_ep>

0000287a <__udivmodsi4_loop>:
    287a:	aa 1f       	adc	r26, r26
    287c:	bb 1f       	adc	r27, r27
    287e:	ee 1f       	adc	r30, r30
    2880:	ff 1f       	adc	r31, r31
    2882:	a2 17       	cp	r26, r18
    2884:	b3 07       	cpc	r27, r19
    2886:	e4 07       	cpc	r30, r20
    2888:	f5 07       	cpc	r31, r21
    288a:	20 f0       	brcs	.+8      	; 0x2894 <__udivmodsi4_ep>
    288c:	a2 1b       	sub	r26, r18
    288e:	b3 0b       	sbc	r27, r19
    2890:	e4 0b       	sbc	r30, r20
    2892:	f5 0b       	sbc	r31, r21

00002894 <__udivmodsi4_ep>:
    2894:	66 1f       	adc	r22, r22
    2896:	77 1f       	adc	r23, r23
    2898:	88 1f       	adc	r24, r24
    289a:	99 1f       	adc	r25, r25
    289c:	1a 94       	dec	r1
    289e:	69 f7       	brne	.-38     	; 0x287a <__udivmodsi4_loop>
    28a0:	60 95       	com	r22
    28a2:	70 95       	com	r23
    28a4:	80 95       	com	r24
    28a6:	90 95       	com	r25
    28a8:	9b 01       	movw	r18, r22
    28aa:	ac 01       	movw	r20, r24
    28ac:	bd 01       	movw	r22, r26
    28ae:	cf 01       	movw	r24, r30
    28b0:	08 95       	ret

000028b2 <__prologue_saves__>:
    28b2:	2f 92       	push	r2
    28b4:	3f 92       	push	r3
    28b6:	4f 92       	push	r4
    28b8:	5f 92       	push	r5
    28ba:	6f 92       	push	r6
    28bc:	7f 92       	push	r7
    28be:	8f 92       	push	r8
    28c0:	9f 92       	push	r9
    28c2:	af 92       	push	r10
    28c4:	bf 92       	push	r11
    28c6:	cf 92       	push	r12
    28c8:	df 92       	push	r13
    28ca:	ef 92       	push	r14
    28cc:	ff 92       	push	r15
    28ce:	0f 93       	push	r16
    28d0:	1f 93       	push	r17
    28d2:	cf 93       	push	r28
    28d4:	df 93       	push	r29
    28d6:	cd b7       	in	r28, 0x3d	; 61
    28d8:	de b7       	in	r29, 0x3e	; 62
    28da:	ca 1b       	sub	r28, r26
    28dc:	db 0b       	sbc	r29, r27
    28de:	0f b6       	in	r0, 0x3f	; 63
    28e0:	f8 94       	cli
    28e2:	de bf       	out	0x3e, r29	; 62
    28e4:	0f be       	out	0x3f, r0	; 63
    28e6:	cd bf       	out	0x3d, r28	; 61
    28e8:	09 94       	ijmp

000028ea <__epilogue_restores__>:
    28ea:	2a 88       	ldd	r2, Y+18	; 0x12
    28ec:	39 88       	ldd	r3, Y+17	; 0x11
    28ee:	48 88       	ldd	r4, Y+16	; 0x10
    28f0:	5f 84       	ldd	r5, Y+15	; 0x0f
    28f2:	6e 84       	ldd	r6, Y+14	; 0x0e
    28f4:	7d 84       	ldd	r7, Y+13	; 0x0d
    28f6:	8c 84       	ldd	r8, Y+12	; 0x0c
    28f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    28fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    28fc:	b9 84       	ldd	r11, Y+9	; 0x09
    28fe:	c8 84       	ldd	r12, Y+8	; 0x08
    2900:	df 80       	ldd	r13, Y+7	; 0x07
    2902:	ee 80       	ldd	r14, Y+6	; 0x06
    2904:	fd 80       	ldd	r15, Y+5	; 0x05
    2906:	0c 81       	ldd	r16, Y+4	; 0x04
    2908:	1b 81       	ldd	r17, Y+3	; 0x03
    290a:	aa 81       	ldd	r26, Y+2	; 0x02
    290c:	b9 81       	ldd	r27, Y+1	; 0x01
    290e:	ce 0f       	add	r28, r30
    2910:	d1 1d       	adc	r29, r1
    2912:	0f b6       	in	r0, 0x3f	; 63
    2914:	f8 94       	cli
    2916:	de bf       	out	0x3e, r29	; 62
    2918:	0f be       	out	0x3f, r0	; 63
    291a:	cd bf       	out	0x3d, r28	; 61
    291c:	ed 01       	movw	r28, r26
    291e:	08 95       	ret

00002920 <itoa>:
    2920:	fb 01       	movw	r30, r22
    2922:	9f 01       	movw	r18, r30
    2924:	e8 94       	clt
    2926:	42 30       	cpi	r20, 0x02	; 2
    2928:	c4 f0       	brlt	.+48     	; 0x295a <itoa+0x3a>
    292a:	45 32       	cpi	r20, 0x25	; 37
    292c:	b4 f4       	brge	.+44     	; 0x295a <itoa+0x3a>
    292e:	4a 30       	cpi	r20, 0x0A	; 10
    2930:	29 f4       	brne	.+10     	; 0x293c <itoa+0x1c>
    2932:	97 fb       	bst	r25, 7
    2934:	1e f4       	brtc	.+6      	; 0x293c <itoa+0x1c>
    2936:	90 95       	com	r25
    2938:	81 95       	neg	r24
    293a:	9f 4f       	sbci	r25, 0xFF	; 255
    293c:	64 2f       	mov	r22, r20
    293e:	77 27       	eor	r23, r23
    2940:	0e 94 c1 14 	call	0x2982	; 0x2982 <__udivmodhi4>
    2944:	80 5d       	subi	r24, 0xD0	; 208
    2946:	8a 33       	cpi	r24, 0x3A	; 58
    2948:	0c f0       	brlt	.+2      	; 0x294c <itoa+0x2c>
    294a:	89 5d       	subi	r24, 0xD9	; 217
    294c:	81 93       	st	Z+, r24
    294e:	cb 01       	movw	r24, r22
    2950:	00 97       	sbiw	r24, 0x00	; 0
    2952:	a1 f7       	brne	.-24     	; 0x293c <itoa+0x1c>
    2954:	16 f4       	brtc	.+4      	; 0x295a <itoa+0x3a>
    2956:	5d e2       	ldi	r21, 0x2D	; 45
    2958:	51 93       	st	Z+, r21
    295a:	10 82       	st	Z, r1
    295c:	c9 01       	movw	r24, r18
    295e:	0c 94 b1 14 	jmp	0x2962	; 0x2962 <strrev>

00002962 <strrev>:
    2962:	dc 01       	movw	r26, r24
    2964:	fc 01       	movw	r30, r24
    2966:	67 2f       	mov	r22, r23
    2968:	71 91       	ld	r23, Z+
    296a:	77 23       	and	r23, r23
    296c:	e1 f7       	brne	.-8      	; 0x2966 <strrev+0x4>
    296e:	32 97       	sbiw	r30, 0x02	; 2
    2970:	04 c0       	rjmp	.+8      	; 0x297a <strrev+0x18>
    2972:	7c 91       	ld	r23, X
    2974:	6d 93       	st	X+, r22
    2976:	70 83       	st	Z, r23
    2978:	62 91       	ld	r22, -Z
    297a:	ae 17       	cp	r26, r30
    297c:	bf 07       	cpc	r27, r31
    297e:	c8 f3       	brcs	.-14     	; 0x2972 <strrev+0x10>
    2980:	08 95       	ret

00002982 <__udivmodhi4>:
    2982:	aa 1b       	sub	r26, r26
    2984:	bb 1b       	sub	r27, r27
    2986:	51 e1       	ldi	r21, 0x11	; 17
    2988:	07 c0       	rjmp	.+14     	; 0x2998 <__udivmodhi4_ep>

0000298a <__udivmodhi4_loop>:
    298a:	aa 1f       	adc	r26, r26
    298c:	bb 1f       	adc	r27, r27
    298e:	a6 17       	cp	r26, r22
    2990:	b7 07       	cpc	r27, r23
    2992:	10 f0       	brcs	.+4      	; 0x2998 <__udivmodhi4_ep>
    2994:	a6 1b       	sub	r26, r22
    2996:	b7 0b       	sbc	r27, r23

00002998 <__udivmodhi4_ep>:
    2998:	88 1f       	adc	r24, r24
    299a:	99 1f       	adc	r25, r25
    299c:	5a 95       	dec	r21
    299e:	a9 f7       	brne	.-22     	; 0x298a <__udivmodhi4_loop>
    29a0:	80 95       	com	r24
    29a2:	90 95       	com	r25
    29a4:	bc 01       	movw	r22, r24
    29a6:	cd 01       	movw	r24, r26
    29a8:	08 95       	ret

000029aa <_exit>:
    29aa:	f8 94       	cli

000029ac <__stop_program>:
    29ac:	ff cf       	rjmp	.-2      	; 0x29ac <__stop_program>
