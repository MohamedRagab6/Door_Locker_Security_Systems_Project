
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f2  00800060  00002d94  00002e28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800152  00800152  00002f1a  2**0
                  ALLOC
  3 .stab         00002d9c  00000000  00000000  00002f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001238  00000000  00000000  00005cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007030  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000071a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008de9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000aa84  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000abe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ae71  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b63f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 3a 14 	jmp	0x2874	; 0x2874 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e9       	ldi	r30, 0x94	; 148
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 35       	cpi	r26, 0x52	; 82
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e5       	ldi	r26, 0x52	; 82
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 35       	cpi	r26, 0x5B	; 91
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6d 11 	call	0x22da	; 0x22da <main>
      8a:	0c 94 c8 16 	jmp	0x2d90	; 0x2d90 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4c 16 	jmp	0x2c98	; 0x2c98 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e3       	ldi	r26, 0x3F	; 63
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 68 16 	jmp	0x2cd0	; 0x2cd0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 58 16 	jmp	0x2cb0	; 0x2cb0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 74 16 	jmp	0x2ce8	; 0x2ce8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 58 16 	jmp	0x2cb0	; 0x2cb0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 74 16 	jmp	0x2ce8	; 0x2ce8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4c 16 	jmp	0x2c98	; 0x2c98 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8f e3       	ldi	r24, 0x3F	; 63
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 68 16 	jmp	0x2cd0	; 0x2cd0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 58 16 	jmp	0x2cb0	; 0x2cb0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 74 16 	jmp	0x2ce8	; 0x2ce8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 58 16 	jmp	0x2cb0	; 0x2cb0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 74 16 	jmp	0x2ce8	; 0x2ce8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 58 16 	jmp	0x2cb0	; 0x2cb0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 74 16 	jmp	0x2ce8	; 0x2ce8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 5c 16 	jmp	0x2cb8	; 0x2cb8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 78 16 	jmp	0x2cf0	; 0x2cf0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <displayWelcomeString>:

/*Description:
 * a function to display the first string that asks the user to enter their new password
 */
void displayWelcomeString(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     b4e:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_clearScreen>
	LCD_moveCursor(0,0);
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	0e 94 e5 10 	call	0x21ca	; 0x21ca <LCD_moveCursor>
	LCD_displayString("please enter new");
     b5a:	80 e6       	ldi	r24, 0x60	; 96
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	0e 94 bc 10 	call	0x2178	; 0x2178 <LCD_displayString>
	LCD_moveCursor(1,0);
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	0e 94 e5 10 	call	0x21ca	; 0x21ca <LCD_moveCursor>
	LCD_displayString("pass:");
     b6a:	81 e7       	ldi	r24, 0x71	; 113
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	0e 94 bc 10 	call	0x2178	; 0x2178 <LCD_displayString>
}
     b72:	cf 91       	pop	r28
     b74:	df 91       	pop	r29
     b76:	08 95       	ret

00000b78 <displayRepeatPasswordString>:
/*Description:
 * a function to display a string that asks the user
 * to repeat their password so that we can check if the password is correct
 */
void displayRepeatPasswordString(void)
{
     b78:	df 93       	push	r29
     b7a:	cf 93       	push	r28
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     b80:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_clearScreen>
	LCD_moveCursor(0,0);
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	60 e0       	ldi	r22, 0x00	; 0
     b88:	0e 94 e5 10 	call	0x21ca	; 0x21ca <LCD_moveCursor>
	LCD_displayString("please re-enter ");
     b8c:	87 e7       	ldi	r24, 0x77	; 119
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	0e 94 bc 10 	call	0x2178	; 0x2178 <LCD_displayString>
	LCD_moveCursor(1,0);
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	60 e0       	ldi	r22, 0x00	; 0
     b98:	0e 94 e5 10 	call	0x21ca	; 0x21ca <LCD_moveCursor>
	LCD_displayString("pass:");
     b9c:	81 e7       	ldi	r24, 0x71	; 113
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 bc 10 	call	0x2178	; 0x2178 <LCD_displayString>
}
     ba4:	cf 91       	pop	r28
     ba6:	df 91       	pop	r29
     ba8:	08 95       	ret

00000baa <displayMainOptionsEnterPass>:
/*Description:
 * a function to display string that asks the user to enter their existing password
 */
void displayMainOptionsEnterPass(void)
{
     baa:	df 93       	push	r29
     bac:	cf 93       	push	r28
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     bb2:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_clearScreen>
	LCD_moveCursor(0,0);
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	60 e0       	ldi	r22, 0x00	; 0
     bba:	0e 94 e5 10 	call	0x21ca	; 0x21ca <LCD_moveCursor>
	LCD_displayString("please enter your");
     bbe:	88 e8       	ldi	r24, 0x88	; 136
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	0e 94 bc 10 	call	0x2178	; 0x2178 <LCD_displayString>
	LCD_moveCursor(1,0);
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	0e 94 e5 10 	call	0x21ca	; 0x21ca <LCD_moveCursor>
	LCD_displayString("pass:");
     bce:	81 e7       	ldi	r24, 0x71	; 113
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	0e 94 bc 10 	call	0x2178	; 0x2178 <LCD_displayString>
}
     bd6:	cf 91       	pop	r28
     bd8:	df 91       	pop	r29
     bda:	08 95       	ret

00000bdc <displayMainOptions>:
/*Description:
 * a function to display main options in LCD
 */
void displayMainOptions(void)
{
     bdc:	df 93       	push	r29
     bde:	cf 93       	push	r28
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     be4:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_clearScreen>
	LCD_moveCursor(0,0);
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	0e 94 e5 10 	call	0x21ca	; 0x21ca <LCD_moveCursor>
	LCD_displayString("+: open door");
     bf0:	8a e9       	ldi	r24, 0x9A	; 154
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	0e 94 bc 10 	call	0x2178	; 0x2178 <LCD_displayString>
	LCD_moveCursor(1,0);
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	60 e0       	ldi	r22, 0x00	; 0
     bfc:	0e 94 e5 10 	call	0x21ca	; 0x21ca <LCD_moveCursor>
	LCD_displayString("-: change pass");
     c00:	87 ea       	ldi	r24, 0xA7	; 167
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 bc 10 	call	0x2178	; 0x2178 <LCD_displayString>
}
     c08:	cf 91       	pop	r28
     c0a:	df 91       	pop	r29
     c0c:	08 95       	ret

00000c0e <displayPasswordOnKeypad>:
/*Description:
 * a function that is responsible for taking password from keypad and storing it in an array
 */
void displayPasswordOnKeypad(void)
{
     c0e:	df 93       	push	r29
     c10:	cf 93       	push	r28
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
     c16:	6e 97       	sbiw	r28, 0x1e	; 30
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	f8 94       	cli
     c1c:	de bf       	out	0x3e, r29	; 62
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	cd bf       	out	0x3d, r28	; 61
	uint8 key;
	LCD_moveCursor(1,5);
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	65 e0       	ldi	r22, 0x05	; 5
     c26:	0e 94 e5 10 	call	0x21ca	; 0x21ca <LCD_moveCursor>

	for(uint8 i = 0 ; i < SIZE_OF_PASSWORD; i++)
     c2a:	1d 8e       	std	Y+29, r1	; 0x1d
     c2c:	82 c0       	rjmp	.+260    	; 0xd32 <displayPasswordOnKeypad+0x124>
	{
		key = KEYPAD_getPressedKey();
     c2e:	0e 94 40 0b 	call	0x1680	; 0x1680 <KEYPAD_getPressedKey>
     c32:	8e 8f       	std	Y+30, r24	; 0x1e

		if((key >= 0) && (key  <= 9))
     c34:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c36:	8a 30       	cpi	r24, 0x0A	; 10
     c38:	08 f0       	brcs	.+2      	; 0xc3c <displayPasswordOnKeypad+0x2e>
     c3a:	78 c0       	rjmp	.+240    	; 0xd2c <displayPasswordOnKeypad+0x11e>
		{
			UART_sendByte(key);
     c3c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c3e:	0e 94 98 15 	call	0x2b30	; 0x2b30 <UART_sendByte>
			LCD_displayCharacter('*');
     c42:	8a e2       	ldi	r24, 0x2A	; 42
     c44:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <LCD_displayCharacter>
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	aa ef       	ldi	r26, 0xFA	; 250
     c4e:	b3 e4       	ldi	r27, 0x43	; 67
     c50:	89 8f       	std	Y+25, r24	; 0x19
     c52:	9a 8f       	std	Y+26, r25	; 0x1a
     c54:	ab 8f       	std	Y+27, r26	; 0x1b
     c56:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c58:	69 8d       	ldd	r22, Y+25	; 0x19
     c5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	4a e7       	ldi	r20, 0x7A	; 122
     c66:	53 e4       	ldi	r21, 0x43	; 67
     c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c6c:	dc 01       	movw	r26, r24
     c6e:	cb 01       	movw	r24, r22
     c70:	8d 8b       	std	Y+21, r24	; 0x15
     c72:	9e 8b       	std	Y+22, r25	; 0x16
     c74:	af 8b       	std	Y+23, r26	; 0x17
     c76:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c78:	6d 89       	ldd	r22, Y+21	; 0x15
     c7a:	7e 89       	ldd	r23, Y+22	; 0x16
     c7c:	8f 89       	ldd	r24, Y+23	; 0x17
     c7e:	98 8d       	ldd	r25, Y+24	; 0x18
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	40 e8       	ldi	r20, 0x80	; 128
     c86:	5f e3       	ldi	r21, 0x3F	; 63
     c88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c8c:	88 23       	and	r24, r24
     c8e:	2c f4       	brge	.+10     	; 0xc9a <displayPasswordOnKeypad+0x8c>
		__ticks = 1;
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	9c 8b       	std	Y+20, r25	; 0x14
     c96:	8b 8b       	std	Y+19, r24	; 0x13
     c98:	3f c0       	rjmp	.+126    	; 0xd18 <displayPasswordOnKeypad+0x10a>
	else if (__tmp > 65535)
     c9a:	6d 89       	ldd	r22, Y+21	; 0x15
     c9c:	7e 89       	ldd	r23, Y+22	; 0x16
     c9e:	8f 89       	ldd	r24, Y+23	; 0x17
     ca0:	98 8d       	ldd	r25, Y+24	; 0x18
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	3f ef       	ldi	r19, 0xFF	; 255
     ca6:	4f e7       	ldi	r20, 0x7F	; 127
     ca8:	57 e4       	ldi	r21, 0x47	; 71
     caa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cae:	18 16       	cp	r1, r24
     cb0:	4c f5       	brge	.+82     	; 0xd04 <displayPasswordOnKeypad+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cb2:	69 8d       	ldd	r22, Y+25	; 0x19
     cb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	40 e2       	ldi	r20, 0x20	; 32
     cc0:	51 e4       	ldi	r21, 0x41	; 65
     cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cc6:	dc 01       	movw	r26, r24
     cc8:	cb 01       	movw	r24, r22
     cca:	bc 01       	movw	r22, r24
     ccc:	cd 01       	movw	r24, r26
     cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cd2:	dc 01       	movw	r26, r24
     cd4:	cb 01       	movw	r24, r22
     cd6:	9c 8b       	std	Y+20, r25	; 0x14
     cd8:	8b 8b       	std	Y+19, r24	; 0x13
     cda:	0f c0       	rjmp	.+30     	; 0xcfa <displayPasswordOnKeypad+0xec>
     cdc:	89 e1       	ldi	r24, 0x19	; 25
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	9a 8b       	std	Y+18, r25	; 0x12
     ce2:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ce4:	89 89       	ldd	r24, Y+17	; 0x11
     ce6:	9a 89       	ldd	r25, Y+18	; 0x12
     ce8:	01 97       	sbiw	r24, 0x01	; 1
     cea:	f1 f7       	brne	.-4      	; 0xce8 <displayPasswordOnKeypad+0xda>
     cec:	9a 8b       	std	Y+18, r25	; 0x12
     cee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cf0:	8b 89       	ldd	r24, Y+19	; 0x13
     cf2:	9c 89       	ldd	r25, Y+20	; 0x14
     cf4:	01 97       	sbiw	r24, 0x01	; 1
     cf6:	9c 8b       	std	Y+20, r25	; 0x14
     cf8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cfa:	8b 89       	ldd	r24, Y+19	; 0x13
     cfc:	9c 89       	ldd	r25, Y+20	; 0x14
     cfe:	00 97       	sbiw	r24, 0x00	; 0
     d00:	69 f7       	brne	.-38     	; 0xcdc <displayPasswordOnKeypad+0xce>
     d02:	14 c0       	rjmp	.+40     	; 0xd2c <displayPasswordOnKeypad+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d04:	6d 89       	ldd	r22, Y+21	; 0x15
     d06:	7e 89       	ldd	r23, Y+22	; 0x16
     d08:	8f 89       	ldd	r24, Y+23	; 0x17
     d0a:	98 8d       	ldd	r25, Y+24	; 0x18
     d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d10:	dc 01       	movw	r26, r24
     d12:	cb 01       	movw	r24, r22
     d14:	9c 8b       	std	Y+20, r25	; 0x14
     d16:	8b 8b       	std	Y+19, r24	; 0x13
     d18:	8b 89       	ldd	r24, Y+19	; 0x13
     d1a:	9c 89       	ldd	r25, Y+20	; 0x14
     d1c:	98 8b       	std	Y+16, r25	; 0x10
     d1e:	8f 87       	std	Y+15, r24	; 0x0f
     d20:	8f 85       	ldd	r24, Y+15	; 0x0f
     d22:	98 89       	ldd	r25, Y+16	; 0x10
     d24:	01 97       	sbiw	r24, 0x01	; 1
     d26:	f1 f7       	brne	.-4      	; 0xd24 <displayPasswordOnKeypad+0x116>
     d28:	98 8b       	std	Y+16, r25	; 0x10
     d2a:	8f 87       	std	Y+15, r24	; 0x0f
void displayPasswordOnKeypad(void)
{
	uint8 key;
	LCD_moveCursor(1,5);

	for(uint8 i = 0 ; i < SIZE_OF_PASSWORD; i++)
     d2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d2e:	8f 5f       	subi	r24, 0xFF	; 255
     d30:	8d 8f       	std	Y+29, r24	; 0x1d
     d32:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d34:	85 30       	cpi	r24, 0x05	; 5
     d36:	08 f4       	brcc	.+2      	; 0xd3a <displayPasswordOnKeypad+0x12c>
     d38:	7a cf       	rjmp	.-268    	; 0xc2e <displayPasswordOnKeypad+0x20>
			LCD_displayCharacter('*');
			_delay_ms(500);
		}
	}

	while(KEYPAD_getPressedKey() != '='){};
     d3a:	0e 94 40 0b 	call	0x1680	; 0x1680 <KEYPAD_getPressedKey>
     d3e:	8d 33       	cpi	r24, 0x3D	; 61
     d40:	e1 f7       	brne	.-8      	; 0xd3a <displayPasswordOnKeypad+0x12c>
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	aa ef       	ldi	r26, 0xFA	; 250
     d48:	b3 e4       	ldi	r27, 0x43	; 67
     d4a:	8b 87       	std	Y+11, r24	; 0x0b
     d4c:	9c 87       	std	Y+12, r25	; 0x0c
     d4e:	ad 87       	std	Y+13, r26	; 0x0d
     d50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d52:	6b 85       	ldd	r22, Y+11	; 0x0b
     d54:	7c 85       	ldd	r23, Y+12	; 0x0c
     d56:	8d 85       	ldd	r24, Y+13	; 0x0d
     d58:	9e 85       	ldd	r25, Y+14	; 0x0e
     d5a:	20 e0       	ldi	r18, 0x00	; 0
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	4a e7       	ldi	r20, 0x7A	; 122
     d60:	53 e4       	ldi	r21, 0x43	; 67
     d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d66:	dc 01       	movw	r26, r24
     d68:	cb 01       	movw	r24, r22
     d6a:	8f 83       	std	Y+7, r24	; 0x07
     d6c:	98 87       	std	Y+8, r25	; 0x08
     d6e:	a9 87       	std	Y+9, r26	; 0x09
     d70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d72:	6f 81       	ldd	r22, Y+7	; 0x07
     d74:	78 85       	ldd	r23, Y+8	; 0x08
     d76:	89 85       	ldd	r24, Y+9	; 0x09
     d78:	9a 85       	ldd	r25, Y+10	; 0x0a
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	40 e8       	ldi	r20, 0x80	; 128
     d80:	5f e3       	ldi	r21, 0x3F	; 63
     d82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d86:	88 23       	and	r24, r24
     d88:	2c f4       	brge	.+10     	; 0xd94 <displayPasswordOnKeypad+0x186>
		__ticks = 1;
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	9e 83       	std	Y+6, r25	; 0x06
     d90:	8d 83       	std	Y+5, r24	; 0x05
     d92:	3f c0       	rjmp	.+126    	; 0xe12 <displayPasswordOnKeypad+0x204>
	else if (__tmp > 65535)
     d94:	6f 81       	ldd	r22, Y+7	; 0x07
     d96:	78 85       	ldd	r23, Y+8	; 0x08
     d98:	89 85       	ldd	r24, Y+9	; 0x09
     d9a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	3f ef       	ldi	r19, 0xFF	; 255
     da0:	4f e7       	ldi	r20, 0x7F	; 127
     da2:	57 e4       	ldi	r21, 0x47	; 71
     da4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     da8:	18 16       	cp	r1, r24
     daa:	4c f5       	brge	.+82     	; 0xdfe <displayPasswordOnKeypad+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dac:	6b 85       	ldd	r22, Y+11	; 0x0b
     dae:	7c 85       	ldd	r23, Y+12	; 0x0c
     db0:	8d 85       	ldd	r24, Y+13	; 0x0d
     db2:	9e 85       	ldd	r25, Y+14	; 0x0e
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	40 e2       	ldi	r20, 0x20	; 32
     dba:	51 e4       	ldi	r21, 0x41	; 65
     dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc0:	dc 01       	movw	r26, r24
     dc2:	cb 01       	movw	r24, r22
     dc4:	bc 01       	movw	r22, r24
     dc6:	cd 01       	movw	r24, r26
     dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dcc:	dc 01       	movw	r26, r24
     dce:	cb 01       	movw	r24, r22
     dd0:	9e 83       	std	Y+6, r25	; 0x06
     dd2:	8d 83       	std	Y+5, r24	; 0x05
     dd4:	0f c0       	rjmp	.+30     	; 0xdf4 <displayPasswordOnKeypad+0x1e6>
     dd6:	89 e1       	ldi	r24, 0x19	; 25
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	9c 83       	std	Y+4, r25	; 0x04
     ddc:	8b 83       	std	Y+3, r24	; 0x03
     dde:	8b 81       	ldd	r24, Y+3	; 0x03
     de0:	9c 81       	ldd	r25, Y+4	; 0x04
     de2:	01 97       	sbiw	r24, 0x01	; 1
     de4:	f1 f7       	brne	.-4      	; 0xde2 <displayPasswordOnKeypad+0x1d4>
     de6:	9c 83       	std	Y+4, r25	; 0x04
     de8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dea:	8d 81       	ldd	r24, Y+5	; 0x05
     dec:	9e 81       	ldd	r25, Y+6	; 0x06
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	9e 83       	std	Y+6, r25	; 0x06
     df2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df4:	8d 81       	ldd	r24, Y+5	; 0x05
     df6:	9e 81       	ldd	r25, Y+6	; 0x06
     df8:	00 97       	sbiw	r24, 0x00	; 0
     dfa:	69 f7       	brne	.-38     	; 0xdd6 <displayPasswordOnKeypad+0x1c8>
     dfc:	14 c0       	rjmp	.+40     	; 0xe26 <displayPasswordOnKeypad+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dfe:	6f 81       	ldd	r22, Y+7	; 0x07
     e00:	78 85       	ldd	r23, Y+8	; 0x08
     e02:	89 85       	ldd	r24, Y+9	; 0x09
     e04:	9a 85       	ldd	r25, Y+10	; 0x0a
     e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e0a:	dc 01       	movw	r26, r24
     e0c:	cb 01       	movw	r24, r22
     e0e:	9e 83       	std	Y+6, r25	; 0x06
     e10:	8d 83       	std	Y+5, r24	; 0x05
     e12:	8d 81       	ldd	r24, Y+5	; 0x05
     e14:	9e 81       	ldd	r25, Y+6	; 0x06
     e16:	9a 83       	std	Y+2, r25	; 0x02
     e18:	89 83       	std	Y+1, r24	; 0x01
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	9a 81       	ldd	r25, Y+2	; 0x02
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	f1 f7       	brne	.-4      	; 0xe1e <displayPasswordOnKeypad+0x210>
     e22:	9a 83       	std	Y+2, r25	; 0x02
     e24:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(500);

}
     e26:	6e 96       	adiw	r28, 0x1e	; 30
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
     e32:	cf 91       	pop	r28
     e34:	df 91       	pop	r29
     e36:	08 95       	ret

00000e38 <LockDoorCallBack>:

/*Description:
 * call back function for display locking door for 15 seconds
 */
void LockDoorCallBack (void)
{
     e38:	df 93       	push	r29
     e3a:	cf 93       	push	r28
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
	g_count++ ;
     e40:	80 91 52 01 	lds	r24, 0x0152
     e44:	8f 5f       	subi	r24, 0xFF	; 255
     e46:	80 93 52 01 	sts	0x0152, r24
	/* the time should be 15 seconds but made it 5 seconds for simulation*/
	if(g_count == (32 * 5)) {
     e4a:	80 91 52 01 	lds	r24, 0x0152
     e4e:	80 3a       	cpi	r24, 0xA0	; 160
     e50:	49 f4       	brne	.+18     	; 0xe64 <LockDoorCallBack+0x2c>
		Timer0_DeInit();
     e52:	0e 94 02 15 	call	0x2a04	; 0x2a04 <Timer0_DeInit>
		LCD_clearScreen();
     e56:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_clearScreen>
		g_count = 0 ;
     e5a:	10 92 52 01 	sts	0x0152, r1
		state = 1;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	80 93 53 01 	sts	0x0153, r24
	}

}
     e64:	cf 91       	pop	r28
     e66:	df 91       	pop	r29
     e68:	08 95       	ret

00000e6a <pauseCallBack>:
/*Description:
 * call back function for display holding motor string for 3 seconds and then display door is locking string
 */
void pauseCallBack (void)
{
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
	g_count++ ;
     e72:	80 91 52 01 	lds	r24, 0x0152
     e76:	8f 5f       	subi	r24, 0xFF	; 255
     e78:	80 93 52 01 	sts	0x0152, r24

	if(g_count == (32*3)) {
     e7c:	80 91 52 01 	lds	r24, 0x0152
     e80:	80 36       	cpi	r24, 0x60	; 96
     e82:	c1 f4       	brne	.+48     	; 0xeb4 <pauseCallBack+0x4a>

		Timer0_DeInit();
     e84:	0e 94 02 15 	call	0x2a04	; 0x2a04 <Timer0_DeInit>
		g_count = 0 ;
     e88:	10 92 52 01 	sts	0x0152, r1
		LCD_clearScreen();
     e8c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_clearScreen>
		LCD_displayStringRowColumn(0 , 0 ,"   Door is  ");
     e90:	26 eb       	ldi	r18, 0xB6	; 182
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	60 e0       	ldi	r22, 0x00	; 0
     e98:	a9 01       	movw	r20, r18
     e9a:	0e 94 27 11 	call	0x224e	; 0x224e <LCD_displayStringRowColumn>
		LCD_moveCursor(1,3);
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	63 e0       	ldi	r22, 0x03	; 3
     ea2:	0e 94 e5 10 	call	0x21ca	; 0x21ca <LCD_moveCursor>
		LCD_displayString("locking !!! ");
     ea6:	83 ec       	ldi	r24, 0xC3	; 195
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	0e 94 bc 10 	call	0x2178	; 0x2178 <LCD_displayString>

		state = 1;
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	80 93 53 01 	sts	0x0153, r24

	}
}
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <unlockDoorCallBack>:
/*Description:
 * a call back function to unlock door string for 15 secs then after then 15 secs door is open string will
 * be displayed
 */
void unlockDoorCallBack(void) {
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
	g_count++ ;
     ec2:	80 91 52 01 	lds	r24, 0x0152
     ec6:	8f 5f       	subi	r24, 0xFF	; 255
     ec8:	80 93 52 01 	sts	0x0152, r24
	/* the time should be 15 seconds but made it 5 seconds for simulation*/
	if(g_count == (32*5)) {
     ecc:	80 91 52 01 	lds	r24, 0x0152
     ed0:	80 3a       	cpi	r24, 0xA0	; 160
     ed2:	c1 f4       	brne	.+48     	; 0xf04 <unlockDoorCallBack+0x4a>
		Timer0_DeInit();
     ed4:	0e 94 02 15 	call	0x2a04	; 0x2a04 <Timer0_DeInit>
		LCD_clearScreen();
     ed8:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_clearScreen>
		LCD_displayStringRowColumn(0 , 0 ,"   Door is  ");
     edc:	26 eb       	ldi	r18, 0xB6	; 182
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	a9 01       	movw	r20, r18
     ee6:	0e 94 27 11 	call	0x224e	; 0x224e <LCD_displayStringRowColumn>
		LCD_moveCursor(1,3);
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	63 e0       	ldi	r22, 0x03	; 3
     eee:	0e 94 e5 10 	call	0x21ca	; 0x21ca <LCD_moveCursor>
		LCD_displayString("open !!! ");
     ef2:	80 ed       	ldi	r24, 0xD0	; 208
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	0e 94 bc 10 	call	0x2178	; 0x2178 <LCD_displayString>
		g_count = 0 ;
     efa:	10 92 52 01 	sts	0x0152, r1

		state = 1;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	80 93 53 01 	sts	0x0153, r24



	}

}
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	08 95       	ret

00000f0a <buzzerForBurgularsCallBack>:
/*Description:
 * a call back function for buzzer alarm string for 1 minute
 */
void buzzerForBurgularsCallBack(void)
{
     f0a:	df 93       	push	r29
     f0c:	cf 93       	push	r28
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
	/* the time should be 1 minute but made it 3 seconds for simulation*/
	g_count++ ;
     f12:	80 91 52 01 	lds	r24, 0x0152
     f16:	8f 5f       	subi	r24, 0xFF	; 255
     f18:	80 93 52 01 	sts	0x0152, r24
	if(g_count == 32*3)
     f1c:	80 91 52 01 	lds	r24, 0x0152
     f20:	80 36       	cpi	r24, 0x60	; 96
     f22:	39 f4       	brne	.+14     	; 0xf32 <buzzerForBurgularsCallBack+0x28>
	{
		Timer0_DeInit();
     f24:	0e 94 02 15 	call	0x2a04	; 0x2a04 <Timer0_DeInit>
		g_count = 0 ;
     f28:	10 92 52 01 	sts	0x0152, r1

		state = 1 ;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	80 93 53 01 	sts	0x0153, r24

	}

}
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	08 95       	ret

00000f38 <doorControl>:
/*Description:
 * a function that is responsible for displaying door opening and closing strings in lcd and their timing
 */
void doorControl(void)
{
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     f40:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_clearScreen>
	LCD_displayStringRowColumn(0 , 0 ,"   Door is  ");
     f44:	26 eb       	ldi	r18, 0xB6	; 182
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	60 e0       	ldi	r22, 0x00	; 0
     f4c:	a9 01       	movw	r20, r18
     f4e:	0e 94 27 11 	call	0x224e	; 0x224e <LCD_displayStringRowColumn>
	LCD_moveCursor(1,3);
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	63 e0       	ldi	r22, 0x03	; 3
     f56:	0e 94 e5 10 	call	0x21ca	; 0x21ca <LCD_moveCursor>
	LCD_displayString("unlocking !!! ");
     f5a:	8a ed       	ldi	r24, 0xDA	; 218
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	0e 94 bc 10 	call	0x2178	; 0x2178 <LCD_displayString>

	state = 0;
     f62:	10 92 53 01 	sts	0x0153, r1
	Timer0_setCallBack(unlockDoorCallBack);
     f66:	8d e5       	ldi	r24, 0x5D	; 93
     f68:	97 e0       	ldi	r25, 0x07	; 7
     f6a:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <Timer0_setCallBack>
	Timer0_init(&timer_config);
     f6e:	87 e4       	ldi	r24, 0x47	; 71
     f70:	91 e0       	ldi	r25, 0x01	; 1
     f72:	0e 94 a0 14 	call	0x2940	; 0x2940 <Timer0_init>
	while(state == 0) ;
     f76:	80 91 53 01 	lds	r24, 0x0153
     f7a:	88 23       	and	r24, r24
     f7c:	e1 f3       	breq	.-8      	; 0xf76 <doorControl+0x3e>

	state = 0 ;
     f7e:	10 92 53 01 	sts	0x0153, r1
	Timer0_setCallBack(pauseCallBack);
     f82:	85 e3       	ldi	r24, 0x35	; 53
     f84:	97 e0       	ldi	r25, 0x07	; 7
     f86:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <Timer0_setCallBack>
	Timer0_init(&timer_config);
     f8a:	87 e4       	ldi	r24, 0x47	; 71
     f8c:	91 e0       	ldi	r25, 0x01	; 1
     f8e:	0e 94 a0 14 	call	0x2940	; 0x2940 <Timer0_init>
	while(state == 0) ;
     f92:	80 91 53 01 	lds	r24, 0x0153
     f96:	88 23       	and	r24, r24
     f98:	e1 f3       	breq	.-8      	; 0xf92 <doorControl+0x5a>

	state = 0 ;
     f9a:	10 92 53 01 	sts	0x0153, r1
	Timer0_setCallBack(LockDoorCallBack);
     f9e:	8c e1       	ldi	r24, 0x1C	; 28
     fa0:	97 e0       	ldi	r25, 0x07	; 7
     fa2:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <Timer0_setCallBack>
	Timer0_init(&timer_config);
     fa6:	87 e4       	ldi	r24, 0x47	; 71
     fa8:	91 e0       	ldi	r25, 0x01	; 1
     faa:	0e 94 a0 14 	call	0x2940	; 0x2940 <Timer0_init>
	while(state == 0) ;
     fae:	80 91 53 01 	lds	r24, 0x0153
     fb2:	88 23       	and	r24, r24
     fb4:	e1 f3       	breq	.-8      	; 0xfae <doorControl+0x76>


	LCD_clearScreen();
     fb6:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_clearScreen>
	state = 0;
     fba:	10 92 53 01 	sts	0x0153, r1
}
     fbe:	cf 91       	pop	r28
     fc0:	df 91       	pop	r29
     fc2:	08 95       	ret

00000fc4 <buzzerForBurgulars>:
/*Description:
 * a function that is responsible for displaying buzzer a theif string if the user entered a wrong password
 * for three times.
 */
void buzzerForBurgulars(void)
{
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62

	LCD_clearScreen();
     fcc:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_clearScreen>
	LCD_displayStringRowColumn(0 , 0 ,"theeeeeif!!!");
     fd0:	29 ee       	ldi	r18, 0xE9	; 233
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	a9 01       	movw	r20, r18
     fda:	0e 94 27 11 	call	0x224e	; 0x224e <LCD_displayStringRowColumn>

	Timer0_setCallBack(buzzerForBurgularsCallBack);
     fde:	85 e8       	ldi	r24, 0x85	; 133
     fe0:	97 e0       	ldi	r25, 0x07	; 7
     fe2:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <Timer0_setCallBack>
	Timer0_init(&timer_config);
     fe6:	87 e4       	ldi	r24, 0x47	; 71
     fe8:	91 e0       	ldi	r25, 0x01	; 1
     fea:	0e 94 a0 14 	call	0x2940	; 0x2940 <Timer0_init>
	while(state == 0);
     fee:	80 91 53 01 	lds	r24, 0x0153
     ff2:	88 23       	and	r24, r24
     ff4:	e1 f3       	breq	.-8      	; 0xfee <buzzerForBurgulars+0x2a>

	LCD_clearScreen();
     ff6:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_clearScreen>
	state = 0 ;
     ffa:	10 92 53 01 	sts	0x0153, r1
}
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	00 d0       	rcall	.+0      	; 0x100a <GPIO_setupPinDirection+0x6>
    100a:	00 d0       	rcall	.+0      	; 0x100c <GPIO_setupPinDirection+0x8>
    100c:	0f 92       	push	r0
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	89 83       	std	Y+1, r24	; 0x01
    1014:	6a 83       	std	Y+2, r22	; 0x02
    1016:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	88 30       	cpi	r24, 0x08	; 8
    101c:	08 f0       	brcs	.+2      	; 0x1020 <GPIO_setupPinDirection+0x1c>
    101e:	d5 c0       	rjmp	.+426    	; 0x11ca <GPIO_setupPinDirection+0x1c6>
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	84 30       	cpi	r24, 0x04	; 4
    1024:	08 f0       	brcs	.+2      	; 0x1028 <GPIO_setupPinDirection+0x24>
    1026:	d1 c0       	rjmp	.+418    	; 0x11ca <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	3d 83       	std	Y+5, r19	; 0x05
    1030:	2c 83       	std	Y+4, r18	; 0x04
    1032:	8c 81       	ldd	r24, Y+4	; 0x04
    1034:	9d 81       	ldd	r25, Y+5	; 0x05
    1036:	81 30       	cpi	r24, 0x01	; 1
    1038:	91 05       	cpc	r25, r1
    103a:	09 f4       	brne	.+2      	; 0x103e <GPIO_setupPinDirection+0x3a>
    103c:	43 c0       	rjmp	.+134    	; 0x10c4 <GPIO_setupPinDirection+0xc0>
    103e:	2c 81       	ldd	r18, Y+4	; 0x04
    1040:	3d 81       	ldd	r19, Y+5	; 0x05
    1042:	22 30       	cpi	r18, 0x02	; 2
    1044:	31 05       	cpc	r19, r1
    1046:	2c f4       	brge	.+10     	; 0x1052 <GPIO_setupPinDirection+0x4e>
    1048:	8c 81       	ldd	r24, Y+4	; 0x04
    104a:	9d 81       	ldd	r25, Y+5	; 0x05
    104c:	00 97       	sbiw	r24, 0x00	; 0
    104e:	71 f0       	breq	.+28     	; 0x106c <GPIO_setupPinDirection+0x68>
    1050:	bc c0       	rjmp	.+376    	; 0x11ca <GPIO_setupPinDirection+0x1c6>
    1052:	2c 81       	ldd	r18, Y+4	; 0x04
    1054:	3d 81       	ldd	r19, Y+5	; 0x05
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	09 f4       	brne	.+2      	; 0x105e <GPIO_setupPinDirection+0x5a>
    105c:	5f c0       	rjmp	.+190    	; 0x111c <GPIO_setupPinDirection+0x118>
    105e:	8c 81       	ldd	r24, Y+4	; 0x04
    1060:	9d 81       	ldd	r25, Y+5	; 0x05
    1062:	83 30       	cpi	r24, 0x03	; 3
    1064:	91 05       	cpc	r25, r1
    1066:	09 f4       	brne	.+2      	; 0x106a <GPIO_setupPinDirection+0x66>
    1068:	85 c0       	rjmp	.+266    	; 0x1174 <GPIO_setupPinDirection+0x170>
    106a:	af c0       	rjmp	.+350    	; 0x11ca <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	a1 f4       	brne	.+40     	; 0x109a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1072:	aa e3       	ldi	r26, 0x3A	; 58
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	ea e3       	ldi	r30, 0x3A	; 58
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 2e       	mov	r0, r18
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <GPIO_setupPinDirection+0x8c>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	0a 94       	dec	r0
    1092:	e2 f7       	brpl	.-8      	; 0x108c <GPIO_setupPinDirection+0x88>
    1094:	84 2b       	or	r24, r20
    1096:	8c 93       	st	X, r24
    1098:	98 c0       	rjmp	.+304    	; 0x11ca <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    109a:	aa e3       	ldi	r26, 0x3A	; 58
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	ea e3       	ldi	r30, 0x3A	; 58
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	48 2f       	mov	r20, r24
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	02 2e       	mov	r0, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <GPIO_setupPinDirection+0xb4>
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	0a 94       	dec	r0
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <GPIO_setupPinDirection+0xb0>
    10bc:	80 95       	com	r24
    10be:	84 23       	and	r24, r20
    10c0:	8c 93       	st	X, r24
    10c2:	83 c0       	rjmp	.+262    	; 0x11ca <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	a1 f4       	brne	.+40     	; 0x10f2 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    10ca:	a7 e3       	ldi	r26, 0x37	; 55
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e7 e3       	ldi	r30, 0x37	; 55
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	48 2f       	mov	r20, r24
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	02 2e       	mov	r0, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <GPIO_setupPinDirection+0xe4>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	0a 94       	dec	r0
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <GPIO_setupPinDirection+0xe0>
    10ec:	84 2b       	or	r24, r20
    10ee:	8c 93       	st	X, r24
    10f0:	6c c0       	rjmp	.+216    	; 0x11ca <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    10f2:	a7 e3       	ldi	r26, 0x37	; 55
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e7 e3       	ldi	r30, 0x37	; 55
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	48 2f       	mov	r20, r24
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	02 2e       	mov	r0, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <GPIO_setupPinDirection+0x10c>
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	0a 94       	dec	r0
    1112:	e2 f7       	brpl	.-8      	; 0x110c <GPIO_setupPinDirection+0x108>
    1114:	80 95       	com	r24
    1116:	84 23       	and	r24, r20
    1118:	8c 93       	st	X, r24
    111a:	57 c0       	rjmp	.+174    	; 0x11ca <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	81 30       	cpi	r24, 0x01	; 1
    1120:	a1 f4       	brne	.+40     	; 0x114a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1122:	a4 e3       	ldi	r26, 0x34	; 52
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	e4 e3       	ldi	r30, 0x34	; 52
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	48 2f       	mov	r20, r24
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	02 2e       	mov	r0, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <GPIO_setupPinDirection+0x13c>
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	0a 94       	dec	r0
    1142:	e2 f7       	brpl	.-8      	; 0x113c <GPIO_setupPinDirection+0x138>
    1144:	84 2b       	or	r24, r20
    1146:	8c 93       	st	X, r24
    1148:	40 c0       	rjmp	.+128    	; 0x11ca <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    114a:	a4 e3       	ldi	r26, 0x34	; 52
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e4 e3       	ldi	r30, 0x34	; 52
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	48 2f       	mov	r20, r24
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	02 2e       	mov	r0, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <GPIO_setupPinDirection+0x164>
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	0a 94       	dec	r0
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <GPIO_setupPinDirection+0x160>
    116c:	80 95       	com	r24
    116e:	84 23       	and	r24, r20
    1170:	8c 93       	st	X, r24
    1172:	2b c0       	rjmp	.+86     	; 0x11ca <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	a1 f4       	brne	.+40     	; 0x11a2 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    117a:	a1 e3       	ldi	r26, 0x31	; 49
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e1 e3       	ldi	r30, 0x31	; 49
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	48 2f       	mov	r20, r24
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	02 2e       	mov	r0, r18
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <GPIO_setupPinDirection+0x194>
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	0a 94       	dec	r0
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <GPIO_setupPinDirection+0x190>
    119c:	84 2b       	or	r24, r20
    119e:	8c 93       	st	X, r24
    11a0:	14 c0       	rjmp	.+40     	; 0x11ca <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    11a2:	a1 e3       	ldi	r26, 0x31	; 49
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e1 e3       	ldi	r30, 0x31	; 49
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	48 2f       	mov	r20, r24
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	02 2e       	mov	r0, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <GPIO_setupPinDirection+0x1bc>
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	0a 94       	dec	r0
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <GPIO_setupPinDirection+0x1b8>
    11c4:	80 95       	com	r24
    11c6:	84 23       	and	r24, r20
    11c8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <GPIO_writePin+0x6>
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <GPIO_writePin+0x8>
    11e2:	0f 92       	push	r0
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	89 83       	std	Y+1, r24	; 0x01
    11ea:	6a 83       	std	Y+2, r22	; 0x02
    11ec:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	88 30       	cpi	r24, 0x08	; 8
    11f2:	08 f0       	brcs	.+2      	; 0x11f6 <GPIO_writePin+0x1c>
    11f4:	d5 c0       	rjmp	.+426    	; 0x13a0 <GPIO_writePin+0x1c6>
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	84 30       	cpi	r24, 0x04	; 4
    11fa:	08 f0       	brcs	.+2      	; 0x11fe <GPIO_writePin+0x24>
    11fc:	d1 c0       	rjmp	.+418    	; 0x13a0 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	3d 83       	std	Y+5, r19	; 0x05
    1206:	2c 83       	std	Y+4, r18	; 0x04
    1208:	8c 81       	ldd	r24, Y+4	; 0x04
    120a:	9d 81       	ldd	r25, Y+5	; 0x05
    120c:	81 30       	cpi	r24, 0x01	; 1
    120e:	91 05       	cpc	r25, r1
    1210:	09 f4       	brne	.+2      	; 0x1214 <GPIO_writePin+0x3a>
    1212:	43 c0       	rjmp	.+134    	; 0x129a <GPIO_writePin+0xc0>
    1214:	2c 81       	ldd	r18, Y+4	; 0x04
    1216:	3d 81       	ldd	r19, Y+5	; 0x05
    1218:	22 30       	cpi	r18, 0x02	; 2
    121a:	31 05       	cpc	r19, r1
    121c:	2c f4       	brge	.+10     	; 0x1228 <GPIO_writePin+0x4e>
    121e:	8c 81       	ldd	r24, Y+4	; 0x04
    1220:	9d 81       	ldd	r25, Y+5	; 0x05
    1222:	00 97       	sbiw	r24, 0x00	; 0
    1224:	71 f0       	breq	.+28     	; 0x1242 <GPIO_writePin+0x68>
    1226:	bc c0       	rjmp	.+376    	; 0x13a0 <GPIO_writePin+0x1c6>
    1228:	2c 81       	ldd	r18, Y+4	; 0x04
    122a:	3d 81       	ldd	r19, Y+5	; 0x05
    122c:	22 30       	cpi	r18, 0x02	; 2
    122e:	31 05       	cpc	r19, r1
    1230:	09 f4       	brne	.+2      	; 0x1234 <GPIO_writePin+0x5a>
    1232:	5f c0       	rjmp	.+190    	; 0x12f2 <GPIO_writePin+0x118>
    1234:	8c 81       	ldd	r24, Y+4	; 0x04
    1236:	9d 81       	ldd	r25, Y+5	; 0x05
    1238:	83 30       	cpi	r24, 0x03	; 3
    123a:	91 05       	cpc	r25, r1
    123c:	09 f4       	brne	.+2      	; 0x1240 <GPIO_writePin+0x66>
    123e:	85 c0       	rjmp	.+266    	; 0x134a <GPIO_writePin+0x170>
    1240:	af c0       	rjmp	.+350    	; 0x13a0 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	81 30       	cpi	r24, 0x01	; 1
    1246:	a1 f4       	brne	.+40     	; 0x1270 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1248:	ab e3       	ldi	r26, 0x3B	; 59
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	eb e3       	ldi	r30, 0x3B	; 59
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	48 2f       	mov	r20, r24
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 2e       	mov	r0, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <GPIO_writePin+0x8c>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <GPIO_writePin+0x88>
    126a:	84 2b       	or	r24, r20
    126c:	8c 93       	st	X, r24
    126e:	98 c0       	rjmp	.+304    	; 0x13a0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1270:	ab e3       	ldi	r26, 0x3B	; 59
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	eb e3       	ldi	r30, 0x3B	; 59
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	48 2f       	mov	r20, r24
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	02 2e       	mov	r0, r18
    1288:	02 c0       	rjmp	.+4      	; 0x128e <GPIO_writePin+0xb4>
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	0a 94       	dec	r0
    1290:	e2 f7       	brpl	.-8      	; 0x128a <GPIO_writePin+0xb0>
    1292:	80 95       	com	r24
    1294:	84 23       	and	r24, r20
    1296:	8c 93       	st	X, r24
    1298:	83 c0       	rjmp	.+262    	; 0x13a0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	81 30       	cpi	r24, 0x01	; 1
    129e:	a1 f4       	brne	.+40     	; 0x12c8 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    12a0:	a8 e3       	ldi	r26, 0x38	; 56
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e8 e3       	ldi	r30, 0x38	; 56
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	48 2f       	mov	r20, r24
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	02 2e       	mov	r0, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <GPIO_writePin+0xe4>
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	0a 94       	dec	r0
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <GPIO_writePin+0xe0>
    12c2:	84 2b       	or	r24, r20
    12c4:	8c 93       	st	X, r24
    12c6:	6c c0       	rjmp	.+216    	; 0x13a0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    12c8:	a8 e3       	ldi	r26, 0x38	; 56
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	e8 e3       	ldi	r30, 0x38	; 56
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	48 2f       	mov	r20, r24
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	02 2e       	mov	r0, r18
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <GPIO_writePin+0x10c>
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	0a 94       	dec	r0
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <GPIO_writePin+0x108>
    12ea:	80 95       	com	r24
    12ec:	84 23       	and	r24, r20
    12ee:	8c 93       	st	X, r24
    12f0:	57 c0       	rjmp	.+174    	; 0x13a0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	81 30       	cpi	r24, 0x01	; 1
    12f6:	a1 f4       	brne	.+40     	; 0x1320 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    12f8:	a5 e3       	ldi	r26, 0x35	; 53
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e5 e3       	ldi	r30, 0x35	; 53
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	48 2f       	mov	r20, r24
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	02 2e       	mov	r0, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <GPIO_writePin+0x13c>
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <GPIO_writePin+0x138>
    131a:	84 2b       	or	r24, r20
    131c:	8c 93       	st	X, r24
    131e:	40 c0       	rjmp	.+128    	; 0x13a0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1320:	a5 e3       	ldi	r26, 0x35	; 53
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e5 e3       	ldi	r30, 0x35	; 53
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	48 2f       	mov	r20, r24
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 2e       	mov	r0, r18
    1338:	02 c0       	rjmp	.+4      	; 0x133e <GPIO_writePin+0x164>
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	0a 94       	dec	r0
    1340:	e2 f7       	brpl	.-8      	; 0x133a <GPIO_writePin+0x160>
    1342:	80 95       	com	r24
    1344:	84 23       	and	r24, r20
    1346:	8c 93       	st	X, r24
    1348:	2b c0       	rjmp	.+86     	; 0x13a0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	a1 f4       	brne	.+40     	; 0x1378 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1350:	a2 e3       	ldi	r26, 0x32	; 50
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e2 e3       	ldi	r30, 0x32	; 50
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	48 2f       	mov	r20, r24
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	02 2e       	mov	r0, r18
    1368:	02 c0       	rjmp	.+4      	; 0x136e <GPIO_writePin+0x194>
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	0a 94       	dec	r0
    1370:	e2 f7       	brpl	.-8      	; 0x136a <GPIO_writePin+0x190>
    1372:	84 2b       	or	r24, r20
    1374:	8c 93       	st	X, r24
    1376:	14 c0       	rjmp	.+40     	; 0x13a0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1378:	a2 e3       	ldi	r26, 0x32	; 50
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e2 e3       	ldi	r30, 0x32	; 50
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	48 2f       	mov	r20, r24
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	02 2e       	mov	r0, r18
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <GPIO_writePin+0x1bc>
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	0a 94       	dec	r0
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <GPIO_writePin+0x1b8>
    139a:	80 95       	com	r24
    139c:	84 23       	and	r24, r20
    139e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	cf 91       	pop	r28
    13ac:	df 91       	pop	r29
    13ae:	08 95       	ret

000013b0 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	00 d0       	rcall	.+0      	; 0x13b6 <GPIO_readPin+0x6>
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <GPIO_readPin+0x8>
    13b8:	0f 92       	push	r0
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	8a 83       	std	Y+2, r24	; 0x02
    13c0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    13c2:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	88 30       	cpi	r24, 0x08	; 8
    13c8:	08 f0       	brcs	.+2      	; 0x13cc <GPIO_readPin+0x1c>
    13ca:	84 c0       	rjmp	.+264    	; 0x14d4 <GPIO_readPin+0x124>
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	84 30       	cpi	r24, 0x04	; 4
    13d0:	08 f0       	brcs	.+2      	; 0x13d4 <GPIO_readPin+0x24>
    13d2:	80 c0       	rjmp	.+256    	; 0x14d4 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	3d 83       	std	Y+5, r19	; 0x05
    13dc:	2c 83       	std	Y+4, r18	; 0x04
    13de:	4c 81       	ldd	r20, Y+4	; 0x04
    13e0:	5d 81       	ldd	r21, Y+5	; 0x05
    13e2:	41 30       	cpi	r20, 0x01	; 1
    13e4:	51 05       	cpc	r21, r1
    13e6:	79 f1       	breq	.+94     	; 0x1446 <GPIO_readPin+0x96>
    13e8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ea:	9d 81       	ldd	r25, Y+5	; 0x05
    13ec:	82 30       	cpi	r24, 0x02	; 2
    13ee:	91 05       	cpc	r25, r1
    13f0:	34 f4       	brge	.+12     	; 0x13fe <GPIO_readPin+0x4e>
    13f2:	2c 81       	ldd	r18, Y+4	; 0x04
    13f4:	3d 81       	ldd	r19, Y+5	; 0x05
    13f6:	21 15       	cp	r18, r1
    13f8:	31 05       	cpc	r19, r1
    13fa:	69 f0       	breq	.+26     	; 0x1416 <GPIO_readPin+0x66>
    13fc:	6b c0       	rjmp	.+214    	; 0x14d4 <GPIO_readPin+0x124>
    13fe:	4c 81       	ldd	r20, Y+4	; 0x04
    1400:	5d 81       	ldd	r21, Y+5	; 0x05
    1402:	42 30       	cpi	r20, 0x02	; 2
    1404:	51 05       	cpc	r21, r1
    1406:	b9 f1       	breq	.+110    	; 0x1476 <GPIO_readPin+0xc6>
    1408:	8c 81       	ldd	r24, Y+4	; 0x04
    140a:	9d 81       	ldd	r25, Y+5	; 0x05
    140c:	83 30       	cpi	r24, 0x03	; 3
    140e:	91 05       	cpc	r25, r1
    1410:	09 f4       	brne	.+2      	; 0x1414 <GPIO_readPin+0x64>
    1412:	49 c0       	rjmp	.+146    	; 0x14a6 <GPIO_readPin+0xf6>
    1414:	5f c0       	rjmp	.+190    	; 0x14d4 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1416:	e9 e3       	ldi	r30, 0x39	; 57
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	88 2f       	mov	r24, r24
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	a9 01       	movw	r20, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <GPIO_readPin+0x7e>
    142a:	55 95       	asr	r21
    142c:	47 95       	ror	r20
    142e:	8a 95       	dec	r24
    1430:	e2 f7       	brpl	.-8      	; 0x142a <GPIO_readPin+0x7a>
    1432:	ca 01       	movw	r24, r20
    1434:	81 70       	andi	r24, 0x01	; 1
    1436:	90 70       	andi	r25, 0x00	; 0
    1438:	88 23       	and	r24, r24
    143a:	19 f0       	breq	.+6      	; 0x1442 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	89 83       	std	Y+1, r24	; 0x01
    1440:	49 c0       	rjmp	.+146    	; 0x14d4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1442:	19 82       	std	Y+1, r1	; 0x01
    1444:	47 c0       	rjmp	.+142    	; 0x14d4 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1446:	e6 e3       	ldi	r30, 0x36	; 54
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	88 2f       	mov	r24, r24
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	a9 01       	movw	r20, r18
    1458:	02 c0       	rjmp	.+4      	; 0x145e <GPIO_readPin+0xae>
    145a:	55 95       	asr	r21
    145c:	47 95       	ror	r20
    145e:	8a 95       	dec	r24
    1460:	e2 f7       	brpl	.-8      	; 0x145a <GPIO_readPin+0xaa>
    1462:	ca 01       	movw	r24, r20
    1464:	81 70       	andi	r24, 0x01	; 1
    1466:	90 70       	andi	r25, 0x00	; 0
    1468:	88 23       	and	r24, r24
    146a:	19 f0       	breq	.+6      	; 0x1472 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	89 83       	std	Y+1, r24	; 0x01
    1470:	31 c0       	rjmp	.+98     	; 0x14d4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1472:	19 82       	std	Y+1, r1	; 0x01
    1474:	2f c0       	rjmp	.+94     	; 0x14d4 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1476:	e3 e3       	ldi	r30, 0x33	; 51
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	88 2f       	mov	r24, r24
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	a9 01       	movw	r20, r18
    1488:	02 c0       	rjmp	.+4      	; 0x148e <GPIO_readPin+0xde>
    148a:	55 95       	asr	r21
    148c:	47 95       	ror	r20
    148e:	8a 95       	dec	r24
    1490:	e2 f7       	brpl	.-8      	; 0x148a <GPIO_readPin+0xda>
    1492:	ca 01       	movw	r24, r20
    1494:	81 70       	andi	r24, 0x01	; 1
    1496:	90 70       	andi	r25, 0x00	; 0
    1498:	88 23       	and	r24, r24
    149a:	19 f0       	breq	.+6      	; 0x14a2 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	89 83       	std	Y+1, r24	; 0x01
    14a0:	19 c0       	rjmp	.+50     	; 0x14d4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14a2:	19 82       	std	Y+1, r1	; 0x01
    14a4:	17 c0       	rjmp	.+46     	; 0x14d4 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    14a6:	e0 e3       	ldi	r30, 0x30	; 48
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	88 2f       	mov	r24, r24
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	a9 01       	movw	r20, r18
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <GPIO_readPin+0x10e>
    14ba:	55 95       	asr	r21
    14bc:	47 95       	ror	r20
    14be:	8a 95       	dec	r24
    14c0:	e2 f7       	brpl	.-8      	; 0x14ba <GPIO_readPin+0x10a>
    14c2:	ca 01       	movw	r24, r20
    14c4:	81 70       	andi	r24, 0x01	; 1
    14c6:	90 70       	andi	r25, 0x00	; 0
    14c8:	88 23       	and	r24, r24
    14ca:	19 f0       	breq	.+6      	; 0x14d2 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	89 83       	std	Y+1, r24	; 0x01
    14d0:	01 c0       	rjmp	.+2      	; 0x14d4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14d2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	cf 91       	pop	r28
    14e2:	df 91       	pop	r29
    14e4:	08 95       	ret

000014e6 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    14e6:	df 93       	push	r29
    14e8:	cf 93       	push	r28
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <GPIO_setupPortDirection+0x6>
    14ec:	00 d0       	rcall	.+0      	; 0x14ee <GPIO_setupPortDirection+0x8>
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	89 83       	std	Y+1, r24	; 0x01
    14f4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	84 30       	cpi	r24, 0x04	; 4
    14fa:	90 f5       	brcc	.+100    	; 0x1560 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	3c 83       	std	Y+4, r19	; 0x04
    1504:	2b 83       	std	Y+3, r18	; 0x03
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	9c 81       	ldd	r25, Y+4	; 0x04
    150a:	81 30       	cpi	r24, 0x01	; 1
    150c:	91 05       	cpc	r25, r1
    150e:	d1 f0       	breq	.+52     	; 0x1544 <GPIO_setupPortDirection+0x5e>
    1510:	2b 81       	ldd	r18, Y+3	; 0x03
    1512:	3c 81       	ldd	r19, Y+4	; 0x04
    1514:	22 30       	cpi	r18, 0x02	; 2
    1516:	31 05       	cpc	r19, r1
    1518:	2c f4       	brge	.+10     	; 0x1524 <GPIO_setupPortDirection+0x3e>
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	9c 81       	ldd	r25, Y+4	; 0x04
    151e:	00 97       	sbiw	r24, 0x00	; 0
    1520:	61 f0       	breq	.+24     	; 0x153a <GPIO_setupPortDirection+0x54>
    1522:	1e c0       	rjmp	.+60     	; 0x1560 <GPIO_setupPortDirection+0x7a>
    1524:	2b 81       	ldd	r18, Y+3	; 0x03
    1526:	3c 81       	ldd	r19, Y+4	; 0x04
    1528:	22 30       	cpi	r18, 0x02	; 2
    152a:	31 05       	cpc	r19, r1
    152c:	81 f0       	breq	.+32     	; 0x154e <GPIO_setupPortDirection+0x68>
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	9c 81       	ldd	r25, Y+4	; 0x04
    1532:	83 30       	cpi	r24, 0x03	; 3
    1534:	91 05       	cpc	r25, r1
    1536:	81 f0       	breq	.+32     	; 0x1558 <GPIO_setupPortDirection+0x72>
    1538:	13 c0       	rjmp	.+38     	; 0x1560 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    153a:	ea e3       	ldi	r30, 0x3A	; 58
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	80 83       	st	Z, r24
    1542:	0e c0       	rjmp	.+28     	; 0x1560 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1544:	e7 e3       	ldi	r30, 0x37	; 55
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	80 83       	st	Z, r24
    154c:	09 c0       	rjmp	.+18     	; 0x1560 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    154e:	e4 e3       	ldi	r30, 0x34	; 52
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	80 83       	st	Z, r24
    1556:	04 c0       	rjmp	.+8      	; 0x1560 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1558:	e1 e3       	ldi	r30, 0x31	; 49
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	08 95       	ret

0000156e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	00 d0       	rcall	.+0      	; 0x1574 <GPIO_writePort+0x6>
    1574:	00 d0       	rcall	.+0      	; 0x1576 <GPIO_writePort+0x8>
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	89 83       	std	Y+1, r24	; 0x01
    157c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    157e:	89 81       	ldd	r24, Y+1	; 0x01
    1580:	84 30       	cpi	r24, 0x04	; 4
    1582:	90 f5       	brcc	.+100    	; 0x15e8 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	3c 83       	std	Y+4, r19	; 0x04
    158c:	2b 83       	std	Y+3, r18	; 0x03
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	9c 81       	ldd	r25, Y+4	; 0x04
    1592:	81 30       	cpi	r24, 0x01	; 1
    1594:	91 05       	cpc	r25, r1
    1596:	d1 f0       	breq	.+52     	; 0x15cc <GPIO_writePort+0x5e>
    1598:	2b 81       	ldd	r18, Y+3	; 0x03
    159a:	3c 81       	ldd	r19, Y+4	; 0x04
    159c:	22 30       	cpi	r18, 0x02	; 2
    159e:	31 05       	cpc	r19, r1
    15a0:	2c f4       	brge	.+10     	; 0x15ac <GPIO_writePort+0x3e>
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	9c 81       	ldd	r25, Y+4	; 0x04
    15a6:	00 97       	sbiw	r24, 0x00	; 0
    15a8:	61 f0       	breq	.+24     	; 0x15c2 <GPIO_writePort+0x54>
    15aa:	1e c0       	rjmp	.+60     	; 0x15e8 <GPIO_writePort+0x7a>
    15ac:	2b 81       	ldd	r18, Y+3	; 0x03
    15ae:	3c 81       	ldd	r19, Y+4	; 0x04
    15b0:	22 30       	cpi	r18, 0x02	; 2
    15b2:	31 05       	cpc	r19, r1
    15b4:	81 f0       	breq	.+32     	; 0x15d6 <GPIO_writePort+0x68>
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ba:	83 30       	cpi	r24, 0x03	; 3
    15bc:	91 05       	cpc	r25, r1
    15be:	81 f0       	breq	.+32     	; 0x15e0 <GPIO_writePort+0x72>
    15c0:	13 c0       	rjmp	.+38     	; 0x15e8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    15c2:	eb e3       	ldi	r30, 0x3B	; 59
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	8a 81       	ldd	r24, Y+2	; 0x02
    15c8:	80 83       	st	Z, r24
    15ca:	0e c0       	rjmp	.+28     	; 0x15e8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    15cc:	e8 e3       	ldi	r30, 0x38	; 56
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	80 83       	st	Z, r24
    15d4:	09 c0       	rjmp	.+18     	; 0x15e8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    15d6:	e5 e3       	ldi	r30, 0x35	; 53
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	80 83       	st	Z, r24
    15de:	04 c0       	rjmp	.+8      	; 0x15e8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    15e0:	e2 e3       	ldi	r30, 0x32	; 50
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	80 83       	st	Z, r24
			break;
		}
	}
}
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	00 d0       	rcall	.+0      	; 0x15fc <GPIO_readPort+0x6>
    15fc:	00 d0       	rcall	.+0      	; 0x15fe <GPIO_readPort+0x8>
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1604:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	84 30       	cpi	r24, 0x04	; 4
    160a:	90 f5       	brcc	.+100    	; 0x1670 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	3c 83       	std	Y+4, r19	; 0x04
    1614:	2b 83       	std	Y+3, r18	; 0x03
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	9c 81       	ldd	r25, Y+4	; 0x04
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	91 05       	cpc	r25, r1
    161e:	d1 f0       	breq	.+52     	; 0x1654 <GPIO_readPort+0x5e>
    1620:	2b 81       	ldd	r18, Y+3	; 0x03
    1622:	3c 81       	ldd	r19, Y+4	; 0x04
    1624:	22 30       	cpi	r18, 0x02	; 2
    1626:	31 05       	cpc	r19, r1
    1628:	2c f4       	brge	.+10     	; 0x1634 <GPIO_readPort+0x3e>
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	9c 81       	ldd	r25, Y+4	; 0x04
    162e:	00 97       	sbiw	r24, 0x00	; 0
    1630:	61 f0       	breq	.+24     	; 0x164a <GPIO_readPort+0x54>
    1632:	1e c0       	rjmp	.+60     	; 0x1670 <GPIO_readPort+0x7a>
    1634:	2b 81       	ldd	r18, Y+3	; 0x03
    1636:	3c 81       	ldd	r19, Y+4	; 0x04
    1638:	22 30       	cpi	r18, 0x02	; 2
    163a:	31 05       	cpc	r19, r1
    163c:	81 f0       	breq	.+32     	; 0x165e <GPIO_readPort+0x68>
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	9c 81       	ldd	r25, Y+4	; 0x04
    1642:	83 30       	cpi	r24, 0x03	; 3
    1644:	91 05       	cpc	r25, r1
    1646:	81 f0       	breq	.+32     	; 0x1668 <GPIO_readPort+0x72>
    1648:	13 c0       	rjmp	.+38     	; 0x1670 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    164a:	e9 e3       	ldi	r30, 0x39	; 57
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	0e c0       	rjmp	.+28     	; 0x1670 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1654:	e6 e3       	ldi	r30, 0x36	; 54
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	89 83       	std	Y+1, r24	; 0x01
    165c:	09 c0       	rjmp	.+18     	; 0x1670 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    165e:	e3 e3       	ldi	r30, 0x33	; 51
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	89 83       	std	Y+1, r24	; 0x01
    1666:	04 c0       	rjmp	.+8      	; 0x1670 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1668:	e0 e3       	ldi	r30, 0x30	; 48
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1670:	89 81       	ldd	r24, Y+1	; 0x01
}
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	cf 91       	pop	r28
    167c:	df 91       	pop	r29
    167e:	08 95       	ret

00001680 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1680:	df 93       	push	r29
    1682:	cf 93       	push	r28
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    1688:	61 97       	sbiw	r28, 0x11	; 17
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	f8 94       	cli
    168e:	de bf       	out	0x3e, r29	; 62
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1694:	1f 86       	std	Y+15, r1	; 0x0f
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1696:	19 8a       	std	Y+17, r1	; 0x11
    1698:	b8 c0       	rjmp	.+368    	; 0x180a <KEYPAD_getPressedKey+0x18a>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	60 e0       	ldi	r22, 0x00	; 0
    169e:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    16a2:	89 89       	ldd	r24, Y+17	; 0x11
    16a4:	98 2f       	mov	r25, r24
    16a6:	9c 5f       	subi	r25, 0xFC	; 252
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	69 2f       	mov	r22, r25
    16ac:	41 e0       	ldi	r20, 0x01	; 1
    16ae:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    16b2:	89 89       	ldd	r24, Y+17	; 0x11
    16b4:	88 2f       	mov	r24, r24
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	9c 01       	movw	r18, r24
    16ba:	2c 5f       	subi	r18, 0xFC	; 252
    16bc:	3f 4f       	sbci	r19, 0xFF	; 255
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <KEYPAD_getPressedKey+0x48>
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	2a 95       	dec	r18
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <KEYPAD_getPressedKey+0x44>
    16cc:	80 95       	com	r24
    16ce:	8f 87       	std	Y+15, r24	; 0x0f
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	6f 85       	ldd	r22, Y+15	; 0x0f
    16d4:	0e 94 b7 0a 	call	0x156e	; 0x156e <GPIO_writePort>
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	90 e8       	ldi	r25, 0x80	; 128
    16dc:	ab eb       	ldi	r26, 0xBB	; 187
    16de:	b4 e4       	ldi	r27, 0x44	; 68
    16e0:	8b 87       	std	Y+11, r24	; 0x0b
    16e2:	9c 87       	std	Y+12, r25	; 0x0c
    16e4:	ad 87       	std	Y+13, r26	; 0x0d
    16e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	4a e7       	ldi	r20, 0x7A	; 122
    16f6:	53 e4       	ldi	r21, 0x43	; 67
    16f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	8f 83       	std	Y+7, r24	; 0x07
    1702:	98 87       	std	Y+8, r25	; 0x08
    1704:	a9 87       	std	Y+9, r26	; 0x09
    1706:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1708:	6f 81       	ldd	r22, Y+7	; 0x07
    170a:	78 85       	ldd	r23, Y+8	; 0x08
    170c:	89 85       	ldd	r24, Y+9	; 0x09
    170e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	40 e8       	ldi	r20, 0x80	; 128
    1716:	5f e3       	ldi	r21, 0x3F	; 63
    1718:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    171c:	88 23       	and	r24, r24
    171e:	2c f4       	brge	.+10     	; 0x172a <KEYPAD_getPressedKey+0xaa>
		__ticks = 1;
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	9e 83       	std	Y+6, r25	; 0x06
    1726:	8d 83       	std	Y+5, r24	; 0x05
    1728:	3f c0       	rjmp	.+126    	; 0x17a8 <KEYPAD_getPressedKey+0x128>
	else if (__tmp > 65535)
    172a:	6f 81       	ldd	r22, Y+7	; 0x07
    172c:	78 85       	ldd	r23, Y+8	; 0x08
    172e:	89 85       	ldd	r24, Y+9	; 0x09
    1730:	9a 85       	ldd	r25, Y+10	; 0x0a
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	3f ef       	ldi	r19, 0xFF	; 255
    1736:	4f e7       	ldi	r20, 0x7F	; 127
    1738:	57 e4       	ldi	r21, 0x47	; 71
    173a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    173e:	18 16       	cp	r1, r24
    1740:	4c f5       	brge	.+82     	; 0x1794 <KEYPAD_getPressedKey+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1742:	6b 85       	ldd	r22, Y+11	; 0x0b
    1744:	7c 85       	ldd	r23, Y+12	; 0x0c
    1746:	8d 85       	ldd	r24, Y+13	; 0x0d
    1748:	9e 85       	ldd	r25, Y+14	; 0x0e
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	40 e2       	ldi	r20, 0x20	; 32
    1750:	51 e4       	ldi	r21, 0x41	; 65
    1752:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	bc 01       	movw	r22, r24
    175c:	cd 01       	movw	r24, r26
    175e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	9e 83       	std	Y+6, r25	; 0x06
    1768:	8d 83       	std	Y+5, r24	; 0x05
    176a:	0f c0       	rjmp	.+30     	; 0x178a <KEYPAD_getPressedKey+0x10a>
    176c:	89 e1       	ldi	r24, 0x19	; 25
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	9c 83       	std	Y+4, r25	; 0x04
    1772:	8b 83       	std	Y+3, r24	; 0x03
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	9c 81       	ldd	r25, Y+4	; 0x04
    1778:	01 97       	sbiw	r24, 0x01	; 1
    177a:	f1 f7       	brne	.-4      	; 0x1778 <KEYPAD_getPressedKey+0xf8>
    177c:	9c 83       	std	Y+4, r25	; 0x04
    177e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1780:	8d 81       	ldd	r24, Y+5	; 0x05
    1782:	9e 81       	ldd	r25, Y+6	; 0x06
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	9e 83       	std	Y+6, r25	; 0x06
    1788:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    178a:	8d 81       	ldd	r24, Y+5	; 0x05
    178c:	9e 81       	ldd	r25, Y+6	; 0x06
    178e:	00 97       	sbiw	r24, 0x00	; 0
    1790:	69 f7       	brne	.-38     	; 0x176c <KEYPAD_getPressedKey+0xec>
    1792:	14 c0       	rjmp	.+40     	; 0x17bc <KEYPAD_getPressedKey+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1794:	6f 81       	ldd	r22, Y+7	; 0x07
    1796:	78 85       	ldd	r23, Y+8	; 0x08
    1798:	89 85       	ldd	r24, Y+9	; 0x09
    179a:	9a 85       	ldd	r25, Y+10	; 0x0a
    179c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	9e 83       	std	Y+6, r25	; 0x06
    17a6:	8d 83       	std	Y+5, r24	; 0x05
    17a8:	8d 81       	ldd	r24, Y+5	; 0x05
    17aa:	9e 81       	ldd	r25, Y+6	; 0x06
    17ac:	9a 83       	std	Y+2, r25	; 0x02
    17ae:	89 83       	std	Y+1, r24	; 0x01
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	9a 81       	ldd	r25, Y+2	; 0x02
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	f1 f7       	brne	.-4      	; 0x17b4 <KEYPAD_getPressedKey+0x134>
    17b8:	9a 83       	std	Y+2, r25	; 0x02
    17ba:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1500);
			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    17bc:	18 8a       	std	Y+16, r1	; 0x10
    17be:	1f c0       	rjmp	.+62     	; 0x17fe <KEYPAD_getPressedKey+0x17e>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	68 89       	ldd	r22, Y+16	; 0x10
    17c4:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_readPin>
    17c8:	88 23       	and	r24, r24
    17ca:	b1 f4       	brne	.+44     	; 0x17f8 <KEYPAD_getPressedKey+0x178>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    17cc:	88 89       	ldd	r24, Y+16	; 0x10
    17ce:	88 2f       	mov	r24, r24
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	88 0f       	add	r24, r24
    17d8:	99 1f       	adc	r25, r25
    17da:	98 2f       	mov	r25, r24
    17dc:	89 89       	ldd	r24, Y+17	; 0x11
    17de:	89 0f       	add	r24, r25
    17e0:	8f 5f       	subi	r24, 0xFF	; 255
    17e2:	0e 94 0a 0c 	call	0x1814	; 0x1814 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    17e6:	61 96       	adiw	r28, 0x11	; 17
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	f8 94       	cli
    17ec:	de bf       	out	0x3e, r29	; 62
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	cd bf       	out	0x3d, r28	; 61
    17f2:	cf 91       	pop	r28
    17f4:	df 91       	pop	r29
    17f6:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
			_delay_ms(1500);
			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    17f8:	88 89       	ldd	r24, Y+16	; 0x10
    17fa:	8f 5f       	subi	r24, 0xFF	; 255
    17fc:	88 8b       	std	Y+16, r24	; 0x10
    17fe:	88 89       	ldd	r24, Y+16	; 0x10
    1800:	84 30       	cpi	r24, 0x04	; 4
    1802:	f0 f2       	brcs	.-68     	; 0x17c0 <KEYPAD_getPressedKey+0x140>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1804:	89 89       	ldd	r24, Y+17	; 0x11
    1806:	8f 5f       	subi	r24, 0xFF	; 255
    1808:	89 8b       	std	Y+17, r24	; 0x11
    180a:	89 89       	ldd	r24, Y+17	; 0x11
    180c:	84 30       	cpi	r24, 0x04	; 4
    180e:	08 f4       	brcc	.+2      	; 0x1812 <KEYPAD_getPressedKey+0x192>
    1810:	44 cf       	rjmp	.-376    	; 0x169a <KEYPAD_getPressedKey+0x1a>
    1812:	41 cf       	rjmp	.-382    	; 0x1696 <KEYPAD_getPressedKey+0x16>

00001814 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1814:	df 93       	push	r29
    1816:	cf 93       	push	r28
    1818:	00 d0       	rcall	.+0      	; 0x181a <KEYPAD_4x4_adjustKeyNumber+0x6>
    181a:	00 d0       	rcall	.+0      	; 0x181c <KEYPAD_4x4_adjustKeyNumber+0x8>
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1822:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	3c 83       	std	Y+4, r19	; 0x04
    182c:	2b 83       	std	Y+3, r18	; 0x03
    182e:	8b 81       	ldd	r24, Y+3	; 0x03
    1830:	9c 81       	ldd	r25, Y+4	; 0x04
    1832:	88 30       	cpi	r24, 0x08	; 8
    1834:	91 05       	cpc	r25, r1
    1836:	09 f4       	brne	.+2      	; 0x183a <KEYPAD_4x4_adjustKeyNumber+0x26>
    1838:	70 c0       	rjmp	.+224    	; 0x191a <KEYPAD_4x4_adjustKeyNumber+0x106>
    183a:	2b 81       	ldd	r18, Y+3	; 0x03
    183c:	3c 81       	ldd	r19, Y+4	; 0x04
    183e:	29 30       	cpi	r18, 0x09	; 9
    1840:	31 05       	cpc	r19, r1
    1842:	5c f5       	brge	.+86     	; 0x189a <KEYPAD_4x4_adjustKeyNumber+0x86>
    1844:	8b 81       	ldd	r24, Y+3	; 0x03
    1846:	9c 81       	ldd	r25, Y+4	; 0x04
    1848:	84 30       	cpi	r24, 0x04	; 4
    184a:	91 05       	cpc	r25, r1
    184c:	09 f4       	brne	.+2      	; 0x1850 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    184e:	59 c0       	rjmp	.+178    	; 0x1902 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1850:	2b 81       	ldd	r18, Y+3	; 0x03
    1852:	3c 81       	ldd	r19, Y+4	; 0x04
    1854:	25 30       	cpi	r18, 0x05	; 5
    1856:	31 05       	cpc	r19, r1
    1858:	9c f4       	brge	.+38     	; 0x1880 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	9c 81       	ldd	r25, Y+4	; 0x04
    185e:	82 30       	cpi	r24, 0x02	; 2
    1860:	91 05       	cpc	r25, r1
    1862:	09 f4       	brne	.+2      	; 0x1866 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1864:	48 c0       	rjmp	.+144    	; 0x18f6 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1866:	2b 81       	ldd	r18, Y+3	; 0x03
    1868:	3c 81       	ldd	r19, Y+4	; 0x04
    186a:	23 30       	cpi	r18, 0x03	; 3
    186c:	31 05       	cpc	r19, r1
    186e:	0c f0       	brlt	.+2      	; 0x1872 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1870:	45 c0       	rjmp	.+138    	; 0x18fc <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	9c 81       	ldd	r25, Y+4	; 0x04
    1876:	81 30       	cpi	r24, 0x01	; 1
    1878:	91 05       	cpc	r25, r1
    187a:	09 f4       	brne	.+2      	; 0x187e <KEYPAD_4x4_adjustKeyNumber+0x6a>
    187c:	39 c0       	rjmp	.+114    	; 0x18f0 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    187e:	67 c0       	rjmp	.+206    	; 0x194e <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1880:	2b 81       	ldd	r18, Y+3	; 0x03
    1882:	3c 81       	ldd	r19, Y+4	; 0x04
    1884:	26 30       	cpi	r18, 0x06	; 6
    1886:	31 05       	cpc	r19, r1
    1888:	09 f4       	brne	.+2      	; 0x188c <KEYPAD_4x4_adjustKeyNumber+0x78>
    188a:	41 c0       	rjmp	.+130    	; 0x190e <KEYPAD_4x4_adjustKeyNumber+0xfa>
    188c:	8b 81       	ldd	r24, Y+3	; 0x03
    188e:	9c 81       	ldd	r25, Y+4	; 0x04
    1890:	87 30       	cpi	r24, 0x07	; 7
    1892:	91 05       	cpc	r25, r1
    1894:	0c f0       	brlt	.+2      	; 0x1898 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1896:	3e c0       	rjmp	.+124    	; 0x1914 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1898:	37 c0       	rjmp	.+110    	; 0x1908 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    189a:	2b 81       	ldd	r18, Y+3	; 0x03
    189c:	3c 81       	ldd	r19, Y+4	; 0x04
    189e:	2c 30       	cpi	r18, 0x0C	; 12
    18a0:	31 05       	cpc	r19, r1
    18a2:	09 f4       	brne	.+2      	; 0x18a6 <KEYPAD_4x4_adjustKeyNumber+0x92>
    18a4:	46 c0       	rjmp	.+140    	; 0x1932 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	9c 81       	ldd	r25, Y+4	; 0x04
    18aa:	8d 30       	cpi	r24, 0x0D	; 13
    18ac:	91 05       	cpc	r25, r1
    18ae:	5c f4       	brge	.+22     	; 0x18c6 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    18b0:	2b 81       	ldd	r18, Y+3	; 0x03
    18b2:	3c 81       	ldd	r19, Y+4	; 0x04
    18b4:	2a 30       	cpi	r18, 0x0A	; 10
    18b6:	31 05       	cpc	r19, r1
    18b8:	b1 f1       	breq	.+108    	; 0x1926 <KEYPAD_4x4_adjustKeyNumber+0x112>
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	9c 81       	ldd	r25, Y+4	; 0x04
    18be:	8b 30       	cpi	r24, 0x0B	; 11
    18c0:	91 05       	cpc	r25, r1
    18c2:	a4 f5       	brge	.+104    	; 0x192c <KEYPAD_4x4_adjustKeyNumber+0x118>
    18c4:	2d c0       	rjmp	.+90     	; 0x1920 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    18c6:	2b 81       	ldd	r18, Y+3	; 0x03
    18c8:	3c 81       	ldd	r19, Y+4	; 0x04
    18ca:	2e 30       	cpi	r18, 0x0E	; 14
    18cc:	31 05       	cpc	r19, r1
    18ce:	b9 f1       	breq	.+110    	; 0x193e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	9c 81       	ldd	r25, Y+4	; 0x04
    18d4:	8e 30       	cpi	r24, 0x0E	; 14
    18d6:	91 05       	cpc	r25, r1
    18d8:	7c f1       	brlt	.+94     	; 0x1938 <KEYPAD_4x4_adjustKeyNumber+0x124>
    18da:	2b 81       	ldd	r18, Y+3	; 0x03
    18dc:	3c 81       	ldd	r19, Y+4	; 0x04
    18de:	2f 30       	cpi	r18, 0x0F	; 15
    18e0:	31 05       	cpc	r19, r1
    18e2:	79 f1       	breq	.+94     	; 0x1942 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	9c 81       	ldd	r25, Y+4	; 0x04
    18e8:	80 31       	cpi	r24, 0x10	; 16
    18ea:	91 05       	cpc	r25, r1
    18ec:	69 f1       	breq	.+90     	; 0x1948 <KEYPAD_4x4_adjustKeyNumber+0x134>
    18ee:	2f c0       	rjmp	.+94     	; 0x194e <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    18f0:	87 e0       	ldi	r24, 0x07	; 7
    18f2:	89 83       	std	Y+1, r24	; 0x01
    18f4:	2e c0       	rjmp	.+92     	; 0x1952 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    18f6:	88 e0       	ldi	r24, 0x08	; 8
    18f8:	89 83       	std	Y+1, r24	; 0x01
    18fa:	2b c0       	rjmp	.+86     	; 0x1952 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    18fc:	89 e0       	ldi	r24, 0x09	; 9
    18fe:	89 83       	std	Y+1, r24	; 0x01
    1900:	28 c0       	rjmp	.+80     	; 0x1952 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1902:	85 e2       	ldi	r24, 0x25	; 37
    1904:	89 83       	std	Y+1, r24	; 0x01
    1906:	25 c0       	rjmp	.+74     	; 0x1952 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1908:	84 e0       	ldi	r24, 0x04	; 4
    190a:	89 83       	std	Y+1, r24	; 0x01
    190c:	22 c0       	rjmp	.+68     	; 0x1952 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    190e:	85 e0       	ldi	r24, 0x05	; 5
    1910:	89 83       	std	Y+1, r24	; 0x01
    1912:	1f c0       	rjmp	.+62     	; 0x1952 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1914:	86 e0       	ldi	r24, 0x06	; 6
    1916:	89 83       	std	Y+1, r24	; 0x01
    1918:	1c c0       	rjmp	.+56     	; 0x1952 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    191a:	8a e2       	ldi	r24, 0x2A	; 42
    191c:	89 83       	std	Y+1, r24	; 0x01
    191e:	19 c0       	rjmp	.+50     	; 0x1952 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	89 83       	std	Y+1, r24	; 0x01
    1924:	16 c0       	rjmp	.+44     	; 0x1952 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1926:	82 e0       	ldi	r24, 0x02	; 2
    1928:	89 83       	std	Y+1, r24	; 0x01
    192a:	13 c0       	rjmp	.+38     	; 0x1952 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    192c:	83 e0       	ldi	r24, 0x03	; 3
    192e:	89 83       	std	Y+1, r24	; 0x01
    1930:	10 c0       	rjmp	.+32     	; 0x1952 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1932:	8d e2       	ldi	r24, 0x2D	; 45
    1934:	89 83       	std	Y+1, r24	; 0x01
    1936:	0d c0       	rjmp	.+26     	; 0x1952 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1938:	8d e0       	ldi	r24, 0x0D	; 13
    193a:	89 83       	std	Y+1, r24	; 0x01
    193c:	0a c0       	rjmp	.+20     	; 0x1952 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    193e:	19 82       	std	Y+1, r1	; 0x01
    1940:	08 c0       	rjmp	.+16     	; 0x1952 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1942:	8d e3       	ldi	r24, 0x3D	; 61
    1944:	89 83       	std	Y+1, r24	; 0x01
    1946:	05 c0       	rjmp	.+10     	; 0x1952 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1948:	8b e2       	ldi	r24, 0x2B	; 43
    194a:	89 83       	std	Y+1, r24	; 0x01
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1952:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	cf 91       	pop	r28
    195e:	df 91       	pop	r29
    1960:	08 95       	ret

00001962 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    196a:	83 e0       	ldi	r24, 0x03	; 3
    196c:	62 e0       	ldi	r22, 0x02	; 2
    196e:	41 e0       	ldi	r20, 0x01	; 1
    1970:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1974:	83 e0       	ldi	r24, 0x03	; 3
    1976:	63 e0       	ldi	r22, 0x03	; 3
    1978:	41 e0       	ldi	r20, 0x01	; 1
    197a:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    197e:	83 e0       	ldi	r24, 0x03	; 3
    1980:	64 e0       	ldi	r22, 0x04	; 4
    1982:	41 e0       	ldi	r20, 0x01	; 1
    1984:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	6f ef       	ldi	r22, 0xFF	; 255
    198c:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1990:	88 e3       	ldi	r24, 0x38	; 56
    1992:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1996:	8c e0       	ldi	r24, 0x0C	; 12
    1998:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_sendCommand>
}
    19a2:	cf 91       	pop	r28
    19a4:	df 91       	pop	r29
    19a6:	08 95       	ret

000019a8 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    19b0:	e9 97       	sbiw	r28, 0x39	; 57
    19b2:	0f b6       	in	r0, 0x3f	; 63
    19b4:	f8 94       	cli
    19b6:	de bf       	out	0x3e, r29	; 62
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	cd bf       	out	0x3d, r28	; 61
    19bc:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    19be:	83 e0       	ldi	r24, 0x03	; 3
    19c0:	62 e0       	ldi	r22, 0x02	; 2
    19c2:	40 e0       	ldi	r20, 0x00	; 0
    19c4:	0e 94 ed 08 	call	0x11da	; 0x11da <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    19c8:	83 e0       	ldi	r24, 0x03	; 3
    19ca:	63 e0       	ldi	r22, 0x03	; 3
    19cc:	40 e0       	ldi	r20, 0x00	; 0
    19ce:	0e 94 ed 08 	call	0x11da	; 0x11da <GPIO_writePin>
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	a0 e8       	ldi	r26, 0x80	; 128
    19d8:	bf e3       	ldi	r27, 0x3F	; 63
    19da:	8d ab       	std	Y+53, r24	; 0x35
    19dc:	9e ab       	std	Y+54, r25	; 0x36
    19de:	af ab       	std	Y+55, r26	; 0x37
    19e0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e2:	6d a9       	ldd	r22, Y+53	; 0x35
    19e4:	7e a9       	ldd	r23, Y+54	; 0x36
    19e6:	8f a9       	ldd	r24, Y+55	; 0x37
    19e8:	98 ad       	ldd	r25, Y+56	; 0x38
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	4a e7       	ldi	r20, 0x7A	; 122
    19f0:	53 e4       	ldi	r21, 0x43	; 67
    19f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	89 ab       	std	Y+49, r24	; 0x31
    19fc:	9a ab       	std	Y+50, r25	; 0x32
    19fe:	ab ab       	std	Y+51, r26	; 0x33
    1a00:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a02:	69 a9       	ldd	r22, Y+49	; 0x31
    1a04:	7a a9       	ldd	r23, Y+50	; 0x32
    1a06:	8b a9       	ldd	r24, Y+51	; 0x33
    1a08:	9c a9       	ldd	r25, Y+52	; 0x34
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	40 e8       	ldi	r20, 0x80	; 128
    1a10:	5f e3       	ldi	r21, 0x3F	; 63
    1a12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a16:	88 23       	and	r24, r24
    1a18:	2c f4       	brge	.+10     	; 0x1a24 <LCD_sendCommand+0x7c>
		__ticks = 1;
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	98 ab       	std	Y+48, r25	; 0x30
    1a20:	8f a7       	std	Y+47, r24	; 0x2f
    1a22:	3f c0       	rjmp	.+126    	; 0x1aa2 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1a24:	69 a9       	ldd	r22, Y+49	; 0x31
    1a26:	7a a9       	ldd	r23, Y+50	; 0x32
    1a28:	8b a9       	ldd	r24, Y+51	; 0x33
    1a2a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	3f ef       	ldi	r19, 0xFF	; 255
    1a30:	4f e7       	ldi	r20, 0x7F	; 127
    1a32:	57 e4       	ldi	r21, 0x47	; 71
    1a34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a38:	18 16       	cp	r1, r24
    1a3a:	4c f5       	brge	.+82     	; 0x1a8e <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3c:	6d a9       	ldd	r22, Y+53	; 0x35
    1a3e:	7e a9       	ldd	r23, Y+54	; 0x36
    1a40:	8f a9       	ldd	r24, Y+55	; 0x37
    1a42:	98 ad       	ldd	r25, Y+56	; 0x38
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	40 e2       	ldi	r20, 0x20	; 32
    1a4a:	51 e4       	ldi	r21, 0x41	; 65
    1a4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	bc 01       	movw	r22, r24
    1a56:	cd 01       	movw	r24, r26
    1a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	98 ab       	std	Y+48, r25	; 0x30
    1a62:	8f a7       	std	Y+47, r24	; 0x2f
    1a64:	0f c0       	rjmp	.+30     	; 0x1a84 <LCD_sendCommand+0xdc>
    1a66:	89 e1       	ldi	r24, 0x19	; 25
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	9e a7       	std	Y+46, r25	; 0x2e
    1a6c:	8d a7       	std	Y+45, r24	; 0x2d
    1a6e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a70:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a72:	01 97       	sbiw	r24, 0x01	; 1
    1a74:	f1 f7       	brne	.-4      	; 0x1a72 <LCD_sendCommand+0xca>
    1a76:	9e a7       	std	Y+46, r25	; 0x2e
    1a78:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a7c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	98 ab       	std	Y+48, r25	; 0x30
    1a82:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a84:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a86:	98 a9       	ldd	r25, Y+48	; 0x30
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	69 f7       	brne	.-38     	; 0x1a66 <LCD_sendCommand+0xbe>
    1a8c:	14 c0       	rjmp	.+40     	; 0x1ab6 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a90:	7a a9       	ldd	r23, Y+50	; 0x32
    1a92:	8b a9       	ldd	r24, Y+51	; 0x33
    1a94:	9c a9       	ldd	r25, Y+52	; 0x34
    1a96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	98 ab       	std	Y+48, r25	; 0x30
    1aa0:	8f a7       	std	Y+47, r24	; 0x2f
    1aa2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aa4:	98 a9       	ldd	r25, Y+48	; 0x30
    1aa6:	9c a7       	std	Y+44, r25	; 0x2c
    1aa8:	8b a7       	std	Y+43, r24	; 0x2b
    1aaa:	8b a5       	ldd	r24, Y+43	; 0x2b
    1aac:	9c a5       	ldd	r25, Y+44	; 0x2c
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	f1 f7       	brne	.-4      	; 0x1aae <LCD_sendCommand+0x106>
    1ab2:	9c a7       	std	Y+44, r25	; 0x2c
    1ab4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1ab6:	83 e0       	ldi	r24, 0x03	; 3
    1ab8:	64 e0       	ldi	r22, 0x04	; 4
    1aba:	41 e0       	ldi	r20, 0x01	; 1
    1abc:	0e 94 ed 08 	call	0x11da	; 0x11da <GPIO_writePin>
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	a0 e8       	ldi	r26, 0x80	; 128
    1ac6:	bf e3       	ldi	r27, 0x3F	; 63
    1ac8:	8f a3       	std	Y+39, r24	; 0x27
    1aca:	98 a7       	std	Y+40, r25	; 0x28
    1acc:	a9 a7       	std	Y+41, r26	; 0x29
    1ace:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ad2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ad4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ad6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	4a e7       	ldi	r20, 0x7A	; 122
    1ade:	53 e4       	ldi	r21, 0x43	; 67
    1ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	8b a3       	std	Y+35, r24	; 0x23
    1aea:	9c a3       	std	Y+36, r25	; 0x24
    1aec:	ad a3       	std	Y+37, r26	; 0x25
    1aee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1af0:	6b a1       	ldd	r22, Y+35	; 0x23
    1af2:	7c a1       	ldd	r23, Y+36	; 0x24
    1af4:	8d a1       	ldd	r24, Y+37	; 0x25
    1af6:	9e a1       	ldd	r25, Y+38	; 0x26
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	40 e8       	ldi	r20, 0x80	; 128
    1afe:	5f e3       	ldi	r21, 0x3F	; 63
    1b00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b04:	88 23       	and	r24, r24
    1b06:	2c f4       	brge	.+10     	; 0x1b12 <LCD_sendCommand+0x16a>
		__ticks = 1;
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	9a a3       	std	Y+34, r25	; 0x22
    1b0e:	89 a3       	std	Y+33, r24	; 0x21
    1b10:	3f c0       	rjmp	.+126    	; 0x1b90 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1b12:	6b a1       	ldd	r22, Y+35	; 0x23
    1b14:	7c a1       	ldd	r23, Y+36	; 0x24
    1b16:	8d a1       	ldd	r24, Y+37	; 0x25
    1b18:	9e a1       	ldd	r25, Y+38	; 0x26
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	3f ef       	ldi	r19, 0xFF	; 255
    1b1e:	4f e7       	ldi	r20, 0x7F	; 127
    1b20:	57 e4       	ldi	r21, 0x47	; 71
    1b22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b26:	18 16       	cp	r1, r24
    1b28:	4c f5       	brge	.+82     	; 0x1b7c <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b2a:	6f a1       	ldd	r22, Y+39	; 0x27
    1b2c:	78 a5       	ldd	r23, Y+40	; 0x28
    1b2e:	89 a5       	ldd	r24, Y+41	; 0x29
    1b30:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	40 e2       	ldi	r20, 0x20	; 32
    1b38:	51 e4       	ldi	r21, 0x41	; 65
    1b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	bc 01       	movw	r22, r24
    1b44:	cd 01       	movw	r24, r26
    1b46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	9a a3       	std	Y+34, r25	; 0x22
    1b50:	89 a3       	std	Y+33, r24	; 0x21
    1b52:	0f c0       	rjmp	.+30     	; 0x1b72 <LCD_sendCommand+0x1ca>
    1b54:	89 e1       	ldi	r24, 0x19	; 25
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	98 a3       	std	Y+32, r25	; 0x20
    1b5a:	8f 8f       	std	Y+31, r24	; 0x1f
    1b5c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b5e:	98 a1       	ldd	r25, Y+32	; 0x20
    1b60:	01 97       	sbiw	r24, 0x01	; 1
    1b62:	f1 f7       	brne	.-4      	; 0x1b60 <LCD_sendCommand+0x1b8>
    1b64:	98 a3       	std	Y+32, r25	; 0x20
    1b66:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b68:	89 a1       	ldd	r24, Y+33	; 0x21
    1b6a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b6c:	01 97       	sbiw	r24, 0x01	; 1
    1b6e:	9a a3       	std	Y+34, r25	; 0x22
    1b70:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b72:	89 a1       	ldd	r24, Y+33	; 0x21
    1b74:	9a a1       	ldd	r25, Y+34	; 0x22
    1b76:	00 97       	sbiw	r24, 0x00	; 0
    1b78:	69 f7       	brne	.-38     	; 0x1b54 <LCD_sendCommand+0x1ac>
    1b7a:	14 c0       	rjmp	.+40     	; 0x1ba4 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b7c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b7e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b80:	8d a1       	ldd	r24, Y+37	; 0x25
    1b82:	9e a1       	ldd	r25, Y+38	; 0x26
    1b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	9a a3       	std	Y+34, r25	; 0x22
    1b8e:	89 a3       	std	Y+33, r24	; 0x21
    1b90:	89 a1       	ldd	r24, Y+33	; 0x21
    1b92:	9a a1       	ldd	r25, Y+34	; 0x22
    1b94:	9e 8f       	std	Y+30, r25	; 0x1e
    1b96:	8d 8f       	std	Y+29, r24	; 0x1d
    1b98:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b9a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	f1 f7       	brne	.-4      	; 0x1b9c <LCD_sendCommand+0x1f4>
    1ba0:	9e 8f       	std	Y+30, r25	; 0x1e
    1ba2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	69 ad       	ldd	r22, Y+57	; 0x39
    1ba8:	0e 94 b7 0a 	call	0x156e	; 0x156e <GPIO_writePort>
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	a0 e8       	ldi	r26, 0x80	; 128
    1bb2:	bf e3       	ldi	r27, 0x3F	; 63
    1bb4:	89 8f       	std	Y+25, r24	; 0x19
    1bb6:	9a 8f       	std	Y+26, r25	; 0x1a
    1bb8:	ab 8f       	std	Y+27, r26	; 0x1b
    1bba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bbc:	69 8d       	ldd	r22, Y+25	; 0x19
    1bbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	4a e7       	ldi	r20, 0x7A	; 122
    1bca:	53 e4       	ldi	r21, 0x43	; 67
    1bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	8d 8b       	std	Y+21, r24	; 0x15
    1bd6:	9e 8b       	std	Y+22, r25	; 0x16
    1bd8:	af 8b       	std	Y+23, r26	; 0x17
    1bda:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bdc:	6d 89       	ldd	r22, Y+21	; 0x15
    1bde:	7e 89       	ldd	r23, Y+22	; 0x16
    1be0:	8f 89       	ldd	r24, Y+23	; 0x17
    1be2:	98 8d       	ldd	r25, Y+24	; 0x18
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	40 e8       	ldi	r20, 0x80	; 128
    1bea:	5f e3       	ldi	r21, 0x3F	; 63
    1bec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bf0:	88 23       	and	r24, r24
    1bf2:	2c f4       	brge	.+10     	; 0x1bfe <LCD_sendCommand+0x256>
		__ticks = 1;
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	9c 8b       	std	Y+20, r25	; 0x14
    1bfa:	8b 8b       	std	Y+19, r24	; 0x13
    1bfc:	3f c0       	rjmp	.+126    	; 0x1c7c <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1bfe:	6d 89       	ldd	r22, Y+21	; 0x15
    1c00:	7e 89       	ldd	r23, Y+22	; 0x16
    1c02:	8f 89       	ldd	r24, Y+23	; 0x17
    1c04:	98 8d       	ldd	r25, Y+24	; 0x18
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	3f ef       	ldi	r19, 0xFF	; 255
    1c0a:	4f e7       	ldi	r20, 0x7F	; 127
    1c0c:	57 e4       	ldi	r21, 0x47	; 71
    1c0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c12:	18 16       	cp	r1, r24
    1c14:	4c f5       	brge	.+82     	; 0x1c68 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c16:	69 8d       	ldd	r22, Y+25	; 0x19
    1c18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e2       	ldi	r20, 0x20	; 32
    1c24:	51 e4       	ldi	r21, 0x41	; 65
    1c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	bc 01       	movw	r22, r24
    1c30:	cd 01       	movw	r24, r26
    1c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	9c 8b       	std	Y+20, r25	; 0x14
    1c3c:	8b 8b       	std	Y+19, r24	; 0x13
    1c3e:	0f c0       	rjmp	.+30     	; 0x1c5e <LCD_sendCommand+0x2b6>
    1c40:	89 e1       	ldi	r24, 0x19	; 25
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	9a 8b       	std	Y+18, r25	; 0x12
    1c46:	89 8b       	std	Y+17, r24	; 0x11
    1c48:	89 89       	ldd	r24, Y+17	; 0x11
    1c4a:	9a 89       	ldd	r25, Y+18	; 0x12
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	f1 f7       	brne	.-4      	; 0x1c4c <LCD_sendCommand+0x2a4>
    1c50:	9a 8b       	std	Y+18, r25	; 0x12
    1c52:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c54:	8b 89       	ldd	r24, Y+19	; 0x13
    1c56:	9c 89       	ldd	r25, Y+20	; 0x14
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	9c 8b       	std	Y+20, r25	; 0x14
    1c5c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c60:	9c 89       	ldd	r25, Y+20	; 0x14
    1c62:	00 97       	sbiw	r24, 0x00	; 0
    1c64:	69 f7       	brne	.-38     	; 0x1c40 <LCD_sendCommand+0x298>
    1c66:	14 c0       	rjmp	.+40     	; 0x1c90 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c68:	6d 89       	ldd	r22, Y+21	; 0x15
    1c6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	9c 8b       	std	Y+20, r25	; 0x14
    1c7a:	8b 8b       	std	Y+19, r24	; 0x13
    1c7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c80:	98 8b       	std	Y+16, r25	; 0x10
    1c82:	8f 87       	std	Y+15, r24	; 0x0f
    1c84:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c86:	98 89       	ldd	r25, Y+16	; 0x10
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	f1 f7       	brne	.-4      	; 0x1c88 <LCD_sendCommand+0x2e0>
    1c8c:	98 8b       	std	Y+16, r25	; 0x10
    1c8e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1c90:	83 e0       	ldi	r24, 0x03	; 3
    1c92:	64 e0       	ldi	r22, 0x04	; 4
    1c94:	40 e0       	ldi	r20, 0x00	; 0
    1c96:	0e 94 ed 08 	call	0x11da	; 0x11da <GPIO_writePin>
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	a0 e8       	ldi	r26, 0x80	; 128
    1ca0:	bf e3       	ldi	r27, 0x3F	; 63
    1ca2:	8b 87       	std	Y+11, r24	; 0x0b
    1ca4:	9c 87       	std	Y+12, r25	; 0x0c
    1ca6:	ad 87       	std	Y+13, r26	; 0x0d
    1ca8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1caa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cac:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	4a e7       	ldi	r20, 0x7A	; 122
    1cb8:	53 e4       	ldi	r21, 0x43	; 67
    1cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	8f 83       	std	Y+7, r24	; 0x07
    1cc4:	98 87       	std	Y+8, r25	; 0x08
    1cc6:	a9 87       	std	Y+9, r26	; 0x09
    1cc8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cca:	6f 81       	ldd	r22, Y+7	; 0x07
    1ccc:	78 85       	ldd	r23, Y+8	; 0x08
    1cce:	89 85       	ldd	r24, Y+9	; 0x09
    1cd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	40 e8       	ldi	r20, 0x80	; 128
    1cd8:	5f e3       	ldi	r21, 0x3F	; 63
    1cda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cde:	88 23       	and	r24, r24
    1ce0:	2c f4       	brge	.+10     	; 0x1cec <LCD_sendCommand+0x344>
		__ticks = 1;
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	9e 83       	std	Y+6, r25	; 0x06
    1ce8:	8d 83       	std	Y+5, r24	; 0x05
    1cea:	3f c0       	rjmp	.+126    	; 0x1d6a <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1cec:	6f 81       	ldd	r22, Y+7	; 0x07
    1cee:	78 85       	ldd	r23, Y+8	; 0x08
    1cf0:	89 85       	ldd	r24, Y+9	; 0x09
    1cf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	3f ef       	ldi	r19, 0xFF	; 255
    1cf8:	4f e7       	ldi	r20, 0x7F	; 127
    1cfa:	57 e4       	ldi	r21, 0x47	; 71
    1cfc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d00:	18 16       	cp	r1, r24
    1d02:	4c f5       	brge	.+82     	; 0x1d56 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	40 e2       	ldi	r20, 0x20	; 32
    1d12:	51 e4       	ldi	r21, 0x41	; 65
    1d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	bc 01       	movw	r22, r24
    1d1e:	cd 01       	movw	r24, r26
    1d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	9e 83       	std	Y+6, r25	; 0x06
    1d2a:	8d 83       	std	Y+5, r24	; 0x05
    1d2c:	0f c0       	rjmp	.+30     	; 0x1d4c <LCD_sendCommand+0x3a4>
    1d2e:	89 e1       	ldi	r24, 0x19	; 25
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	9c 83       	std	Y+4, r25	; 0x04
    1d34:	8b 83       	std	Y+3, r24	; 0x03
    1d36:	8b 81       	ldd	r24, Y+3	; 0x03
    1d38:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	f1 f7       	brne	.-4      	; 0x1d3a <LCD_sendCommand+0x392>
    1d3e:	9c 83       	std	Y+4, r25	; 0x04
    1d40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d42:	8d 81       	ldd	r24, Y+5	; 0x05
    1d44:	9e 81       	ldd	r25, Y+6	; 0x06
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	9e 83       	std	Y+6, r25	; 0x06
    1d4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d50:	00 97       	sbiw	r24, 0x00	; 0
    1d52:	69 f7       	brne	.-38     	; 0x1d2e <LCD_sendCommand+0x386>
    1d54:	14 c0       	rjmp	.+40     	; 0x1d7e <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d56:	6f 81       	ldd	r22, Y+7	; 0x07
    1d58:	78 85       	ldd	r23, Y+8	; 0x08
    1d5a:	89 85       	ldd	r24, Y+9	; 0x09
    1d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	9e 83       	std	Y+6, r25	; 0x06
    1d68:	8d 83       	std	Y+5, r24	; 0x05
    1d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6e:	9a 83       	std	Y+2, r25	; 0x02
    1d70:	89 83       	std	Y+1, r24	; 0x01
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	9a 81       	ldd	r25, Y+2	; 0x02
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	f1 f7       	brne	.-4      	; 0x1d76 <LCD_sendCommand+0x3ce>
    1d7a:	9a 83       	std	Y+2, r25	; 0x02
    1d7c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1d7e:	e9 96       	adiw	r28, 0x39	; 57
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	f8 94       	cli
    1d84:	de bf       	out	0x3e, r29	; 62
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	cd bf       	out	0x3d, r28	; 61
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    1d98:	e9 97       	sbiw	r28, 0x39	; 57
    1d9a:	0f b6       	in	r0, 0x3f	; 63
    1d9c:	f8 94       	cli
    1d9e:	de bf       	out	0x3e, r29	; 62
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	cd bf       	out	0x3d, r28	; 61
    1da4:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1da6:	83 e0       	ldi	r24, 0x03	; 3
    1da8:	62 e0       	ldi	r22, 0x02	; 2
    1daa:	41 e0       	ldi	r20, 0x01	; 1
    1dac:	0e 94 ed 08 	call	0x11da	; 0x11da <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1db0:	83 e0       	ldi	r24, 0x03	; 3
    1db2:	63 e0       	ldi	r22, 0x03	; 3
    1db4:	40 e0       	ldi	r20, 0x00	; 0
    1db6:	0e 94 ed 08 	call	0x11da	; 0x11da <GPIO_writePin>
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	a0 e8       	ldi	r26, 0x80	; 128
    1dc0:	bf e3       	ldi	r27, 0x3F	; 63
    1dc2:	8d ab       	std	Y+53, r24	; 0x35
    1dc4:	9e ab       	std	Y+54, r25	; 0x36
    1dc6:	af ab       	std	Y+55, r26	; 0x37
    1dc8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dca:	6d a9       	ldd	r22, Y+53	; 0x35
    1dcc:	7e a9       	ldd	r23, Y+54	; 0x36
    1dce:	8f a9       	ldd	r24, Y+55	; 0x37
    1dd0:	98 ad       	ldd	r25, Y+56	; 0x38
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	4a e7       	ldi	r20, 0x7A	; 122
    1dd8:	53 e4       	ldi	r21, 0x43	; 67
    1dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	89 ab       	std	Y+49, r24	; 0x31
    1de4:	9a ab       	std	Y+50, r25	; 0x32
    1de6:	ab ab       	std	Y+51, r26	; 0x33
    1de8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1dea:	69 a9       	ldd	r22, Y+49	; 0x31
    1dec:	7a a9       	ldd	r23, Y+50	; 0x32
    1dee:	8b a9       	ldd	r24, Y+51	; 0x33
    1df0:	9c a9       	ldd	r25, Y+52	; 0x34
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e8       	ldi	r20, 0x80	; 128
    1df8:	5f e3       	ldi	r21, 0x3F	; 63
    1dfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dfe:	88 23       	and	r24, r24
    1e00:	2c f4       	brge	.+10     	; 0x1e0c <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	98 ab       	std	Y+48, r25	; 0x30
    1e08:	8f a7       	std	Y+47, r24	; 0x2f
    1e0a:	3f c0       	rjmp	.+126    	; 0x1e8a <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1e0c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e0e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e10:	8b a9       	ldd	r24, Y+51	; 0x33
    1e12:	9c a9       	ldd	r25, Y+52	; 0x34
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	3f ef       	ldi	r19, 0xFF	; 255
    1e18:	4f e7       	ldi	r20, 0x7F	; 127
    1e1a:	57 e4       	ldi	r21, 0x47	; 71
    1e1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e20:	18 16       	cp	r1, r24
    1e22:	4c f5       	brge	.+82     	; 0x1e76 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e24:	6d a9       	ldd	r22, Y+53	; 0x35
    1e26:	7e a9       	ldd	r23, Y+54	; 0x36
    1e28:	8f a9       	ldd	r24, Y+55	; 0x37
    1e2a:	98 ad       	ldd	r25, Y+56	; 0x38
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	40 e2       	ldi	r20, 0x20	; 32
    1e32:	51 e4       	ldi	r21, 0x41	; 65
    1e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	bc 01       	movw	r22, r24
    1e3e:	cd 01       	movw	r24, r26
    1e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	98 ab       	std	Y+48, r25	; 0x30
    1e4a:	8f a7       	std	Y+47, r24	; 0x2f
    1e4c:	0f c0       	rjmp	.+30     	; 0x1e6c <LCD_displayCharacter+0xdc>
    1e4e:	89 e1       	ldi	r24, 0x19	; 25
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	9e a7       	std	Y+46, r25	; 0x2e
    1e54:	8d a7       	std	Y+45, r24	; 0x2d
    1e56:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e58:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e5a:	01 97       	sbiw	r24, 0x01	; 1
    1e5c:	f1 f7       	brne	.-4      	; 0x1e5a <LCD_displayCharacter+0xca>
    1e5e:	9e a7       	std	Y+46, r25	; 0x2e
    1e60:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e62:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e64:	98 a9       	ldd	r25, Y+48	; 0x30
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	98 ab       	std	Y+48, r25	; 0x30
    1e6a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e6e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e70:	00 97       	sbiw	r24, 0x00	; 0
    1e72:	69 f7       	brne	.-38     	; 0x1e4e <LCD_displayCharacter+0xbe>
    1e74:	14 c0       	rjmp	.+40     	; 0x1e9e <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e76:	69 a9       	ldd	r22, Y+49	; 0x31
    1e78:	7a a9       	ldd	r23, Y+50	; 0x32
    1e7a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e7c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	98 ab       	std	Y+48, r25	; 0x30
    1e88:	8f a7       	std	Y+47, r24	; 0x2f
    1e8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e8c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e8e:	9c a7       	std	Y+44, r25	; 0x2c
    1e90:	8b a7       	std	Y+43, r24	; 0x2b
    1e92:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e94:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	f1 f7       	brne	.-4      	; 0x1e96 <LCD_displayCharacter+0x106>
    1e9a:	9c a7       	std	Y+44, r25	; 0x2c
    1e9c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1e9e:	83 e0       	ldi	r24, 0x03	; 3
    1ea0:	64 e0       	ldi	r22, 0x04	; 4
    1ea2:	41 e0       	ldi	r20, 0x01	; 1
    1ea4:	0e 94 ed 08 	call	0x11da	; 0x11da <GPIO_writePin>
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	a0 e8       	ldi	r26, 0x80	; 128
    1eae:	bf e3       	ldi	r27, 0x3F	; 63
    1eb0:	8f a3       	std	Y+39, r24	; 0x27
    1eb2:	98 a7       	std	Y+40, r25	; 0x28
    1eb4:	a9 a7       	std	Y+41, r26	; 0x29
    1eb6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb8:	6f a1       	ldd	r22, Y+39	; 0x27
    1eba:	78 a5       	ldd	r23, Y+40	; 0x28
    1ebc:	89 a5       	ldd	r24, Y+41	; 0x29
    1ebe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	4a e7       	ldi	r20, 0x7A	; 122
    1ec6:	53 e4       	ldi	r21, 0x43	; 67
    1ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	8b a3       	std	Y+35, r24	; 0x23
    1ed2:	9c a3       	std	Y+36, r25	; 0x24
    1ed4:	ad a3       	std	Y+37, r26	; 0x25
    1ed6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ed8:	6b a1       	ldd	r22, Y+35	; 0x23
    1eda:	7c a1       	ldd	r23, Y+36	; 0x24
    1edc:	8d a1       	ldd	r24, Y+37	; 0x25
    1ede:	9e a1       	ldd	r25, Y+38	; 0x26
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e8       	ldi	r20, 0x80	; 128
    1ee6:	5f e3       	ldi	r21, 0x3F	; 63
    1ee8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eec:	88 23       	and	r24, r24
    1eee:	2c f4       	brge	.+10     	; 0x1efa <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	9a a3       	std	Y+34, r25	; 0x22
    1ef6:	89 a3       	std	Y+33, r24	; 0x21
    1ef8:	3f c0       	rjmp	.+126    	; 0x1f78 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1efa:	6b a1       	ldd	r22, Y+35	; 0x23
    1efc:	7c a1       	ldd	r23, Y+36	; 0x24
    1efe:	8d a1       	ldd	r24, Y+37	; 0x25
    1f00:	9e a1       	ldd	r25, Y+38	; 0x26
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	3f ef       	ldi	r19, 0xFF	; 255
    1f06:	4f e7       	ldi	r20, 0x7F	; 127
    1f08:	57 e4       	ldi	r21, 0x47	; 71
    1f0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f0e:	18 16       	cp	r1, r24
    1f10:	4c f5       	brge	.+82     	; 0x1f64 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f12:	6f a1       	ldd	r22, Y+39	; 0x27
    1f14:	78 a5       	ldd	r23, Y+40	; 0x28
    1f16:	89 a5       	ldd	r24, Y+41	; 0x29
    1f18:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	40 e2       	ldi	r20, 0x20	; 32
    1f20:	51 e4       	ldi	r21, 0x41	; 65
    1f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	bc 01       	movw	r22, r24
    1f2c:	cd 01       	movw	r24, r26
    1f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	9a a3       	std	Y+34, r25	; 0x22
    1f38:	89 a3       	std	Y+33, r24	; 0x21
    1f3a:	0f c0       	rjmp	.+30     	; 0x1f5a <LCD_displayCharacter+0x1ca>
    1f3c:	89 e1       	ldi	r24, 0x19	; 25
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	98 a3       	std	Y+32, r25	; 0x20
    1f42:	8f 8f       	std	Y+31, r24	; 0x1f
    1f44:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f46:	98 a1       	ldd	r25, Y+32	; 0x20
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	f1 f7       	brne	.-4      	; 0x1f48 <LCD_displayCharacter+0x1b8>
    1f4c:	98 a3       	std	Y+32, r25	; 0x20
    1f4e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f50:	89 a1       	ldd	r24, Y+33	; 0x21
    1f52:	9a a1       	ldd	r25, Y+34	; 0x22
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	9a a3       	std	Y+34, r25	; 0x22
    1f58:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f5c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	69 f7       	brne	.-38     	; 0x1f3c <LCD_displayCharacter+0x1ac>
    1f62:	14 c0       	rjmp	.+40     	; 0x1f8c <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f64:	6b a1       	ldd	r22, Y+35	; 0x23
    1f66:	7c a1       	ldd	r23, Y+36	; 0x24
    1f68:	8d a1       	ldd	r24, Y+37	; 0x25
    1f6a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	9a a3       	std	Y+34, r25	; 0x22
    1f76:	89 a3       	std	Y+33, r24	; 0x21
    1f78:	89 a1       	ldd	r24, Y+33	; 0x21
    1f7a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f7c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f7e:	8d 8f       	std	Y+29, r24	; 0x1d
    1f80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f82:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	f1 f7       	brne	.-4      	; 0x1f84 <LCD_displayCharacter+0x1f4>
    1f88:	9e 8f       	std	Y+30, r25	; 0x1e
    1f8a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	69 ad       	ldd	r22, Y+57	; 0x39
    1f90:	0e 94 b7 0a 	call	0x156e	; 0x156e <GPIO_writePort>
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	a0 e8       	ldi	r26, 0x80	; 128
    1f9a:	bf e3       	ldi	r27, 0x3F	; 63
    1f9c:	89 8f       	std	Y+25, r24	; 0x19
    1f9e:	9a 8f       	std	Y+26, r25	; 0x1a
    1fa0:	ab 8f       	std	Y+27, r26	; 0x1b
    1fa2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa4:	69 8d       	ldd	r22, Y+25	; 0x19
    1fa6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fa8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1faa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	4a e7       	ldi	r20, 0x7A	; 122
    1fb2:	53 e4       	ldi	r21, 0x43	; 67
    1fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	8d 8b       	std	Y+21, r24	; 0x15
    1fbe:	9e 8b       	std	Y+22, r25	; 0x16
    1fc0:	af 8b       	std	Y+23, r26	; 0x17
    1fc2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fc4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1fca:	98 8d       	ldd	r25, Y+24	; 0x18
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	40 e8       	ldi	r20, 0x80	; 128
    1fd2:	5f e3       	ldi	r21, 0x3F	; 63
    1fd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fd8:	88 23       	and	r24, r24
    1fda:	2c f4       	brge	.+10     	; 0x1fe6 <LCD_displayCharacter+0x256>
		__ticks = 1;
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	9c 8b       	std	Y+20, r25	; 0x14
    1fe2:	8b 8b       	std	Y+19, r24	; 0x13
    1fe4:	3f c0       	rjmp	.+126    	; 0x2064 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    1fe6:	6d 89       	ldd	r22, Y+21	; 0x15
    1fe8:	7e 89       	ldd	r23, Y+22	; 0x16
    1fea:	8f 89       	ldd	r24, Y+23	; 0x17
    1fec:	98 8d       	ldd	r25, Y+24	; 0x18
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	3f ef       	ldi	r19, 0xFF	; 255
    1ff2:	4f e7       	ldi	r20, 0x7F	; 127
    1ff4:	57 e4       	ldi	r21, 0x47	; 71
    1ff6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ffa:	18 16       	cp	r1, r24
    1ffc:	4c f5       	brge	.+82     	; 0x2050 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ffe:	69 8d       	ldd	r22, Y+25	; 0x19
    2000:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2002:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2004:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	40 e2       	ldi	r20, 0x20	; 32
    200c:	51 e4       	ldi	r21, 0x41	; 65
    200e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	bc 01       	movw	r22, r24
    2018:	cd 01       	movw	r24, r26
    201a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	9c 8b       	std	Y+20, r25	; 0x14
    2024:	8b 8b       	std	Y+19, r24	; 0x13
    2026:	0f c0       	rjmp	.+30     	; 0x2046 <LCD_displayCharacter+0x2b6>
    2028:	89 e1       	ldi	r24, 0x19	; 25
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	9a 8b       	std	Y+18, r25	; 0x12
    202e:	89 8b       	std	Y+17, r24	; 0x11
    2030:	89 89       	ldd	r24, Y+17	; 0x11
    2032:	9a 89       	ldd	r25, Y+18	; 0x12
    2034:	01 97       	sbiw	r24, 0x01	; 1
    2036:	f1 f7       	brne	.-4      	; 0x2034 <LCD_displayCharacter+0x2a4>
    2038:	9a 8b       	std	Y+18, r25	; 0x12
    203a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    203c:	8b 89       	ldd	r24, Y+19	; 0x13
    203e:	9c 89       	ldd	r25, Y+20	; 0x14
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	9c 8b       	std	Y+20, r25	; 0x14
    2044:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2046:	8b 89       	ldd	r24, Y+19	; 0x13
    2048:	9c 89       	ldd	r25, Y+20	; 0x14
    204a:	00 97       	sbiw	r24, 0x00	; 0
    204c:	69 f7       	brne	.-38     	; 0x2028 <LCD_displayCharacter+0x298>
    204e:	14 c0       	rjmp	.+40     	; 0x2078 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2050:	6d 89       	ldd	r22, Y+21	; 0x15
    2052:	7e 89       	ldd	r23, Y+22	; 0x16
    2054:	8f 89       	ldd	r24, Y+23	; 0x17
    2056:	98 8d       	ldd	r25, Y+24	; 0x18
    2058:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	9c 8b       	std	Y+20, r25	; 0x14
    2062:	8b 8b       	std	Y+19, r24	; 0x13
    2064:	8b 89       	ldd	r24, Y+19	; 0x13
    2066:	9c 89       	ldd	r25, Y+20	; 0x14
    2068:	98 8b       	std	Y+16, r25	; 0x10
    206a:	8f 87       	std	Y+15, r24	; 0x0f
    206c:	8f 85       	ldd	r24, Y+15	; 0x0f
    206e:	98 89       	ldd	r25, Y+16	; 0x10
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	f1 f7       	brne	.-4      	; 0x2070 <LCD_displayCharacter+0x2e0>
    2074:	98 8b       	std	Y+16, r25	; 0x10
    2076:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2078:	83 e0       	ldi	r24, 0x03	; 3
    207a:	64 e0       	ldi	r22, 0x04	; 4
    207c:	40 e0       	ldi	r20, 0x00	; 0
    207e:	0e 94 ed 08 	call	0x11da	; 0x11da <GPIO_writePin>
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	a0 e8       	ldi	r26, 0x80	; 128
    2088:	bf e3       	ldi	r27, 0x3F	; 63
    208a:	8b 87       	std	Y+11, r24	; 0x0b
    208c:	9c 87       	std	Y+12, r25	; 0x0c
    208e:	ad 87       	std	Y+13, r26	; 0x0d
    2090:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2092:	6b 85       	ldd	r22, Y+11	; 0x0b
    2094:	7c 85       	ldd	r23, Y+12	; 0x0c
    2096:	8d 85       	ldd	r24, Y+13	; 0x0d
    2098:	9e 85       	ldd	r25, Y+14	; 0x0e
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	4a e7       	ldi	r20, 0x7A	; 122
    20a0:	53 e4       	ldi	r21, 0x43	; 67
    20a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	8f 83       	std	Y+7, r24	; 0x07
    20ac:	98 87       	std	Y+8, r25	; 0x08
    20ae:	a9 87       	std	Y+9, r26	; 0x09
    20b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20b2:	6f 81       	ldd	r22, Y+7	; 0x07
    20b4:	78 85       	ldd	r23, Y+8	; 0x08
    20b6:	89 85       	ldd	r24, Y+9	; 0x09
    20b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	40 e8       	ldi	r20, 0x80	; 128
    20c0:	5f e3       	ldi	r21, 0x3F	; 63
    20c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c6:	88 23       	and	r24, r24
    20c8:	2c f4       	brge	.+10     	; 0x20d4 <LCD_displayCharacter+0x344>
		__ticks = 1;
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	9e 83       	std	Y+6, r25	; 0x06
    20d0:	8d 83       	std	Y+5, r24	; 0x05
    20d2:	3f c0       	rjmp	.+126    	; 0x2152 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    20d4:	6f 81       	ldd	r22, Y+7	; 0x07
    20d6:	78 85       	ldd	r23, Y+8	; 0x08
    20d8:	89 85       	ldd	r24, Y+9	; 0x09
    20da:	9a 85       	ldd	r25, Y+10	; 0x0a
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	3f ef       	ldi	r19, 0xFF	; 255
    20e0:	4f e7       	ldi	r20, 0x7F	; 127
    20e2:	57 e4       	ldi	r21, 0x47	; 71
    20e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e8:	18 16       	cp	r1, r24
    20ea:	4c f5       	brge	.+82     	; 0x213e <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e2       	ldi	r20, 0x20	; 32
    20fa:	51 e4       	ldi	r21, 0x41	; 65
    20fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	bc 01       	movw	r22, r24
    2106:	cd 01       	movw	r24, r26
    2108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	9e 83       	std	Y+6, r25	; 0x06
    2112:	8d 83       	std	Y+5, r24	; 0x05
    2114:	0f c0       	rjmp	.+30     	; 0x2134 <LCD_displayCharacter+0x3a4>
    2116:	89 e1       	ldi	r24, 0x19	; 25
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	9c 83       	std	Y+4, r25	; 0x04
    211c:	8b 83       	std	Y+3, r24	; 0x03
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	9c 81       	ldd	r25, Y+4	; 0x04
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	f1 f7       	brne	.-4      	; 0x2122 <LCD_displayCharacter+0x392>
    2126:	9c 83       	std	Y+4, r25	; 0x04
    2128:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212a:	8d 81       	ldd	r24, Y+5	; 0x05
    212c:	9e 81       	ldd	r25, Y+6	; 0x06
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	9e 83       	std	Y+6, r25	; 0x06
    2132:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2134:	8d 81       	ldd	r24, Y+5	; 0x05
    2136:	9e 81       	ldd	r25, Y+6	; 0x06
    2138:	00 97       	sbiw	r24, 0x00	; 0
    213a:	69 f7       	brne	.-38     	; 0x2116 <LCD_displayCharacter+0x386>
    213c:	14 c0       	rjmp	.+40     	; 0x2166 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213e:	6f 81       	ldd	r22, Y+7	; 0x07
    2140:	78 85       	ldd	r23, Y+8	; 0x08
    2142:	89 85       	ldd	r24, Y+9	; 0x09
    2144:	9a 85       	ldd	r25, Y+10	; 0x0a
    2146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	9e 83       	std	Y+6, r25	; 0x06
    2150:	8d 83       	std	Y+5, r24	; 0x05
    2152:	8d 81       	ldd	r24, Y+5	; 0x05
    2154:	9e 81       	ldd	r25, Y+6	; 0x06
    2156:	9a 83       	std	Y+2, r25	; 0x02
    2158:	89 83       	std	Y+1, r24	; 0x01
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	9a 81       	ldd	r25, Y+2	; 0x02
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <LCD_displayCharacter+0x3ce>
    2162:	9a 83       	std	Y+2, r25	; 0x02
    2164:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2166:	e9 96       	adiw	r28, 0x39	; 57
    2168:	0f b6       	in	r0, 0x3f	; 63
    216a:	f8 94       	cli
    216c:	de bf       	out	0x3e, r29	; 62
    216e:	0f be       	out	0x3f, r0	; 63
    2170:	cd bf       	out	0x3d, r28	; 61
    2172:	cf 91       	pop	r28
    2174:	df 91       	pop	r29
    2176:	08 95       	ret

00002178 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2178:	df 93       	push	r29
    217a:	cf 93       	push	r28
    217c:	00 d0       	rcall	.+0      	; 0x217e <LCD_displayString+0x6>
    217e:	0f 92       	push	r0
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
    2184:	9b 83       	std	Y+3, r25	; 0x03
    2186:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2188:	19 82       	std	Y+1, r1	; 0x01
    218a:	0e c0       	rjmp	.+28     	; 0x21a8 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    218c:	89 81       	ldd	r24, Y+1	; 0x01
    218e:	28 2f       	mov	r18, r24
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	9b 81       	ldd	r25, Y+3	; 0x03
    2196:	fc 01       	movw	r30, r24
    2198:	e2 0f       	add	r30, r18
    219a:	f3 1f       	adc	r31, r19
    219c:	80 81       	ld	r24, Z
    219e:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <LCD_displayCharacter>
		i++;
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	8f 5f       	subi	r24, 0xFF	; 255
    21a6:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
    21aa:	28 2f       	mov	r18, r24
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	8a 81       	ldd	r24, Y+2	; 0x02
    21b0:	9b 81       	ldd	r25, Y+3	; 0x03
    21b2:	fc 01       	movw	r30, r24
    21b4:	e2 0f       	add	r30, r18
    21b6:	f3 1f       	adc	r31, r19
    21b8:	80 81       	ld	r24, Z
    21ba:	88 23       	and	r24, r24
    21bc:	39 f7       	brne	.-50     	; 0x218c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    21be:	0f 90       	pop	r0
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	cf 91       	pop	r28
    21c6:	df 91       	pop	r29
    21c8:	08 95       	ret

000021ca <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    21ca:	df 93       	push	r29
    21cc:	cf 93       	push	r28
    21ce:	00 d0       	rcall	.+0      	; 0x21d0 <LCD_moveCursor+0x6>
    21d0:	00 d0       	rcall	.+0      	; 0x21d2 <LCD_moveCursor+0x8>
    21d2:	0f 92       	push	r0
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
    21d8:	8a 83       	std	Y+2, r24	; 0x02
    21da:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    21dc:	8a 81       	ldd	r24, Y+2	; 0x02
    21de:	28 2f       	mov	r18, r24
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	3d 83       	std	Y+5, r19	; 0x05
    21e4:	2c 83       	std	Y+4, r18	; 0x04
    21e6:	8c 81       	ldd	r24, Y+4	; 0x04
    21e8:	9d 81       	ldd	r25, Y+5	; 0x05
    21ea:	81 30       	cpi	r24, 0x01	; 1
    21ec:	91 05       	cpc	r25, r1
    21ee:	c1 f0       	breq	.+48     	; 0x2220 <LCD_moveCursor+0x56>
    21f0:	2c 81       	ldd	r18, Y+4	; 0x04
    21f2:	3d 81       	ldd	r19, Y+5	; 0x05
    21f4:	22 30       	cpi	r18, 0x02	; 2
    21f6:	31 05       	cpc	r19, r1
    21f8:	2c f4       	brge	.+10     	; 0x2204 <LCD_moveCursor+0x3a>
    21fa:	8c 81       	ldd	r24, Y+4	; 0x04
    21fc:	9d 81       	ldd	r25, Y+5	; 0x05
    21fe:	00 97       	sbiw	r24, 0x00	; 0
    2200:	61 f0       	breq	.+24     	; 0x221a <LCD_moveCursor+0x50>
    2202:	19 c0       	rjmp	.+50     	; 0x2236 <LCD_moveCursor+0x6c>
    2204:	2c 81       	ldd	r18, Y+4	; 0x04
    2206:	3d 81       	ldd	r19, Y+5	; 0x05
    2208:	22 30       	cpi	r18, 0x02	; 2
    220a:	31 05       	cpc	r19, r1
    220c:	69 f0       	breq	.+26     	; 0x2228 <LCD_moveCursor+0x5e>
    220e:	8c 81       	ldd	r24, Y+4	; 0x04
    2210:	9d 81       	ldd	r25, Y+5	; 0x05
    2212:	83 30       	cpi	r24, 0x03	; 3
    2214:	91 05       	cpc	r25, r1
    2216:	61 f0       	breq	.+24     	; 0x2230 <LCD_moveCursor+0x66>
    2218:	0e c0       	rjmp	.+28     	; 0x2236 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    221a:	8b 81       	ldd	r24, Y+3	; 0x03
    221c:	89 83       	std	Y+1, r24	; 0x01
    221e:	0b c0       	rjmp	.+22     	; 0x2236 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2220:	8b 81       	ldd	r24, Y+3	; 0x03
    2222:	80 5c       	subi	r24, 0xC0	; 192
    2224:	89 83       	std	Y+1, r24	; 0x01
    2226:	07 c0       	rjmp	.+14     	; 0x2236 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2228:	8b 81       	ldd	r24, Y+3	; 0x03
    222a:	80 5f       	subi	r24, 0xF0	; 240
    222c:	89 83       	std	Y+1, r24	; 0x01
    222e:	03 c0       	rjmp	.+6      	; 0x2236 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2230:	8b 81       	ldd	r24, Y+3	; 0x03
    2232:	80 5b       	subi	r24, 0xB0	; 176
    2234:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2236:	89 81       	ldd	r24, Y+1	; 0x01
    2238:	80 68       	ori	r24, 0x80	; 128
    223a:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_sendCommand>
}
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	0f 90       	pop	r0
    2244:	0f 90       	pop	r0
    2246:	0f 90       	pop	r0
    2248:	cf 91       	pop	r28
    224a:	df 91       	pop	r29
    224c:	08 95       	ret

0000224e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    224e:	df 93       	push	r29
    2250:	cf 93       	push	r28
    2252:	00 d0       	rcall	.+0      	; 0x2254 <LCD_displayStringRowColumn+0x6>
    2254:	00 d0       	rcall	.+0      	; 0x2256 <LCD_displayStringRowColumn+0x8>
    2256:	cd b7       	in	r28, 0x3d	; 61
    2258:	de b7       	in	r29, 0x3e	; 62
    225a:	89 83       	std	Y+1, r24	; 0x01
    225c:	6a 83       	std	Y+2, r22	; 0x02
    225e:	5c 83       	std	Y+4, r21	; 0x04
    2260:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	6a 81       	ldd	r22, Y+2	; 0x02
    2266:	0e 94 e5 10 	call	0x21ca	; 0x21ca <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    226a:	8b 81       	ldd	r24, Y+3	; 0x03
    226c:	9c 81       	ldd	r25, Y+4	; 0x04
    226e:	0e 94 bc 10 	call	0x2178	; 0x2178 <LCD_displayString>
}
    2272:	0f 90       	pop	r0
    2274:	0f 90       	pop	r0
    2276:	0f 90       	pop	r0
    2278:	0f 90       	pop	r0
    227a:	cf 91       	pop	r28
    227c:	df 91       	pop	r29
    227e:	08 95       	ret

00002280 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2280:	df 93       	push	r29
    2282:	cf 93       	push	r28
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
    2288:	62 97       	sbiw	r28, 0x12	; 18
    228a:	0f b6       	in	r0, 0x3f	; 63
    228c:	f8 94       	cli
    228e:	de bf       	out	0x3e, r29	; 62
    2290:	0f be       	out	0x3f, r0	; 63
    2292:	cd bf       	out	0x3d, r28	; 61
    2294:	9a 8b       	std	Y+18, r25	; 0x12
    2296:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2298:	89 89       	ldd	r24, Y+17	; 0x11
    229a:	9a 89       	ldd	r25, Y+18	; 0x12
    229c:	9e 01       	movw	r18, r28
    229e:	2f 5f       	subi	r18, 0xFF	; 255
    22a0:	3f 4f       	sbci	r19, 0xFF	; 255
    22a2:	b9 01       	movw	r22, r18
    22a4:	4a e0       	ldi	r20, 0x0A	; 10
    22a6:	50 e0       	ldi	r21, 0x00	; 0
    22a8:	0e 94 83 16 	call	0x2d06	; 0x2d06 <itoa>
   LCD_displayString(buff); /* Display the string */
    22ac:	ce 01       	movw	r24, r28
    22ae:	01 96       	adiw	r24, 0x01	; 1
    22b0:	0e 94 bc 10 	call	0x2178	; 0x2178 <LCD_displayString>
}
    22b4:	62 96       	adiw	r28, 0x12	; 18
    22b6:	0f b6       	in	r0, 0x3f	; 63
    22b8:	f8 94       	cli
    22ba:	de bf       	out	0x3e, r29	; 62
    22bc:	0f be       	out	0x3f, r0	; 63
    22be:	cd bf       	out	0x3d, r28	; 61
    22c0:	cf 91       	pop	r28
    22c2:	df 91       	pop	r29
    22c4:	08 95       	ret

000022c6 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    22c6:	df 93       	push	r29
    22c8:	cf 93       	push	r28
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_sendCommand>
}
    22d4:	cf 91       	pop	r28
    22d6:	df 91       	pop	r29
    22d8:	08 95       	ret

000022da <main>:
#include "uart.h"
#include <util/delay.h>
#include "timer.h"
#include "keypad.h"
int main(void)
{
    22da:	df 93       	push	r29
    22dc:	cf 93       	push	r28
    22de:	cd b7       	in	r28, 0x3d	; 61
    22e0:	de b7       	in	r29, 0x3e	; 62
    22e2:	c8 54       	subi	r28, 0x48	; 72
    22e4:	d0 40       	sbci	r29, 0x00	; 0
    22e6:	0f b6       	in	r0, 0x3f	; 63
    22e8:	f8 94       	cli
    22ea:	de bf       	out	0x3e, r29	; 62
    22ec:	0f be       	out	0x3f, r0	; 63
    22ee:	cd bf       	out	0x3d, r28	; 61
	uint8 result_of_new_password;
	uint8 result_of_saved_password;
	uint8 counter = 0;
    22f0:	1a ae       	std	Y+58, r1	; 0x3a
	/* configuration of Uart */
	Uart_ConfigType config_type = {9600,MODE_8_BIT,DISABLED,STOP_BIT_1};
    22f2:	ce 01       	movw	r24, r28
    22f4:	cd 96       	adiw	r24, 0x3d	; 61
    22f6:	26 96       	adiw	r28, 0x06	; 6
    22f8:	9f af       	std	Y+63, r25	; 0x3f
    22fa:	8e af       	std	Y+62, r24	; 0x3e
    22fc:	26 97       	sbiw	r28, 0x06	; 6
    22fe:	eb e4       	ldi	r30, 0x4B	; 75
    2300:	f1 e0       	ldi	r31, 0x01	; 1
    2302:	28 96       	adiw	r28, 0x08	; 8
    2304:	ff af       	std	Y+63, r31	; 0x3f
    2306:	ee af       	std	Y+62, r30	; 0x3e
    2308:	28 97       	sbiw	r28, 0x08	; 8
    230a:	f7 e0       	ldi	r31, 0x07	; 7
    230c:	29 96       	adiw	r28, 0x09	; 9
    230e:	ff af       	std	Y+63, r31	; 0x3f
    2310:	29 97       	sbiw	r28, 0x09	; 9
    2312:	28 96       	adiw	r28, 0x08	; 8
    2314:	ee ad       	ldd	r30, Y+62	; 0x3e
    2316:	ff ad       	ldd	r31, Y+63	; 0x3f
    2318:	28 97       	sbiw	r28, 0x08	; 8
    231a:	00 80       	ld	r0, Z
    231c:	28 96       	adiw	r28, 0x08	; 8
    231e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2320:	9f ad       	ldd	r25, Y+63	; 0x3f
    2322:	28 97       	sbiw	r28, 0x08	; 8
    2324:	01 96       	adiw	r24, 0x01	; 1
    2326:	28 96       	adiw	r28, 0x08	; 8
    2328:	9f af       	std	Y+63, r25	; 0x3f
    232a:	8e af       	std	Y+62, r24	; 0x3e
    232c:	28 97       	sbiw	r28, 0x08	; 8
    232e:	26 96       	adiw	r28, 0x06	; 6
    2330:	ee ad       	ldd	r30, Y+62	; 0x3e
    2332:	ff ad       	ldd	r31, Y+63	; 0x3f
    2334:	26 97       	sbiw	r28, 0x06	; 6
    2336:	00 82       	st	Z, r0
    2338:	26 96       	adiw	r28, 0x06	; 6
    233a:	8e ad       	ldd	r24, Y+62	; 0x3e
    233c:	9f ad       	ldd	r25, Y+63	; 0x3f
    233e:	26 97       	sbiw	r28, 0x06	; 6
    2340:	01 96       	adiw	r24, 0x01	; 1
    2342:	26 96       	adiw	r28, 0x06	; 6
    2344:	9f af       	std	Y+63, r25	; 0x3f
    2346:	8e af       	std	Y+62, r24	; 0x3e
    2348:	26 97       	sbiw	r28, 0x06	; 6
    234a:	29 96       	adiw	r28, 0x09	; 9
    234c:	9f ad       	ldd	r25, Y+63	; 0x3f
    234e:	29 97       	sbiw	r28, 0x09	; 9
    2350:	91 50       	subi	r25, 0x01	; 1
    2352:	29 96       	adiw	r28, 0x09	; 9
    2354:	9f af       	std	Y+63, r25	; 0x3f
    2356:	29 97       	sbiw	r28, 0x09	; 9
    2358:	29 96       	adiw	r28, 0x09	; 9
    235a:	ef ad       	ldd	r30, Y+63	; 0x3f
    235c:	29 97       	sbiw	r28, 0x09	; 9
    235e:	ee 23       	and	r30, r30
    2360:	c1 f6       	brne	.-80     	; 0x2312 <main+0x38>

	/*initializing both lcd and Uart modules*/
	LCD_init();
    2362:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LCD_init>
	UART_init(&config_type);
    2366:	ce 01       	movw	r24, r28
    2368:	cd 96       	adiw	r24, 0x3d	; 61
    236a:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <UART_init>
		 * 2.if the passwords are not matched the control ECU will send by Uart to HMI ECU that the password are NOT matched
		 * so that the lcd screen will display that the passwords are NOT matched.
		 */
		while(1)
		{
			displayWelcomeString();
    236e:	0e 94 a3 05 	call	0xb46	; 0xb46 <displayWelcomeString>
			displayPasswordOnKeypad();
    2372:	0e 94 07 06 	call	0xc0e	; 0xc0e <displayPasswordOnKeypad>
			displayRepeatPasswordString();
    2376:	0e 94 bc 05 	call	0xb78	; 0xb78 <displayRepeatPasswordString>
			displayPasswordOnKeypad();
    237a:	0e 94 07 06 	call	0xc0e	; 0xc0e <displayPasswordOnKeypad>
			result_of_new_password = UART_recieveByte();
    237e:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <UART_recieveByte>
    2382:	8c af       	std	Y+60, r24	; 0x3c
			if (result_of_new_password == PASSWORDS_ARE_MATCHED)
    2384:	8c ad       	ldd	r24, Y+60	; 0x3c
    2386:	88 23       	and	r24, r24
    2388:	09 f0       	breq	.+2      	; 0x238c <main+0xb2>
    238a:	86 c0       	rjmp	.+268    	; 0x2498 <main+0x1be>
			{
				LCD_clearScreen();
    238c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_clearScreen>
				LCD_displayStringRowColumn(0 , 0 ,"Passwords are ");
    2390:	26 ef       	ldi	r18, 0xF6	; 246
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	60 e0       	ldi	r22, 0x00	; 0
    2398:	a9 01       	movw	r20, r18
    239a:	0e 94 27 11 	call	0x224e	; 0x224e <LCD_displayStringRowColumn>
				LCD_moveCursor(1,3);
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	63 e0       	ldi	r22, 0x03	; 3
    23a2:	0e 94 e5 10 	call	0x21ca	; 0x21ca <LCD_moveCursor>
				LCD_displayString("matched !!! ");
    23a6:	85 e0       	ldi	r24, 0x05	; 5
    23a8:	91 e0       	ldi	r25, 0x01	; 1
    23aa:	0e 94 bc 10 	call	0x2178	; 0x2178 <LCD_displayString>
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	aa ef       	ldi	r26, 0xFA	; 250
    23b4:	b4 e4       	ldi	r27, 0x44	; 68
    23b6:	8d ab       	std	Y+53, r24	; 0x35
    23b8:	9e ab       	std	Y+54, r25	; 0x36
    23ba:	af ab       	std	Y+55, r26	; 0x37
    23bc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23be:	6d a9       	ldd	r22, Y+53	; 0x35
    23c0:	7e a9       	ldd	r23, Y+54	; 0x36
    23c2:	8f a9       	ldd	r24, Y+55	; 0x37
    23c4:	98 ad       	ldd	r25, Y+56	; 0x38
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	4a e7       	ldi	r20, 0x7A	; 122
    23cc:	53 e4       	ldi	r21, 0x43	; 67
    23ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	89 ab       	std	Y+49, r24	; 0x31
    23d8:	9a ab       	std	Y+50, r25	; 0x32
    23da:	ab ab       	std	Y+51, r26	; 0x33
    23dc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23de:	69 a9       	ldd	r22, Y+49	; 0x31
    23e0:	7a a9       	ldd	r23, Y+50	; 0x32
    23e2:	8b a9       	ldd	r24, Y+51	; 0x33
    23e4:	9c a9       	ldd	r25, Y+52	; 0x34
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	40 e8       	ldi	r20, 0x80	; 128
    23ec:	5f e3       	ldi	r21, 0x3F	; 63
    23ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23f2:	88 23       	and	r24, r24
    23f4:	2c f4       	brge	.+10     	; 0x2400 <main+0x126>
		__ticks = 1;
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	98 ab       	std	Y+48, r25	; 0x30
    23fc:	8f a7       	std	Y+47, r24	; 0x2f
    23fe:	3f c0       	rjmp	.+126    	; 0x247e <main+0x1a4>
	else if (__tmp > 65535)
    2400:	69 a9       	ldd	r22, Y+49	; 0x31
    2402:	7a a9       	ldd	r23, Y+50	; 0x32
    2404:	8b a9       	ldd	r24, Y+51	; 0x33
    2406:	9c a9       	ldd	r25, Y+52	; 0x34
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	3f ef       	ldi	r19, 0xFF	; 255
    240c:	4f e7       	ldi	r20, 0x7F	; 127
    240e:	57 e4       	ldi	r21, 0x47	; 71
    2410:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2414:	18 16       	cp	r1, r24
    2416:	4c f5       	brge	.+82     	; 0x246a <main+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2418:	6d a9       	ldd	r22, Y+53	; 0x35
    241a:	7e a9       	ldd	r23, Y+54	; 0x36
    241c:	8f a9       	ldd	r24, Y+55	; 0x37
    241e:	98 ad       	ldd	r25, Y+56	; 0x38
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	40 e2       	ldi	r20, 0x20	; 32
    2426:	51 e4       	ldi	r21, 0x41	; 65
    2428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	bc 01       	movw	r22, r24
    2432:	cd 01       	movw	r24, r26
    2434:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	98 ab       	std	Y+48, r25	; 0x30
    243e:	8f a7       	std	Y+47, r24	; 0x2f
    2440:	0f c0       	rjmp	.+30     	; 0x2460 <main+0x186>
    2442:	89 e1       	ldi	r24, 0x19	; 25
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	9e a7       	std	Y+46, r25	; 0x2e
    2448:	8d a7       	std	Y+45, r24	; 0x2d
    244a:	8d a5       	ldd	r24, Y+45	; 0x2d
    244c:	9e a5       	ldd	r25, Y+46	; 0x2e
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	f1 f7       	brne	.-4      	; 0x244e <main+0x174>
    2452:	9e a7       	std	Y+46, r25	; 0x2e
    2454:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2456:	8f a5       	ldd	r24, Y+47	; 0x2f
    2458:	98 a9       	ldd	r25, Y+48	; 0x30
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	98 ab       	std	Y+48, r25	; 0x30
    245e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2460:	8f a5       	ldd	r24, Y+47	; 0x2f
    2462:	98 a9       	ldd	r25, Y+48	; 0x30
    2464:	00 97       	sbiw	r24, 0x00	; 0
    2466:	69 f7       	brne	.-38     	; 0x2442 <main+0x168>
    2468:	14 c0       	rjmp	.+40     	; 0x2492 <main+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    246a:	69 a9       	ldd	r22, Y+49	; 0x31
    246c:	7a a9       	ldd	r23, Y+50	; 0x32
    246e:	8b a9       	ldd	r24, Y+51	; 0x33
    2470:	9c a9       	ldd	r25, Y+52	; 0x34
    2472:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	98 ab       	std	Y+48, r25	; 0x30
    247c:	8f a7       	std	Y+47, r24	; 0x2f
    247e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2480:	98 a9       	ldd	r25, Y+48	; 0x30
    2482:	9c a7       	std	Y+44, r25	; 0x2c
    2484:	8b a7       	std	Y+43, r24	; 0x2b
    2486:	8b a5       	ldd	r24, Y+43	; 0x2b
    2488:	9c a5       	ldd	r25, Y+44	; 0x2c
    248a:	01 97       	sbiw	r24, 0x01	; 1
    248c:	f1 f7       	brne	.-4      	; 0x248a <main+0x1b0>
    248e:	9c a7       	std	Y+44, r25	; 0x2c
    2490:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(2000);
				LCD_clearScreen();
    2492:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_clearScreen>
    2496:	8a c0       	rjmp	.+276    	; 0x25ac <main+0x2d2>
				break;
			}
			else if (result_of_new_password == PASSWORDS_ARE_NOT_MATCHED)
    2498:	8c ad       	ldd	r24, Y+60	; 0x3c
    249a:	81 30       	cpi	r24, 0x01	; 1
    249c:	09 f0       	breq	.+2      	; 0x24a0 <main+0x1c6>
    249e:	67 cf       	rjmp	.-306    	; 0x236e <main+0x94>
			{
				LCD_clearScreen();
    24a0:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_clearScreen>
				LCD_displayStringRowColumn(0 , 0 ,"Passwords are not");
    24a4:	22 e1       	ldi	r18, 0x12	; 18
    24a6:	31 e0       	ldi	r19, 0x01	; 1
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	60 e0       	ldi	r22, 0x00	; 0
    24ac:	a9 01       	movw	r20, r18
    24ae:	0e 94 27 11 	call	0x224e	; 0x224e <LCD_displayStringRowColumn>
				LCD_moveCursor(1,3);
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	63 e0       	ldi	r22, 0x03	; 3
    24b6:	0e 94 e5 10 	call	0x21ca	; 0x21ca <LCD_moveCursor>
				LCD_displayString("matched !!! ");
    24ba:	85 e0       	ldi	r24, 0x05	; 5
    24bc:	91 e0       	ldi	r25, 0x01	; 1
    24be:	0e 94 bc 10 	call	0x2178	; 0x2178 <LCD_displayString>
    24c2:	80 e0       	ldi	r24, 0x00	; 0
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	aa ef       	ldi	r26, 0xFA	; 250
    24c8:	b4 e4       	ldi	r27, 0x44	; 68
    24ca:	8f a3       	std	Y+39, r24	; 0x27
    24cc:	98 a7       	std	Y+40, r25	; 0x28
    24ce:	a9 a7       	std	Y+41, r26	; 0x29
    24d0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d2:	6f a1       	ldd	r22, Y+39	; 0x27
    24d4:	78 a5       	ldd	r23, Y+40	; 0x28
    24d6:	89 a5       	ldd	r24, Y+41	; 0x29
    24d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	4a e7       	ldi	r20, 0x7A	; 122
    24e0:	53 e4       	ldi	r21, 0x43	; 67
    24e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	8b a3       	std	Y+35, r24	; 0x23
    24ec:	9c a3       	std	Y+36, r25	; 0x24
    24ee:	ad a3       	std	Y+37, r26	; 0x25
    24f0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24f2:	6b a1       	ldd	r22, Y+35	; 0x23
    24f4:	7c a1       	ldd	r23, Y+36	; 0x24
    24f6:	8d a1       	ldd	r24, Y+37	; 0x25
    24f8:	9e a1       	ldd	r25, Y+38	; 0x26
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	40 e8       	ldi	r20, 0x80	; 128
    2500:	5f e3       	ldi	r21, 0x3F	; 63
    2502:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2506:	88 23       	and	r24, r24
    2508:	2c f4       	brge	.+10     	; 0x2514 <main+0x23a>
		__ticks = 1;
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	9a a3       	std	Y+34, r25	; 0x22
    2510:	89 a3       	std	Y+33, r24	; 0x21
    2512:	3f c0       	rjmp	.+126    	; 0x2592 <main+0x2b8>
	else if (__tmp > 65535)
    2514:	6b a1       	ldd	r22, Y+35	; 0x23
    2516:	7c a1       	ldd	r23, Y+36	; 0x24
    2518:	8d a1       	ldd	r24, Y+37	; 0x25
    251a:	9e a1       	ldd	r25, Y+38	; 0x26
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	3f ef       	ldi	r19, 0xFF	; 255
    2520:	4f e7       	ldi	r20, 0x7F	; 127
    2522:	57 e4       	ldi	r21, 0x47	; 71
    2524:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2528:	18 16       	cp	r1, r24
    252a:	4c f5       	brge	.+82     	; 0x257e <main+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252c:	6f a1       	ldd	r22, Y+39	; 0x27
    252e:	78 a5       	ldd	r23, Y+40	; 0x28
    2530:	89 a5       	ldd	r24, Y+41	; 0x29
    2532:	9a a5       	ldd	r25, Y+42	; 0x2a
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	40 e2       	ldi	r20, 0x20	; 32
    253a:	51 e4       	ldi	r21, 0x41	; 65
    253c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	bc 01       	movw	r22, r24
    2546:	cd 01       	movw	r24, r26
    2548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	9a a3       	std	Y+34, r25	; 0x22
    2552:	89 a3       	std	Y+33, r24	; 0x21
    2554:	0f c0       	rjmp	.+30     	; 0x2574 <main+0x29a>
    2556:	89 e1       	ldi	r24, 0x19	; 25
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	98 a3       	std	Y+32, r25	; 0x20
    255c:	8f 8f       	std	Y+31, r24	; 0x1f
    255e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2560:	98 a1       	ldd	r25, Y+32	; 0x20
    2562:	01 97       	sbiw	r24, 0x01	; 1
    2564:	f1 f7       	brne	.-4      	; 0x2562 <main+0x288>
    2566:	98 a3       	std	Y+32, r25	; 0x20
    2568:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256a:	89 a1       	ldd	r24, Y+33	; 0x21
    256c:	9a a1       	ldd	r25, Y+34	; 0x22
    256e:	01 97       	sbiw	r24, 0x01	; 1
    2570:	9a a3       	std	Y+34, r25	; 0x22
    2572:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2574:	89 a1       	ldd	r24, Y+33	; 0x21
    2576:	9a a1       	ldd	r25, Y+34	; 0x22
    2578:	00 97       	sbiw	r24, 0x00	; 0
    257a:	69 f7       	brne	.-38     	; 0x2556 <main+0x27c>
    257c:	14 c0       	rjmp	.+40     	; 0x25a6 <main+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    257e:	6b a1       	ldd	r22, Y+35	; 0x23
    2580:	7c a1       	ldd	r23, Y+36	; 0x24
    2582:	8d a1       	ldd	r24, Y+37	; 0x25
    2584:	9e a1       	ldd	r25, Y+38	; 0x26
    2586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	9a a3       	std	Y+34, r25	; 0x22
    2590:	89 a3       	std	Y+33, r24	; 0x21
    2592:	89 a1       	ldd	r24, Y+33	; 0x21
    2594:	9a a1       	ldd	r25, Y+34	; 0x22
    2596:	9e 8f       	std	Y+30, r25	; 0x1e
    2598:	8d 8f       	std	Y+29, r24	; 0x1d
    259a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    259c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    259e:	01 97       	sbiw	r24, 0x01	; 1
    25a0:	f1 f7       	brne	.-4      	; 0x259e <main+0x2c4>
    25a2:	9e 8f       	std	Y+30, r25	; 0x1e
    25a4:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(2000);
				LCD_clearScreen();
    25a6:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_clearScreen>
    25aa:	e1 ce       	rjmp	.-574    	; 0x236e <main+0x94>
		 * 3. if the user choose either to open door or change the password and fails to enter password for
		 * three times a buzzer alarm will be initiated.
		 * */
		while(1)
		{
			displayMainOptions();
    25ac:	0e 94 ee 05 	call	0xbdc	; 0xbdc <displayMainOptions>
			uint8 key;
			key = KEYPAD_getPressedKey();
    25b0:	0e 94 40 0b 	call	0x1680	; 0x1680 <KEYPAD_getPressedKey>
    25b4:	89 af       	std	Y+57, r24	; 0x39
			if(key == '+')
    25b6:	89 ad       	ldd	r24, Y+57	; 0x39
    25b8:	8b 32       	cpi	r24, 0x2B	; 43
    25ba:	09 f0       	breq	.+2      	; 0x25be <main+0x2e4>
    25bc:	aa c0       	rjmp	.+340    	; 0x2712 <main+0x438>
			{
				while(1)
				{
					displayMainOptionsEnterPass();
    25be:	0e 94 d5 05 	call	0xbaa	; 0xbaa <displayMainOptionsEnterPass>
					displayPasswordOnKeypad();
    25c2:	0e 94 07 06 	call	0xc0e	; 0xc0e <displayPasswordOnKeypad>
					result_of_saved_password = UART_recieveByte();
    25c6:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <UART_recieveByte>
    25ca:	8b af       	std	Y+59, r24	; 0x3b
					if (result_of_saved_password  == PASSWORDS_ARE_MATCHED)
    25cc:	8b ad       	ldd	r24, Y+59	; 0x3b
    25ce:	88 23       	and	r24, r24
    25d0:	49 f4       	brne	.+18     	; 0x25e4 <main+0x30a>
					{
						// open door
						UART_sendByte('+');
    25d2:	8b e2       	ldi	r24, 0x2B	; 43
    25d4:	0e 94 98 15 	call	0x2b30	; 0x2b30 <UART_sendByte>
						UART_sendByte(DOOR_UNLOCKING);
    25d8:	80 e3       	ldi	r24, 0x30	; 48
    25da:	0e 94 98 15 	call	0x2b30	; 0x2b30 <UART_sendByte>
						doorControl();
    25de:	0e 94 9c 07 	call	0xf38	; 0xf38 <doorControl>
    25e2:	97 c0       	rjmp	.+302    	; 0x2712 <main+0x438>
						break;
					}
					else if (result_of_saved_password  == PASSWORDS_ARE_NOT_MATCHED)
    25e4:	8b ad       	ldd	r24, Y+59	; 0x3b
    25e6:	81 30       	cpi	r24, 0x01	; 1
    25e8:	51 f7       	brne	.-44     	; 0x25be <main+0x2e4>
					{
						counter ++;
    25ea:	8a ad       	ldd	r24, Y+58	; 0x3a
    25ec:	8f 5f       	subi	r24, 0xFF	; 255
    25ee:	8a af       	std	Y+58, r24	; 0x3a
						if (counter < 3)
    25f0:	8a ad       	ldd	r24, Y+58	; 0x3a
    25f2:	83 30       	cpi	r24, 0x03	; 3
    25f4:	08 f0       	brcs	.+2      	; 0x25f8 <main+0x31e>
    25f6:	83 c0       	rjmp	.+262    	; 0x26fe <main+0x424>
						{
							LCD_clearScreen();
    25f8:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_clearScreen>
							LCD_displayStringRowColumn(0 , 0 ,"pass is not  ");
    25fc:	24 e2       	ldi	r18, 0x24	; 36
    25fe:	31 e0       	ldi	r19, 0x01	; 1
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	60 e0       	ldi	r22, 0x00	; 0
    2604:	a9 01       	movw	r20, r18
    2606:	0e 94 27 11 	call	0x224e	; 0x224e <LCD_displayStringRowColumn>
							LCD_moveCursor(1,3);
    260a:	81 e0       	ldi	r24, 0x01	; 1
    260c:	63 e0       	ldi	r22, 0x03	; 3
    260e:	0e 94 e5 10 	call	0x21ca	; 0x21ca <LCD_moveCursor>
							LCD_displayString("correct !!! ");
    2612:	82 e3       	ldi	r24, 0x32	; 50
    2614:	91 e0       	ldi	r25, 0x01	; 1
    2616:	0e 94 bc 10 	call	0x2178	; 0x2178 <LCD_displayString>
    261a:	80 e0       	ldi	r24, 0x00	; 0
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	aa ef       	ldi	r26, 0xFA	; 250
    2620:	b4 e4       	ldi	r27, 0x44	; 68
    2622:	89 8f       	std	Y+25, r24	; 0x19
    2624:	9a 8f       	std	Y+26, r25	; 0x1a
    2626:	ab 8f       	std	Y+27, r26	; 0x1b
    2628:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    262a:	69 8d       	ldd	r22, Y+25	; 0x19
    262c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    262e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2630:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	4a e7       	ldi	r20, 0x7A	; 122
    2638:	53 e4       	ldi	r21, 0x43	; 67
    263a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	8d 8b       	std	Y+21, r24	; 0x15
    2644:	9e 8b       	std	Y+22, r25	; 0x16
    2646:	af 8b       	std	Y+23, r26	; 0x17
    2648:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    264a:	6d 89       	ldd	r22, Y+21	; 0x15
    264c:	7e 89       	ldd	r23, Y+22	; 0x16
    264e:	8f 89       	ldd	r24, Y+23	; 0x17
    2650:	98 8d       	ldd	r25, Y+24	; 0x18
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	40 e8       	ldi	r20, 0x80	; 128
    2658:	5f e3       	ldi	r21, 0x3F	; 63
    265a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    265e:	88 23       	and	r24, r24
    2660:	2c f4       	brge	.+10     	; 0x266c <main+0x392>
		__ticks = 1;
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	9c 8b       	std	Y+20, r25	; 0x14
    2668:	8b 8b       	std	Y+19, r24	; 0x13
    266a:	3f c0       	rjmp	.+126    	; 0x26ea <main+0x410>
	else if (__tmp > 65535)
    266c:	6d 89       	ldd	r22, Y+21	; 0x15
    266e:	7e 89       	ldd	r23, Y+22	; 0x16
    2670:	8f 89       	ldd	r24, Y+23	; 0x17
    2672:	98 8d       	ldd	r25, Y+24	; 0x18
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	3f ef       	ldi	r19, 0xFF	; 255
    2678:	4f e7       	ldi	r20, 0x7F	; 127
    267a:	57 e4       	ldi	r21, 0x47	; 71
    267c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2680:	18 16       	cp	r1, r24
    2682:	4c f5       	brge	.+82     	; 0x26d6 <main+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2684:	69 8d       	ldd	r22, Y+25	; 0x19
    2686:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2688:	8b 8d       	ldd	r24, Y+27	; 0x1b
    268a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    268c:	20 e0       	ldi	r18, 0x00	; 0
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	40 e2       	ldi	r20, 0x20	; 32
    2692:	51 e4       	ldi	r21, 0x41	; 65
    2694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	bc 01       	movw	r22, r24
    269e:	cd 01       	movw	r24, r26
    26a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	9c 8b       	std	Y+20, r25	; 0x14
    26aa:	8b 8b       	std	Y+19, r24	; 0x13
    26ac:	0f c0       	rjmp	.+30     	; 0x26cc <main+0x3f2>
    26ae:	89 e1       	ldi	r24, 0x19	; 25
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	9a 8b       	std	Y+18, r25	; 0x12
    26b4:	89 8b       	std	Y+17, r24	; 0x11
    26b6:	89 89       	ldd	r24, Y+17	; 0x11
    26b8:	9a 89       	ldd	r25, Y+18	; 0x12
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	f1 f7       	brne	.-4      	; 0x26ba <main+0x3e0>
    26be:	9a 8b       	std	Y+18, r25	; 0x12
    26c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c2:	8b 89       	ldd	r24, Y+19	; 0x13
    26c4:	9c 89       	ldd	r25, Y+20	; 0x14
    26c6:	01 97       	sbiw	r24, 0x01	; 1
    26c8:	9c 8b       	std	Y+20, r25	; 0x14
    26ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26cc:	8b 89       	ldd	r24, Y+19	; 0x13
    26ce:	9c 89       	ldd	r25, Y+20	; 0x14
    26d0:	00 97       	sbiw	r24, 0x00	; 0
    26d2:	69 f7       	brne	.-38     	; 0x26ae <main+0x3d4>
    26d4:	14 c0       	rjmp	.+40     	; 0x26fe <main+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d6:	6d 89       	ldd	r22, Y+21	; 0x15
    26d8:	7e 89       	ldd	r23, Y+22	; 0x16
    26da:	8f 89       	ldd	r24, Y+23	; 0x17
    26dc:	98 8d       	ldd	r25, Y+24	; 0x18
    26de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	9c 8b       	std	Y+20, r25	; 0x14
    26e8:	8b 8b       	std	Y+19, r24	; 0x13
    26ea:	8b 89       	ldd	r24, Y+19	; 0x13
    26ec:	9c 89       	ldd	r25, Y+20	; 0x14
    26ee:	98 8b       	std	Y+16, r25	; 0x10
    26f0:	8f 87       	std	Y+15, r24	; 0x0f
    26f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    26f4:	98 89       	ldd	r25, Y+16	; 0x10
    26f6:	01 97       	sbiw	r24, 0x01	; 1
    26f8:	f1 f7       	brne	.-4      	; 0x26f6 <main+0x41c>
    26fa:	98 8b       	std	Y+16, r25	; 0x10
    26fc:	8f 87       	std	Y+15, r24	; 0x0f
							_delay_ms(2000);
						}
						if (counter == 3)
    26fe:	8a ad       	ldd	r24, Y+58	; 0x3a
    2700:	83 30       	cpi	r24, 0x03	; 3
    2702:	09 f0       	breq	.+2      	; 0x2706 <main+0x42c>
    2704:	5c cf       	rjmp	.-328    	; 0x25be <main+0x2e4>
						{
							//buzzer alaaaaaarm
							UART_sendByte(BURGULAR);
    2706:	80 e4       	ldi	r24, 0x40	; 64
    2708:	0e 94 98 15 	call	0x2b30	; 0x2b30 <UART_sendByte>
							buzzerForBurgulars();
    270c:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <buzzerForBurgulars>
							counter = 0;
    2710:	1a ae       	std	Y+58, r1	; 0x3a
							break;
						}
					}
				}
			}
			if (key == '-')
    2712:	89 ad       	ldd	r24, Y+57	; 0x39
    2714:	8d 32       	cpi	r24, 0x2D	; 45
    2716:	09 f0       	breq	.+2      	; 0x271a <main+0x440>
    2718:	a4 c0       	rjmp	.+328    	; 0x2862 <main+0x588>
			{
				while(1)
				{
					displayMainOptionsEnterPass();
    271a:	0e 94 d5 05 	call	0xbaa	; 0xbaa <displayMainOptionsEnterPass>
					displayPasswordOnKeypad();
    271e:	0e 94 07 06 	call	0xc0e	; 0xc0e <displayPasswordOnKeypad>
					result_of_saved_password = UART_recieveByte();
    2722:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <UART_recieveByte>
    2726:	8b af       	std	Y+59, r24	; 0x3b
					if (result_of_saved_password  == PASSWORDS_ARE_MATCHED)
    2728:	8b ad       	ldd	r24, Y+59	; 0x3b
    272a:	88 23       	and	r24, r24
    272c:	21 f4       	brne	.+8      	; 0x2736 <main+0x45c>
					{
						UART_sendByte('-');
    272e:	8d e2       	ldi	r24, 0x2D	; 45
    2730:	0e 94 98 15 	call	0x2b30	; 0x2b30 <UART_sendByte>
    2734:	96 c0       	rjmp	.+300    	; 0x2862 <main+0x588>
						break;
					}
					else if (result_of_saved_password  == PASSWORDS_ARE_NOT_MATCHED)
    2736:	8b ad       	ldd	r24, Y+59	; 0x3b
    2738:	81 30       	cpi	r24, 0x01	; 1
    273a:	79 f7       	brne	.-34     	; 0x271a <main+0x440>
					{
						counter ++;
    273c:	8a ad       	ldd	r24, Y+58	; 0x3a
    273e:	8f 5f       	subi	r24, 0xFF	; 255
    2740:	8a af       	std	Y+58, r24	; 0x3a
						if (counter < 3)
    2742:	8a ad       	ldd	r24, Y+58	; 0x3a
    2744:	83 30       	cpi	r24, 0x03	; 3
    2746:	08 f0       	brcs	.+2      	; 0x274a <main+0x470>
    2748:	83 c0       	rjmp	.+262    	; 0x2850 <main+0x576>
						{
							LCD_clearScreen();
    274a:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_clearScreen>
							LCD_displayStringRowColumn(0 , 0 ,"pass is not  ");
    274e:	24 e2       	ldi	r18, 0x24	; 36
    2750:	31 e0       	ldi	r19, 0x01	; 1
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	60 e0       	ldi	r22, 0x00	; 0
    2756:	a9 01       	movw	r20, r18
    2758:	0e 94 27 11 	call	0x224e	; 0x224e <LCD_displayStringRowColumn>
							LCD_moveCursor(1,3);
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	63 e0       	ldi	r22, 0x03	; 3
    2760:	0e 94 e5 10 	call	0x21ca	; 0x21ca <LCD_moveCursor>
							LCD_displayString("correct !!! ");
    2764:	82 e3       	ldi	r24, 0x32	; 50
    2766:	91 e0       	ldi	r25, 0x01	; 1
    2768:	0e 94 bc 10 	call	0x2178	; 0x2178 <LCD_displayString>
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	aa ef       	ldi	r26, 0xFA	; 250
    2772:	b4 e4       	ldi	r27, 0x44	; 68
    2774:	8b 87       	std	Y+11, r24	; 0x0b
    2776:	9c 87       	std	Y+12, r25	; 0x0c
    2778:	ad 87       	std	Y+13, r26	; 0x0d
    277a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    277c:	6b 85       	ldd	r22, Y+11	; 0x0b
    277e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2780:	8d 85       	ldd	r24, Y+13	; 0x0d
    2782:	9e 85       	ldd	r25, Y+14	; 0x0e
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	4a e7       	ldi	r20, 0x7A	; 122
    278a:	53 e4       	ldi	r21, 0x43	; 67
    278c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	8f 83       	std	Y+7, r24	; 0x07
    2796:	98 87       	std	Y+8, r25	; 0x08
    2798:	a9 87       	std	Y+9, r26	; 0x09
    279a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    279c:	6f 81       	ldd	r22, Y+7	; 0x07
    279e:	78 85       	ldd	r23, Y+8	; 0x08
    27a0:	89 85       	ldd	r24, Y+9	; 0x09
    27a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	40 e8       	ldi	r20, 0x80	; 128
    27aa:	5f e3       	ldi	r21, 0x3F	; 63
    27ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27b0:	88 23       	and	r24, r24
    27b2:	2c f4       	brge	.+10     	; 0x27be <main+0x4e4>
		__ticks = 1;
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	9e 83       	std	Y+6, r25	; 0x06
    27ba:	8d 83       	std	Y+5, r24	; 0x05
    27bc:	3f c0       	rjmp	.+126    	; 0x283c <main+0x562>
	else if (__tmp > 65535)
    27be:	6f 81       	ldd	r22, Y+7	; 0x07
    27c0:	78 85       	ldd	r23, Y+8	; 0x08
    27c2:	89 85       	ldd	r24, Y+9	; 0x09
    27c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	3f ef       	ldi	r19, 0xFF	; 255
    27ca:	4f e7       	ldi	r20, 0x7F	; 127
    27cc:	57 e4       	ldi	r21, 0x47	; 71
    27ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27d2:	18 16       	cp	r1, r24
    27d4:	4c f5       	brge	.+82     	; 0x2828 <main+0x54e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    27d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    27da:	8d 85       	ldd	r24, Y+13	; 0x0d
    27dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	40 e2       	ldi	r20, 0x20	; 32
    27e4:	51 e4       	ldi	r21, 0x41	; 65
    27e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	bc 01       	movw	r22, r24
    27f0:	cd 01       	movw	r24, r26
    27f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	9e 83       	std	Y+6, r25	; 0x06
    27fc:	8d 83       	std	Y+5, r24	; 0x05
    27fe:	0f c0       	rjmp	.+30     	; 0x281e <main+0x544>
    2800:	89 e1       	ldi	r24, 0x19	; 25
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	9c 83       	std	Y+4, r25	; 0x04
    2806:	8b 83       	std	Y+3, r24	; 0x03
    2808:	8b 81       	ldd	r24, Y+3	; 0x03
    280a:	9c 81       	ldd	r25, Y+4	; 0x04
    280c:	01 97       	sbiw	r24, 0x01	; 1
    280e:	f1 f7       	brne	.-4      	; 0x280c <main+0x532>
    2810:	9c 83       	std	Y+4, r25	; 0x04
    2812:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2814:	8d 81       	ldd	r24, Y+5	; 0x05
    2816:	9e 81       	ldd	r25, Y+6	; 0x06
    2818:	01 97       	sbiw	r24, 0x01	; 1
    281a:	9e 83       	std	Y+6, r25	; 0x06
    281c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281e:	8d 81       	ldd	r24, Y+5	; 0x05
    2820:	9e 81       	ldd	r25, Y+6	; 0x06
    2822:	00 97       	sbiw	r24, 0x00	; 0
    2824:	69 f7       	brne	.-38     	; 0x2800 <main+0x526>
    2826:	14 c0       	rjmp	.+40     	; 0x2850 <main+0x576>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2828:	6f 81       	ldd	r22, Y+7	; 0x07
    282a:	78 85       	ldd	r23, Y+8	; 0x08
    282c:	89 85       	ldd	r24, Y+9	; 0x09
    282e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	9e 83       	std	Y+6, r25	; 0x06
    283a:	8d 83       	std	Y+5, r24	; 0x05
    283c:	8d 81       	ldd	r24, Y+5	; 0x05
    283e:	9e 81       	ldd	r25, Y+6	; 0x06
    2840:	9a 83       	std	Y+2, r25	; 0x02
    2842:	89 83       	std	Y+1, r24	; 0x01
    2844:	89 81       	ldd	r24, Y+1	; 0x01
    2846:	9a 81       	ldd	r25, Y+2	; 0x02
    2848:	01 97       	sbiw	r24, 0x01	; 1
    284a:	f1 f7       	brne	.-4      	; 0x2848 <main+0x56e>
    284c:	9a 83       	std	Y+2, r25	; 0x02
    284e:	89 83       	std	Y+1, r24	; 0x01
							_delay_ms(2000);
						}
						if (counter == 3)
    2850:	8a ad       	ldd	r24, Y+58	; 0x3a
    2852:	83 30       	cpi	r24, 0x03	; 3
    2854:	09 f0       	breq	.+2      	; 0x2858 <main+0x57e>
    2856:	61 cf       	rjmp	.-318    	; 0x271a <main+0x440>
						{
							//buzzer alaaaaaarm
							UART_sendByte(BURGULAR);
    2858:	80 e4       	ldi	r24, 0x40	; 64
    285a:	0e 94 98 15 	call	0x2b30	; 0x2b30 <UART_sendByte>
							buzzerForBurgulars();
    285e:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <buzzerForBurgulars>
							break;
						}
					}
				}
			}
			if ((key == '-') && (counter < 3))
    2862:	89 ad       	ldd	r24, Y+57	; 0x39
    2864:	8d 32       	cpi	r24, 0x2D	; 45
    2866:	09 f0       	breq	.+2      	; 0x286a <main+0x590>
    2868:	a1 ce       	rjmp	.-702    	; 0x25ac <main+0x2d2>
    286a:	8a ad       	ldd	r24, Y+58	; 0x3a
    286c:	83 30       	cpi	r24, 0x03	; 3
    286e:	08 f4       	brcc	.+2      	; 0x2872 <main+0x598>
    2870:	7e cd       	rjmp	.-1284   	; 0x236e <main+0x94>
    2872:	9c ce       	rjmp	.-712    	; 0x25ac <main+0x2d2>

00002874 <__vector_9>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_OVF_vect)
{
    2874:	1f 92       	push	r1
    2876:	0f 92       	push	r0
    2878:	0f b6       	in	r0, 0x3f	; 63
    287a:	0f 92       	push	r0
    287c:	11 24       	eor	r1, r1
    287e:	2f 93       	push	r18
    2880:	3f 93       	push	r19
    2882:	4f 93       	push	r20
    2884:	5f 93       	push	r21
    2886:	6f 93       	push	r22
    2888:	7f 93       	push	r23
    288a:	8f 93       	push	r24
    288c:	9f 93       	push	r25
    288e:	af 93       	push	r26
    2890:	bf 93       	push	r27
    2892:	ef 93       	push	r30
    2894:	ff 93       	push	r31
    2896:	df 93       	push	r29
    2898:	cf 93       	push	r28
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    289e:	80 91 54 01 	lds	r24, 0x0154
    28a2:	90 91 55 01 	lds	r25, 0x0155
    28a6:	00 97       	sbiw	r24, 0x00	; 0
    28a8:	29 f0       	breq	.+10     	; 0x28b4 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the timer finished counting using either overflow mode or compare mode */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    28aa:	e0 91 54 01 	lds	r30, 0x0154
    28ae:	f0 91 55 01 	lds	r31, 0x0155
    28b2:	09 95       	icall
	}
}
    28b4:	cf 91       	pop	r28
    28b6:	df 91       	pop	r29
    28b8:	ff 91       	pop	r31
    28ba:	ef 91       	pop	r30
    28bc:	bf 91       	pop	r27
    28be:	af 91       	pop	r26
    28c0:	9f 91       	pop	r25
    28c2:	8f 91       	pop	r24
    28c4:	7f 91       	pop	r23
    28c6:	6f 91       	pop	r22
    28c8:	5f 91       	pop	r21
    28ca:	4f 91       	pop	r20
    28cc:	3f 91       	pop	r19
    28ce:	2f 91       	pop	r18
    28d0:	0f 90       	pop	r0
    28d2:	0f be       	out	0x3f, r0	; 63
    28d4:	0f 90       	pop	r0
    28d6:	1f 90       	pop	r1
    28d8:	18 95       	reti

000028da <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    28da:	1f 92       	push	r1
    28dc:	0f 92       	push	r0
    28de:	0f b6       	in	r0, 0x3f	; 63
    28e0:	0f 92       	push	r0
    28e2:	11 24       	eor	r1, r1
    28e4:	2f 93       	push	r18
    28e6:	3f 93       	push	r19
    28e8:	4f 93       	push	r20
    28ea:	5f 93       	push	r21
    28ec:	6f 93       	push	r22
    28ee:	7f 93       	push	r23
    28f0:	8f 93       	push	r24
    28f2:	9f 93       	push	r25
    28f4:	af 93       	push	r26
    28f6:	bf 93       	push	r27
    28f8:	ef 93       	push	r30
    28fa:	ff 93       	push	r31
    28fc:	df 93       	push	r29
    28fe:	cf 93       	push	r28
    2900:	cd b7       	in	r28, 0x3d	; 61
    2902:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2904:	80 91 54 01 	lds	r24, 0x0154
    2908:	90 91 55 01 	lds	r25, 0x0155
    290c:	00 97       	sbiw	r24, 0x00	; 0
    290e:	29 f0       	breq	.+10     	; 0x291a <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the timer finished counting using either overflow mode or compare mode */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2910:	e0 91 54 01 	lds	r30, 0x0154
    2914:	f0 91 55 01 	lds	r31, 0x0155
    2918:	09 95       	icall
	}
}
    291a:	cf 91       	pop	r28
    291c:	df 91       	pop	r29
    291e:	ff 91       	pop	r31
    2920:	ef 91       	pop	r30
    2922:	bf 91       	pop	r27
    2924:	af 91       	pop	r26
    2926:	9f 91       	pop	r25
    2928:	8f 91       	pop	r24
    292a:	7f 91       	pop	r23
    292c:	6f 91       	pop	r22
    292e:	5f 91       	pop	r21
    2930:	4f 91       	pop	r20
    2932:	3f 91       	pop	r19
    2934:	2f 91       	pop	r18
    2936:	0f 90       	pop	r0
    2938:	0f be       	out	0x3f, r0	; 63
    293a:	0f 90       	pop	r0
    293c:	1f 90       	pop	r1
    293e:	18 95       	reti

00002940 <Timer0_init>:
 * 	6. set compare value if compare mode was selected
 * 	7. enable compare mode interrupt if compare mode was selected
 * 	8. enable global interrupt
 */
void Timer0_init(TIMER_ConfigType * Config_Ptr)
{
    2940:	df 93       	push	r29
    2942:	cf 93       	push	r28
    2944:	00 d0       	rcall	.+0      	; 0x2946 <Timer0_init+0x6>
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
    294a:	9a 83       	std	Y+2, r25	; 0x02
    294c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Config_Ptr->initial_value; // Set Timer0 initial value
    294e:	a2 e5       	ldi	r26, 0x52	; 82
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	e9 81       	ldd	r30, Y+1	; 0x01
    2954:	fa 81       	ldd	r31, Y+2	; 0x02
    2956:	82 81       	ldd	r24, Z+2	; 0x02
    2958:	8c 93       	st	X, r24

	TCCR0 = (1<<FOC0);   // Non PWM mode FOC0=1
    295a:	e3 e5       	ldi	r30, 0x53	; 83
    295c:	f0 e0       	ldi	r31, 0x00	; 0
    295e:	80 e8       	ldi	r24, 0x80	; 128
    2960:	80 83       	st	Z, r24

	TCCR0 |= Config_Ptr->mode; // configure mode either overflow mode or compare mode
    2962:	a3 e5       	ldi	r26, 0x53	; 83
    2964:	b0 e0       	ldi	r27, 0x00	; 0
    2966:	e3 e5       	ldi	r30, 0x53	; 83
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	90 81       	ld	r25, Z
    296c:	e9 81       	ldd	r30, Y+1	; 0x01
    296e:	fa 81       	ldd	r31, Y+2	; 0x02
    2970:	80 81       	ld	r24, Z
    2972:	89 2b       	or	r24, r25
    2974:	8c 93       	st	X, r24

	TCCR0 |= Config_Ptr->prescaler; // configuration of prescaler
    2976:	a3 e5       	ldi	r26, 0x53	; 83
    2978:	b0 e0       	ldi	r27, 0x00	; 0
    297a:	e3 e5       	ldi	r30, 0x53	; 83
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	90 81       	ld	r25, Z
    2980:	e9 81       	ldd	r30, Y+1	; 0x01
    2982:	fa 81       	ldd	r31, Y+2	; 0x02
    2984:	81 81       	ldd	r24, Z+1	; 0x01
    2986:	89 2b       	or	r24, r25
    2988:	8c 93       	st	X, r24

	if(Config_Ptr->mode == OVF_MODE)
    298a:	e9 81       	ldd	r30, Y+1	; 0x01
    298c:	fa 81       	ldd	r31, Y+2	; 0x02
    298e:	80 81       	ld	r24, Z
    2990:	88 23       	and	r24, r24
    2992:	41 f4       	brne	.+16     	; 0x29a4 <Timer0_init+0x64>
	{
		TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
    2994:	a9 e5       	ldi	r26, 0x59	; 89
    2996:	b0 e0       	ldi	r27, 0x00	; 0
    2998:	e9 e5       	ldi	r30, 0x59	; 89
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	80 81       	ld	r24, Z
    299e:	81 60       	ori	r24, 0x01	; 1
    29a0:	8c 93       	st	X, r24
    29a2:	12 c0       	rjmp	.+36     	; 0x29c8 <Timer0_init+0x88>
	}
	else if (Config_Ptr->mode == COMP_MODE)
    29a4:	e9 81       	ldd	r30, Y+1	; 0x01
    29a6:	fa 81       	ldd	r31, Y+2	; 0x02
    29a8:	80 81       	ld	r24, Z
    29aa:	88 30       	cpi	r24, 0x08	; 8
    29ac:	69 f4       	brne	.+26     	; 0x29c8 <Timer0_init+0x88>
	{
		OCR0 = Config_Ptr->compare_value; // configuration of compare value if comapre mode was selected
    29ae:	ac e5       	ldi	r26, 0x5C	; 92
    29b0:	b0 e0       	ldi	r27, 0x00	; 0
    29b2:	e9 81       	ldd	r30, Y+1	; 0x01
    29b4:	fa 81       	ldd	r31, Y+2	; 0x02
    29b6:	83 81       	ldd	r24, Z+3	; 0x03
    29b8:	8c 93       	st	X, r24
		TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
    29ba:	a9 e5       	ldi	r26, 0x59	; 89
    29bc:	b0 e0       	ldi	r27, 0x00	; 0
    29be:	e9 e5       	ldi	r30, 0x59	; 89
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	80 81       	ld	r24, Z
    29c4:	82 60       	ori	r24, 0x02	; 2
    29c6:	8c 93       	st	X, r24
	}

	SREG |= (1<<7); //enable global interrupt
    29c8:	af e5       	ldi	r26, 0x5F	; 95
    29ca:	b0 e0       	ldi	r27, 0x00	; 0
    29cc:	ef e5       	ldi	r30, 0x5F	; 95
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	80 81       	ld	r24, Z
    29d2:	80 68       	ori	r24, 0x80	; 128
    29d4:	8c 93       	st	X, r24
}
    29d6:	0f 90       	pop	r0
    29d8:	0f 90       	pop	r0
    29da:	cf 91       	pop	r28
    29dc:	df 91       	pop	r29
    29de:	08 95       	ret

000029e0 <Timer0_setCallBack>:
/*
 * Description: Function to set the Call Back function address.
*/

void Timer0_setCallBack(void(*a_ptr)(void))
{
    29e0:	df 93       	push	r29
    29e2:	cf 93       	push	r28
    29e4:	00 d0       	rcall	.+0      	; 0x29e6 <Timer0_setCallBack+0x6>
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62
    29ea:	9a 83       	std	Y+2, r25	; 0x02
    29ec:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    29ee:	89 81       	ldd	r24, Y+1	; 0x01
    29f0:	9a 81       	ldd	r25, Y+2	; 0x02
    29f2:	90 93 55 01 	sts	0x0155, r25
    29f6:	80 93 54 01 	sts	0x0154, r24
}
    29fa:	0f 90       	pop	r0
    29fc:	0f 90       	pop	r0
    29fe:	cf 91       	pop	r28
    2a00:	df 91       	pop	r29
    2a02:	08 95       	ret

00002a04 <Timer0_DeInit>:
/*
 * Description: Function to disable the Timer0
 */

void Timer0_DeInit(void)
{
    2a04:	df 93       	push	r29
    2a06:	cf 93       	push	r28
    2a08:	cd b7       	in	r28, 0x3d	; 61
    2a0a:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    2a0c:	e3 e5       	ldi	r30, 0x53	; 83
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	10 82       	st	Z, r1

}
    2a12:	cf 91       	pop	r28
    2a14:	df 91       	pop	r29
    2a16:	08 95       	ret

00002a18 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const Uart_ConfigType * Config_Ptr)
{
    2a18:	df 93       	push	r29
    2a1a:	cf 93       	push	r28
    2a1c:	00 d0       	rcall	.+0      	; 0x2a1e <UART_init+0x6>
    2a1e:	00 d0       	rcall	.+0      	; 0x2a20 <UART_init+0x8>
    2a20:	cd b7       	in	r28, 0x3d	; 61
    2a22:	de b7       	in	r29, 0x3e	; 62
    2a24:	9c 83       	std	Y+4, r25	; 0x04
    2a26:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2a28:	1a 82       	std	Y+2, r1	; 0x02
    2a2a:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2a2c:	eb e2       	ldi	r30, 0x2B	; 43
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	82 e0       	ldi	r24, 0x02	; 2
    2a32:	80 83       	st	Z, r24

	/*enable transmitter and receiver*/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2a34:	ea e2       	ldi	r30, 0x2A	; 42
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	88 e1       	ldi	r24, 0x18	; 24
    2a3a:	80 83       	st	Z, r24

	/*configure data bits by inserting 2 bits into UCSRC (UCSZ1:0) and inserting 1 bit into UCSRB (UCSZ2) from the databit configuration*/
	UCSRB|= (Config_Ptr->data_bit & 0x04);
    2a3c:	aa e2       	ldi	r26, 0x2A	; 42
    2a3e:	b0 e0       	ldi	r27, 0x00	; 0
    2a40:	ea e2       	ldi	r30, 0x2A	; 42
    2a42:	f0 e0       	ldi	r31, 0x00	; 0
    2a44:	80 81       	ld	r24, Z
    2a46:	98 2f       	mov	r25, r24
    2a48:	eb 81       	ldd	r30, Y+3	; 0x03
    2a4a:	fc 81       	ldd	r31, Y+4	; 0x04
    2a4c:	84 81       	ldd	r24, Z+4	; 0x04
    2a4e:	84 70       	andi	r24, 0x04	; 4
    2a50:	89 2b       	or	r24, r25
    2a52:	8c 93       	st	X, r24

	UCSRC = (1<<URSEL);      /* URSEL   = 1 The URSEL must be one when writing the UCSRC*/
    2a54:	e0 e4       	ldi	r30, 0x40	; 64
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	80 e8       	ldi	r24, 0x80	; 128
    2a5a:	80 83       	st	Z, r24

	UCSRC |= ((Config_Ptr->data_bit & 0x03) << 1);
    2a5c:	a0 e4       	ldi	r26, 0x40	; 64
    2a5e:	b0 e0       	ldi	r27, 0x00	; 0
    2a60:	e0 e4       	ldi	r30, 0x40	; 64
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	80 81       	ld	r24, Z
    2a66:	28 2f       	mov	r18, r24
    2a68:	eb 81       	ldd	r30, Y+3	; 0x03
    2a6a:	fc 81       	ldd	r31, Y+4	; 0x04
    2a6c:	84 81       	ldd	r24, Z+4	; 0x04
    2a6e:	88 2f       	mov	r24, r24
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	83 70       	andi	r24, 0x03	; 3
    2a74:	90 70       	andi	r25, 0x00	; 0
    2a76:	88 0f       	add	r24, r24
    2a78:	99 1f       	adc	r25, r25
    2a7a:	82 2b       	or	r24, r18
    2a7c:	8c 93       	st	X, r24

	/*configure partiy mode*/
	UCSRC |= (Config_Ptr->parity << 4);
    2a7e:	a0 e4       	ldi	r26, 0x40	; 64
    2a80:	b0 e0       	ldi	r27, 0x00	; 0
    2a82:	e0 e4       	ldi	r30, 0x40	; 64
    2a84:	f0 e0       	ldi	r31, 0x00	; 0
    2a86:	80 81       	ld	r24, Z
    2a88:	28 2f       	mov	r18, r24
    2a8a:	eb 81       	ldd	r30, Y+3	; 0x03
    2a8c:	fc 81       	ldd	r31, Y+4	; 0x04
    2a8e:	85 81       	ldd	r24, Z+5	; 0x05
    2a90:	88 2f       	mov	r24, r24
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	82 95       	swap	r24
    2a96:	92 95       	swap	r25
    2a98:	90 7f       	andi	r25, 0xF0	; 240
    2a9a:	98 27       	eor	r25, r24
    2a9c:	80 7f       	andi	r24, 0xF0	; 240
    2a9e:	98 27       	eor	r25, r24
    2aa0:	82 2b       	or	r24, r18
    2aa2:	8c 93       	st	X, r24

	/*configure stop bit*/
	UCSRC |= (Config_Ptr->stop_bit << 3);
    2aa4:	a0 e4       	ldi	r26, 0x40	; 64
    2aa6:	b0 e0       	ldi	r27, 0x00	; 0
    2aa8:	e0 e4       	ldi	r30, 0x40	; 64
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	80 81       	ld	r24, Z
    2aae:	28 2f       	mov	r18, r24
    2ab0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ab2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ab4:	86 81       	ldd	r24, Z+6	; 0x06
    2ab6:	88 2f       	mov	r24, r24
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	88 0f       	add	r24, r24
    2abc:	99 1f       	adc	r25, r25
    2abe:	88 0f       	add	r24, r24
    2ac0:	99 1f       	adc	r25, r25
    2ac2:	88 0f       	add	r24, r24
    2ac4:	99 1f       	adc	r25, r25
    2ac6:	82 2b       	or	r24, r18
    2ac8:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2aca:	eb 81       	ldd	r30, Y+3	; 0x03
    2acc:	fc 81       	ldd	r31, Y+4	; 0x04
    2ace:	80 81       	ld	r24, Z
    2ad0:	91 81       	ldd	r25, Z+1	; 0x01
    2ad2:	a2 81       	ldd	r26, Z+2	; 0x02
    2ad4:	b3 81       	ldd	r27, Z+3	; 0x03
    2ad6:	88 0f       	add	r24, r24
    2ad8:	99 1f       	adc	r25, r25
    2ada:	aa 1f       	adc	r26, r26
    2adc:	bb 1f       	adc	r27, r27
    2ade:	88 0f       	add	r24, r24
    2ae0:	99 1f       	adc	r25, r25
    2ae2:	aa 1f       	adc	r26, r26
    2ae4:	bb 1f       	adc	r27, r27
    2ae6:	88 0f       	add	r24, r24
    2ae8:	99 1f       	adc	r25, r25
    2aea:	aa 1f       	adc	r26, r26
    2aec:	bb 1f       	adc	r27, r27
    2aee:	9c 01       	movw	r18, r24
    2af0:	ad 01       	movw	r20, r26
    2af2:	80 e4       	ldi	r24, 0x40	; 64
    2af4:	92 e4       	ldi	r25, 0x42	; 66
    2af6:	af e0       	ldi	r26, 0x0F	; 15
    2af8:	b0 e0       	ldi	r27, 0x00	; 0
    2afa:	bc 01       	movw	r22, r24
    2afc:	cd 01       	movw	r24, r26
    2afe:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <__udivmodsi4>
    2b02:	da 01       	movw	r26, r20
    2b04:	c9 01       	movw	r24, r18
    2b06:	01 97       	sbiw	r24, 0x01	; 1
    2b08:	9a 83       	std	Y+2, r25	; 0x02
    2b0a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2b0c:	e0 e4       	ldi	r30, 0x40	; 64
    2b0e:	f0 e0       	ldi	r31, 0x00	; 0
    2b10:	89 81       	ldd	r24, Y+1	; 0x01
    2b12:	9a 81       	ldd	r25, Y+2	; 0x02
    2b14:	89 2f       	mov	r24, r25
    2b16:	99 27       	eor	r25, r25
    2b18:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2b1a:	e9 e2       	ldi	r30, 0x29	; 41
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	89 81       	ldd	r24, Y+1	; 0x01
    2b20:	80 83       	st	Z, r24
}
    2b22:	0f 90       	pop	r0
    2b24:	0f 90       	pop	r0
    2b26:	0f 90       	pop	r0
    2b28:	0f 90       	pop	r0
    2b2a:	cf 91       	pop	r28
    2b2c:	df 91       	pop	r29
    2b2e:	08 95       	ret

00002b30 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2b30:	df 93       	push	r29
    2b32:	cf 93       	push	r28
    2b34:	0f 92       	push	r0
    2b36:	cd b7       	in	r28, 0x3d	; 61
    2b38:	de b7       	in	r29, 0x3e	; 62
    2b3a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2b3c:	eb e2       	ldi	r30, 0x2B	; 43
    2b3e:	f0 e0       	ldi	r31, 0x00	; 0
    2b40:	80 81       	ld	r24, Z
    2b42:	88 2f       	mov	r24, r24
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	80 72       	andi	r24, 0x20	; 32
    2b48:	90 70       	andi	r25, 0x00	; 0
    2b4a:	00 97       	sbiw	r24, 0x00	; 0
    2b4c:	b9 f3       	breq	.-18     	; 0x2b3c <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2b4e:	ec e2       	ldi	r30, 0x2C	; 44
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	89 81       	ldd	r24, Y+1	; 0x01
    2b54:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2b56:	0f 90       	pop	r0
    2b58:	cf 91       	pop	r28
    2b5a:	df 91       	pop	r29
    2b5c:	08 95       	ret

00002b5e <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2b5e:	df 93       	push	r29
    2b60:	cf 93       	push	r28
    2b62:	cd b7       	in	r28, 0x3d	; 61
    2b64:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2b66:	eb e2       	ldi	r30, 0x2B	; 43
    2b68:	f0 e0       	ldi	r31, 0x00	; 0
    2b6a:	80 81       	ld	r24, Z
    2b6c:	88 23       	and	r24, r24
    2b6e:	dc f7       	brge	.-10     	; 0x2b66 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2b70:	ec e2       	ldi	r30, 0x2C	; 44
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	80 81       	ld	r24, Z
}
    2b76:	cf 91       	pop	r28
    2b78:	df 91       	pop	r29
    2b7a:	08 95       	ret

00002b7c <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2b7c:	df 93       	push	r29
    2b7e:	cf 93       	push	r28
    2b80:	00 d0       	rcall	.+0      	; 0x2b82 <UART_sendString+0x6>
    2b82:	0f 92       	push	r0
    2b84:	cd b7       	in	r28, 0x3d	; 61
    2b86:	de b7       	in	r29, 0x3e	; 62
    2b88:	9b 83       	std	Y+3, r25	; 0x03
    2b8a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2b8c:	19 82       	std	Y+1, r1	; 0x01
    2b8e:	0e c0       	rjmp	.+28     	; 0x2bac <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2b90:	89 81       	ldd	r24, Y+1	; 0x01
    2b92:	28 2f       	mov	r18, r24
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	8a 81       	ldd	r24, Y+2	; 0x02
    2b98:	9b 81       	ldd	r25, Y+3	; 0x03
    2b9a:	fc 01       	movw	r30, r24
    2b9c:	e2 0f       	add	r30, r18
    2b9e:	f3 1f       	adc	r31, r19
    2ba0:	80 81       	ld	r24, Z
    2ba2:	0e 94 98 15 	call	0x2b30	; 0x2b30 <UART_sendByte>
		i++;
    2ba6:	89 81       	ldd	r24, Y+1	; 0x01
    2ba8:	8f 5f       	subi	r24, 0xFF	; 255
    2baa:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2bac:	89 81       	ldd	r24, Y+1	; 0x01
    2bae:	28 2f       	mov	r18, r24
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb4:	9b 81       	ldd	r25, Y+3	; 0x03
    2bb6:	fc 01       	movw	r30, r24
    2bb8:	e2 0f       	add	r30, r18
    2bba:	f3 1f       	adc	r31, r19
    2bbc:	80 81       	ld	r24, Z
    2bbe:	88 23       	and	r24, r24
    2bc0:	39 f7       	brne	.-50     	; 0x2b90 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2bc2:	0f 90       	pop	r0
    2bc4:	0f 90       	pop	r0
    2bc6:	0f 90       	pop	r0
    2bc8:	cf 91       	pop	r28
    2bca:	df 91       	pop	r29
    2bcc:	08 95       	ret

00002bce <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2bce:	0f 93       	push	r16
    2bd0:	1f 93       	push	r17
    2bd2:	df 93       	push	r29
    2bd4:	cf 93       	push	r28
    2bd6:	00 d0       	rcall	.+0      	; 0x2bd8 <UART_receiveString+0xa>
    2bd8:	0f 92       	push	r0
    2bda:	cd b7       	in	r28, 0x3d	; 61
    2bdc:	de b7       	in	r29, 0x3e	; 62
    2bde:	9b 83       	std	Y+3, r25	; 0x03
    2be0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2be2:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2be4:	89 81       	ldd	r24, Y+1	; 0x01
    2be6:	28 2f       	mov	r18, r24
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	8a 81       	ldd	r24, Y+2	; 0x02
    2bec:	9b 81       	ldd	r25, Y+3	; 0x03
    2bee:	8c 01       	movw	r16, r24
    2bf0:	02 0f       	add	r16, r18
    2bf2:	13 1f       	adc	r17, r19
    2bf4:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <UART_recieveByte>
    2bf8:	f8 01       	movw	r30, r16
    2bfa:	80 83       	st	Z, r24
    2bfc:	0f c0       	rjmp	.+30     	; 0x2c1c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2bfe:	89 81       	ldd	r24, Y+1	; 0x01
    2c00:	8f 5f       	subi	r24, 0xFF	; 255
    2c02:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2c04:	89 81       	ldd	r24, Y+1	; 0x01
    2c06:	28 2f       	mov	r18, r24
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c0e:	8c 01       	movw	r16, r24
    2c10:	02 0f       	add	r16, r18
    2c12:	13 1f       	adc	r17, r19
    2c14:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <UART_recieveByte>
    2c18:	f8 01       	movw	r30, r16
    2c1a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2c1c:	89 81       	ldd	r24, Y+1	; 0x01
    2c1e:	28 2f       	mov	r18, r24
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	8a 81       	ldd	r24, Y+2	; 0x02
    2c24:	9b 81       	ldd	r25, Y+3	; 0x03
    2c26:	fc 01       	movw	r30, r24
    2c28:	e2 0f       	add	r30, r18
    2c2a:	f3 1f       	adc	r31, r19
    2c2c:	80 81       	ld	r24, Z
    2c2e:	83 32       	cpi	r24, 0x23	; 35
    2c30:	31 f7       	brne	.-52     	; 0x2bfe <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2c32:	89 81       	ldd	r24, Y+1	; 0x01
    2c34:	28 2f       	mov	r18, r24
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c3c:	fc 01       	movw	r30, r24
    2c3e:	e2 0f       	add	r30, r18
    2c40:	f3 1f       	adc	r31, r19
    2c42:	10 82       	st	Z, r1
}
    2c44:	0f 90       	pop	r0
    2c46:	0f 90       	pop	r0
    2c48:	0f 90       	pop	r0
    2c4a:	cf 91       	pop	r28
    2c4c:	df 91       	pop	r29
    2c4e:	1f 91       	pop	r17
    2c50:	0f 91       	pop	r16
    2c52:	08 95       	ret

00002c54 <__udivmodsi4>:
    2c54:	a1 e2       	ldi	r26, 0x21	; 33
    2c56:	1a 2e       	mov	r1, r26
    2c58:	aa 1b       	sub	r26, r26
    2c5a:	bb 1b       	sub	r27, r27
    2c5c:	fd 01       	movw	r30, r26
    2c5e:	0d c0       	rjmp	.+26     	; 0x2c7a <__udivmodsi4_ep>

00002c60 <__udivmodsi4_loop>:
    2c60:	aa 1f       	adc	r26, r26
    2c62:	bb 1f       	adc	r27, r27
    2c64:	ee 1f       	adc	r30, r30
    2c66:	ff 1f       	adc	r31, r31
    2c68:	a2 17       	cp	r26, r18
    2c6a:	b3 07       	cpc	r27, r19
    2c6c:	e4 07       	cpc	r30, r20
    2c6e:	f5 07       	cpc	r31, r21
    2c70:	20 f0       	brcs	.+8      	; 0x2c7a <__udivmodsi4_ep>
    2c72:	a2 1b       	sub	r26, r18
    2c74:	b3 0b       	sbc	r27, r19
    2c76:	e4 0b       	sbc	r30, r20
    2c78:	f5 0b       	sbc	r31, r21

00002c7a <__udivmodsi4_ep>:
    2c7a:	66 1f       	adc	r22, r22
    2c7c:	77 1f       	adc	r23, r23
    2c7e:	88 1f       	adc	r24, r24
    2c80:	99 1f       	adc	r25, r25
    2c82:	1a 94       	dec	r1
    2c84:	69 f7       	brne	.-38     	; 0x2c60 <__udivmodsi4_loop>
    2c86:	60 95       	com	r22
    2c88:	70 95       	com	r23
    2c8a:	80 95       	com	r24
    2c8c:	90 95       	com	r25
    2c8e:	9b 01       	movw	r18, r22
    2c90:	ac 01       	movw	r20, r24
    2c92:	bd 01       	movw	r22, r26
    2c94:	cf 01       	movw	r24, r30
    2c96:	08 95       	ret

00002c98 <__prologue_saves__>:
    2c98:	2f 92       	push	r2
    2c9a:	3f 92       	push	r3
    2c9c:	4f 92       	push	r4
    2c9e:	5f 92       	push	r5
    2ca0:	6f 92       	push	r6
    2ca2:	7f 92       	push	r7
    2ca4:	8f 92       	push	r8
    2ca6:	9f 92       	push	r9
    2ca8:	af 92       	push	r10
    2caa:	bf 92       	push	r11
    2cac:	cf 92       	push	r12
    2cae:	df 92       	push	r13
    2cb0:	ef 92       	push	r14
    2cb2:	ff 92       	push	r15
    2cb4:	0f 93       	push	r16
    2cb6:	1f 93       	push	r17
    2cb8:	cf 93       	push	r28
    2cba:	df 93       	push	r29
    2cbc:	cd b7       	in	r28, 0x3d	; 61
    2cbe:	de b7       	in	r29, 0x3e	; 62
    2cc0:	ca 1b       	sub	r28, r26
    2cc2:	db 0b       	sbc	r29, r27
    2cc4:	0f b6       	in	r0, 0x3f	; 63
    2cc6:	f8 94       	cli
    2cc8:	de bf       	out	0x3e, r29	; 62
    2cca:	0f be       	out	0x3f, r0	; 63
    2ccc:	cd bf       	out	0x3d, r28	; 61
    2cce:	09 94       	ijmp

00002cd0 <__epilogue_restores__>:
    2cd0:	2a 88       	ldd	r2, Y+18	; 0x12
    2cd2:	39 88       	ldd	r3, Y+17	; 0x11
    2cd4:	48 88       	ldd	r4, Y+16	; 0x10
    2cd6:	5f 84       	ldd	r5, Y+15	; 0x0f
    2cd8:	6e 84       	ldd	r6, Y+14	; 0x0e
    2cda:	7d 84       	ldd	r7, Y+13	; 0x0d
    2cdc:	8c 84       	ldd	r8, Y+12	; 0x0c
    2cde:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ce0:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ce2:	b9 84       	ldd	r11, Y+9	; 0x09
    2ce4:	c8 84       	ldd	r12, Y+8	; 0x08
    2ce6:	df 80       	ldd	r13, Y+7	; 0x07
    2ce8:	ee 80       	ldd	r14, Y+6	; 0x06
    2cea:	fd 80       	ldd	r15, Y+5	; 0x05
    2cec:	0c 81       	ldd	r16, Y+4	; 0x04
    2cee:	1b 81       	ldd	r17, Y+3	; 0x03
    2cf0:	aa 81       	ldd	r26, Y+2	; 0x02
    2cf2:	b9 81       	ldd	r27, Y+1	; 0x01
    2cf4:	ce 0f       	add	r28, r30
    2cf6:	d1 1d       	adc	r29, r1
    2cf8:	0f b6       	in	r0, 0x3f	; 63
    2cfa:	f8 94       	cli
    2cfc:	de bf       	out	0x3e, r29	; 62
    2cfe:	0f be       	out	0x3f, r0	; 63
    2d00:	cd bf       	out	0x3d, r28	; 61
    2d02:	ed 01       	movw	r28, r26
    2d04:	08 95       	ret

00002d06 <itoa>:
    2d06:	fb 01       	movw	r30, r22
    2d08:	9f 01       	movw	r18, r30
    2d0a:	e8 94       	clt
    2d0c:	42 30       	cpi	r20, 0x02	; 2
    2d0e:	c4 f0       	brlt	.+48     	; 0x2d40 <itoa+0x3a>
    2d10:	45 32       	cpi	r20, 0x25	; 37
    2d12:	b4 f4       	brge	.+44     	; 0x2d40 <itoa+0x3a>
    2d14:	4a 30       	cpi	r20, 0x0A	; 10
    2d16:	29 f4       	brne	.+10     	; 0x2d22 <itoa+0x1c>
    2d18:	97 fb       	bst	r25, 7
    2d1a:	1e f4       	brtc	.+6      	; 0x2d22 <itoa+0x1c>
    2d1c:	90 95       	com	r25
    2d1e:	81 95       	neg	r24
    2d20:	9f 4f       	sbci	r25, 0xFF	; 255
    2d22:	64 2f       	mov	r22, r20
    2d24:	77 27       	eor	r23, r23
    2d26:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <__udivmodhi4>
    2d2a:	80 5d       	subi	r24, 0xD0	; 208
    2d2c:	8a 33       	cpi	r24, 0x3A	; 58
    2d2e:	0c f0       	brlt	.+2      	; 0x2d32 <itoa+0x2c>
    2d30:	89 5d       	subi	r24, 0xD9	; 217
    2d32:	81 93       	st	Z+, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	00 97       	sbiw	r24, 0x00	; 0
    2d38:	a1 f7       	brne	.-24     	; 0x2d22 <itoa+0x1c>
    2d3a:	16 f4       	brtc	.+4      	; 0x2d40 <itoa+0x3a>
    2d3c:	5d e2       	ldi	r21, 0x2D	; 45
    2d3e:	51 93       	st	Z+, r21
    2d40:	10 82       	st	Z, r1
    2d42:	c9 01       	movw	r24, r18
    2d44:	0c 94 a4 16 	jmp	0x2d48	; 0x2d48 <strrev>

00002d48 <strrev>:
    2d48:	dc 01       	movw	r26, r24
    2d4a:	fc 01       	movw	r30, r24
    2d4c:	67 2f       	mov	r22, r23
    2d4e:	71 91       	ld	r23, Z+
    2d50:	77 23       	and	r23, r23
    2d52:	e1 f7       	brne	.-8      	; 0x2d4c <strrev+0x4>
    2d54:	32 97       	sbiw	r30, 0x02	; 2
    2d56:	04 c0       	rjmp	.+8      	; 0x2d60 <strrev+0x18>
    2d58:	7c 91       	ld	r23, X
    2d5a:	6d 93       	st	X+, r22
    2d5c:	70 83       	st	Z, r23
    2d5e:	62 91       	ld	r22, -Z
    2d60:	ae 17       	cp	r26, r30
    2d62:	bf 07       	cpc	r27, r31
    2d64:	c8 f3       	brcs	.-14     	; 0x2d58 <strrev+0x10>
    2d66:	08 95       	ret

00002d68 <__udivmodhi4>:
    2d68:	aa 1b       	sub	r26, r26
    2d6a:	bb 1b       	sub	r27, r27
    2d6c:	51 e1       	ldi	r21, 0x11	; 17
    2d6e:	07 c0       	rjmp	.+14     	; 0x2d7e <__udivmodhi4_ep>

00002d70 <__udivmodhi4_loop>:
    2d70:	aa 1f       	adc	r26, r26
    2d72:	bb 1f       	adc	r27, r27
    2d74:	a6 17       	cp	r26, r22
    2d76:	b7 07       	cpc	r27, r23
    2d78:	10 f0       	brcs	.+4      	; 0x2d7e <__udivmodhi4_ep>
    2d7a:	a6 1b       	sub	r26, r22
    2d7c:	b7 0b       	sbc	r27, r23

00002d7e <__udivmodhi4_ep>:
    2d7e:	88 1f       	adc	r24, r24
    2d80:	99 1f       	adc	r25, r25
    2d82:	5a 95       	dec	r21
    2d84:	a9 f7       	brne	.-22     	; 0x2d70 <__udivmodhi4_loop>
    2d86:	80 95       	com	r24
    2d88:	90 95       	com	r25
    2d8a:	bc 01       	movw	r22, r24
    2d8c:	cd 01       	movw	r24, r26
    2d8e:	08 95       	ret

00002d90 <_exit>:
    2d90:	f8 94       	cli

00002d92 <__stop_program>:
    2d92:	ff cf       	rjmp	.-2      	; 0x2d92 <__stop_program>
